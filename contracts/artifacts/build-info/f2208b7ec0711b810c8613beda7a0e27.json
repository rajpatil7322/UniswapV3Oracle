{
	"id": "f2208b7ec0711b810c8613beda7a0e27",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/UniswapV3Oracle.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\";\n\n// const FACTORY = \"0x1F98431c8aD98523631AE4a59f267346ea31F984\"\n//     // USDC\n// const TOKEN_0 = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"\n// const DECIMALS_0 = 6n;\n// // WETH\n// const TOKEN_1 = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"\n// const DECIMALS_1 = 18n;\n// // 0.3%\n// const FEE = 3000\n\n\n\ncontract UniswapV3Oracle {\n    address public immutable token0;\n    address public immutable token1;\n    address public immutable pool;\n\n    constructor(address _token0,address _token1,address _factory,uint24 _fee){\n        token0=_token0;\n        token1=_token1;\n\n        address _pool=IUniswapV3Factory(_factory).getPool(\n            _token0,_token1,_fee\n        );\n        require(_pool!=address(0),\"Pools does not exist\");\n        pool=_pool;\n    }\n\n    function estimateAmountOut(\n        address tokenIn,\n        uint128 amountIn,\n        uint32 secondsAgo\n    ) external view returns(uint amountOut) {\n        require(tokenIn==token0 || tokenIn==token1,\"invalid token\");\n        address tokenout=tokenIn==token0 ? token1:token0;\n\n        (int24 tick,)=OracleLibrary.consult(pool,secondsAgo);\n        amountOut = OracleLibrary.getQuoteAtTick(\n            tick,\n            amountIn,\n            tokenIn,\n            tokenout\n        );\n    }\n}"
			},
			"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\n/// @title Oracle library\n/// @notice Provides functions to integrate with V3 pool oracle\nlibrary OracleLibrary {\n    /// @notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\n    /// @param pool Address of the pool that we want to observe\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\n    function consult(address pool, uint32 secondsAgo)\n        internal\n        view\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\n    {\n        require(secondsAgo != 0, 'BP');\n\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = secondsAgo;\n        secondsAgos[1] = 0;\n\n        (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) =\n            IUniswapV3Pool(pool).observe(secondsAgos);\n\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n        uint160 secondsPerLiquidityCumulativesDelta =\n            secondsPerLiquidityCumulativeX128s[1] - secondsPerLiquidityCumulativeX128s[0];\n\n        arithmeticMeanTick = int24(tickCumulativesDelta / secondsAgo);\n        // Always round to negative infinity\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0)) arithmeticMeanTick--;\n\n        // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\n        uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\n        harmonicMeanLiquidity = uint128(secondsAgoX160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32));\n    }\n\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\n    /// @param tick Tick value used to calculate the quote\n    /// @param baseAmount Amount of token to be converted\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\n    function getQuoteAtTick(\n        int24 tick,\n        uint128 baseAmount,\n        address baseToken,\n        address quoteToken\n    ) internal pure returns (uint256 quoteAmount) {\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\n\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\n        if (sqrtRatioX96 <= type(uint128).max) {\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\n        } else {\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\n        }\n    }\n\n    /// @notice Given a pool, it returns the number of seconds ago of the oldest stored observation\n    /// @param pool Address of Uniswap V3 pool that we want to observe\n    /// @return secondsAgo The number of seconds ago of the oldest observation stored for the pool\n    function getOldestObservationSecondsAgo(address pool) internal view returns (uint32 secondsAgo) {\n        (, , uint16 observationIndex, uint16 observationCardinality, , , ) = IUniswapV3Pool(pool).slot0();\n        require(observationCardinality > 0, 'NI');\n\n        (uint32 observationTimestamp, , , bool initialized) =\n            IUniswapV3Pool(pool).observations((observationIndex + 1) % observationCardinality);\n\n        // The next index might not be initialized if the cardinality is in the process of increasing\n        // In this case the oldest observation is always in index 0\n        if (!initialized) {\n            (observationTimestamp, , , ) = IUniswapV3Pool(pool).observations(0);\n        }\n\n        secondsAgo = uint32(block.timestamp) - observationTimestamp;\n    }\n\n    /// @notice Given a pool, it returns the tick value as of the start of the current block\n    /// @param pool Address of Uniswap V3 pool\n    /// @return The tick that the pool was in at the start of the current block\n    function getBlockStartingTickAndLiquidity(address pool) internal view returns (int24, uint128) {\n        (, int24 tick, uint16 observationIndex, uint16 observationCardinality, , , ) = IUniswapV3Pool(pool).slot0();\n\n        // 2 observations are needed to reliably calculate the block starting tick\n        require(observationCardinality > 1, 'NEO');\n\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\n        (uint32 observationTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, ) =\n            IUniswapV3Pool(pool).observations(observationIndex);\n        if (observationTimestamp != uint32(block.timestamp)) {\n            return (tick, IUniswapV3Pool(pool).liquidity());\n        }\n\n        uint256 prevIndex = (uint256(observationIndex) + observationCardinality - 1) % observationCardinality;\n        (\n            uint32 prevObservationTimestamp,\n            int56 prevTickCumulative,\n            uint160 prevSecondsPerLiquidityCumulativeX128,\n            bool prevInitialized\n        ) = IUniswapV3Pool(pool).observations(prevIndex);\n\n        require(prevInitialized, 'ONI');\n\n        uint32 delta = observationTimestamp - prevObservationTimestamp;\n        tick = int24((tickCumulative - prevTickCumulative) / delta);\n        uint128 liquidity =\n            uint128(\n                (uint192(delta) * type(uint160).max) /\n                    (uint192(secondsPerLiquidityCumulativeX128 - prevSecondsPerLiquidityCumulativeX128) << 32)\n            );\n        return (tick, liquidity);\n    }\n\n    /// @notice Information for calculating a weighted arithmetic mean tick\n    struct WeightedTickData {\n        int24 tick;\n        uint128 weight;\n    }\n\n    /// @notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\n    /// @param weightedTickData An array of ticks and weights\n    /// @return weightedArithmeticMeanTick The weighted arithmetic mean tick\n    /// @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\n    /// @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\n    function getWeightedArithmeticMeanTick(WeightedTickData[] memory weightedTickData)\n        internal\n        pure\n        returns (int24 weightedArithmeticMeanTick)\n    {\n        // Accumulates the sum of products between each tick and its weight\n        int256 numerator;\n\n        // Accumulates the sum of the weights\n        uint256 denominator;\n\n        // Products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\n        for (uint256 i; i < weightedTickData.length; i++) {\n            numerator += weightedTickData[i].tick * int256(weightedTickData[i].weight);\n            denominator += weightedTickData[i].weight;\n        }\n\n        weightedArithmeticMeanTick = int24(numerator / int256(denominator));\n        // Always round to negative infinity\n        if (numerator < 0 && (numerator % int256(denominator) != 0)) weightedArithmeticMeanTick--;\n    }\n\n    /// @notice Returns the \"synthetic\" tick which represents the price of the first entry in `tokens` in terms of the last\n    /// @dev Useful for calculating relative prices along routes.\n    /// @dev There must be one tick for each pairwise set of tokens.\n    /// @param tokens The token contract addresses\n    /// @param ticks The ticks, representing the price of each token pair in `tokens`\n    /// @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`\n    function getChainedPrice(address[] memory tokens, int24[] memory ticks)\n        internal\n        pure\n        returns (int256 syntheticTick)\n    {\n        require(tokens.length - 1 == ticks.length, 'DL');\n        for (uint256 i = 1; i <= ticks.length; i++) {\n            // check the tokens for address sort order, then accumulate the\n            // ticks into the running synthetic tick, ensuring that intermediate tokens \"cancel out\"\n            tokens[i - 1] < tokens[i] ? syntheticTick += ticks[i - 1] : syntheticTick -= ticks[i - 1];\n        }\n    }\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
			},
			"@uniswap/v3-core/contracts/libraries/TickMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
			},
			"@uniswap/v3-core/contracts/libraries/FullMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0 <0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
				"IUniswapV3Factory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "FeeAmountEnabled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "PoolCreated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "createPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "enableFeeAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "feeAmountTickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip",
									"tickSpacing": "The minimum number of ticks between initialized ticks for pools created with the given fee"
								}
							},
							"OwnerChanged(address,address)": {
								"params": {
									"newOwner": "The owner after the owner was changed",
									"oldOwner": "The owner before the owner was changed"
								}
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"pool": "The address of the created pool",
									"tickSpacing": "The minimum number of ticks between initialized ticks",
									"token0": "The first token of the pool by address sort order",
									"token1": "The second token of the pool by address sort order"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"createPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.",
								"params": {
									"fee": "The desired fee for the pool",
									"tokenA": "One of the two tokens in the desired pool",
									"tokenB": "The other of the two tokens in the desired pool"
								},
								"returns": {
									"pool": "The address of the newly created pool"
								}
							},
							"enableFeeAmount(uint24,int24)": {
								"details": "Fee amounts may never be removed once enabled",
								"params": {
									"fee": "The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)",
									"tickSpacing": "The spacing between ticks to be enforced for all pools created with the given fee amount"
								}
							},
							"feeAmountTickSpacing(uint24)": {
								"details": "A fee amount can never be removed, so this value should be hard coded or cached in the calling context",
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee"
								},
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"getPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either token0/token1 or token1/token0 order",
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"tokenA": "The contract address of either token0 or token1",
									"tokenB": "The contract address of the other token"
								},
								"returns": {
									"pool": "The pool address"
								}
							},
							"owner()": {
								"details": "Can be changed by the current owner via setOwner",
								"returns": {
									"_0": "The address of the factory owner"
								}
							},
							"setOwner(address)": {
								"details": "Must be called by the current owner",
								"params": {
									"_owner": "The new owner of the factory"
								}
							}
						},
						"title": "The interface for the Uniswap V3 Factory",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createPool(address,address,uint24)": "a1671295",
							"enableFeeAmount(uint24,int24)": "8a7c195f",
							"feeAmountTickSpacing(uint24)": "22afcccb",
							"getPool(address,address,uint24)": "1698ee82",
							"owner()": "8da5cb5b",
							"setOwner(address)": "13af4035"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"FeeAmountEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"enableFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"feeAmountTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks for pools created with the given fee\"}},\"OwnerChanged(address,address)\":{\"params\":{\"newOwner\":\"The owner after the owner was changed\",\"oldOwner\":\"The owner before the owner was changed\"}},\"PoolCreated(address,address,uint24,int24,address)\":{\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"pool\":\"The address of the created pool\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks\",\"token0\":\"The first token of the pool by address sort order\",\"token1\":\"The second token of the pool by address sort order\"}}},\"kind\":\"dev\",\"methods\":{\"createPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.\",\"params\":{\"fee\":\"The desired fee for the pool\",\"tokenA\":\"One of the two tokens in the desired pool\",\"tokenB\":\"The other of the two tokens in the desired pool\"},\"returns\":{\"pool\":\"The address of the newly created pool\"}},\"enableFeeAmount(uint24,int24)\":{\"details\":\"Fee amounts may never be removed once enabled\",\"params\":{\"fee\":\"The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\",\"tickSpacing\":\"The spacing between ticks to be enforced for all pools created with the given fee amount\"}},\"feeAmountTickSpacing(uint24)\":{\"details\":\"A fee amount can never be removed, so this value should be hard coded or cached in the calling context\",\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\"},\"returns\":{\"_0\":\"The tick spacing\"}},\"getPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\",\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"tokenA\":\"The contract address of either token0 or token1\",\"tokenB\":\"The contract address of the other token\"},\"returns\":{\"pool\":\"The pool address\"}},\"owner()\":{\"details\":\"Can be changed by the current owner via setOwner\",\"returns\":{\"_0\":\"The address of the factory owner\"}},\"setOwner(address)\":{\"details\":\"Must be called by the current owner\",\"params\":{\"_owner\":\"The new owner of the factory\"}}},\"title\":\"The interface for the Uniswap V3 Factory\",\"version\":1},\"userdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"notice\":\"Emitted when a new fee amount is enabled for pool creation via the factory\"},\"OwnerChanged(address,address)\":{\"notice\":\"Emitted when the owner of the factory is changed\"},\"PoolCreated(address,address,uint24,int24,address)\":{\"notice\":\"Emitted when a pool is created\"}},\"kind\":\"user\",\"methods\":{\"createPool(address,address,uint24)\":{\"notice\":\"Creates a pool for the given two tokens and fee\"},\"enableFeeAmount(uint24,int24)\":{\"notice\":\"Enables a fee amount with the given tickSpacing\"},\"feeAmountTickSpacing(uint24)\":{\"notice\":\"Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\"},\"getPool(address,address,uint24)\":{\"notice\":\"Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\"},\"owner()\":{\"notice\":\"Returns the current owner of the factory\"},\"setOwner(address)\":{\"notice\":\"Updates the owner of the factory\"}},\"notice\":\"The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":\"IUniswapV3Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b9379ad954680c44a0bc523b314ae4c4da735f9fe1d02aa56ea5bdba6f1136f2\",\"dweb:/ipfs/QmZXdgQNXKAckrXWz9R3mc47F1fvDvr28a2ewJrwNAw71B\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"notice": "Emitted when a new fee amount is enabled for pool creation via the factory"
							},
							"OwnerChanged(address,address)": {
								"notice": "Emitted when the owner of the factory is changed"
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"notice": "Emitted when a pool is created"
							}
						},
						"kind": "user",
						"methods": {
							"createPool(address,address,uint24)": {
								"notice": "Creates a pool for the given two tokens and fee"
							},
							"enableFeeAmount(uint24,int24)": {
								"notice": "Enables a fee amount with the given tickSpacing"
							},
							"feeAmountTickSpacing(uint24)": {
								"notice": "Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled"
							},
							"getPool(address,address,uint24)": {
								"notice": "Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist"
							},
							"owner()": {
								"notice": "Returns the current owner of the factory"
							},
							"setOwner(address)": {
								"notice": "Updates the owner of the factory"
							}
						},
						"notice": "The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"IUniswapV3Pool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "The interface for a Uniswap V3 Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"setFeeProtocol(uint8,uint8)": "8206a4d1",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"IUniswapV3PoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"swap(address,bool,int256,uint160,bytes)": "128acb08"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"IUniswapV3PoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"IUniswapV3PoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"IUniswapV3PoolImmutables": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"maxLiquidityPerTick()": "70cf754a",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are fixed for a pool forever, i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"IUniswapV3PoolOwnerActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"setFeeProtocol(uint8,uint8)": "8206a4d1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"IUniswapV3PoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"slot0()": "3850c7bd",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/libraries/FullMath.sol": {
				"FullMath": {
					"abi": [],
					"devdoc": {
						"details": "Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits",
						"kind": "dev",
						"methods": {},
						"title": "Contains 512-bit math functions",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":362:5124  library FullMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":362:5124  library FullMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f9c35d942826af63c46e2adc8357fe9661b937b7379149bc153b8b50b845489764736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f9c35d942826af63c46e2adc8357fe9661b937b7379149bc153b8b50b845489764736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 0xC3 0x5D SWAP5 0x28 0x26 0xAF PUSH4 0xC46E2ADC DUP4 JUMPI INVALID SWAP7 PUSH2 0xB937 0xB7 CALLDATACOPY SWAP2 0x49 0xBC ISZERO EXTCODESIZE DUP12 POP 0xB8 GASLIMIT 0x48 SWAP8 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "362:4762:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f9c35d942826af63c46e2adc8357fe9661b937b7379149bc153b8b50b845489764736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 0xC3 0x5D SWAP5 0x28 0x26 0xAF PUSH4 0xC46E2ADC DUP4 JUMPI INVALID SWAP7 PUSH2 0xB937 0xB7 CALLDATACOPY SWAP2 0x49 0xBC ISZERO EXTCODESIZE DUP12 POP 0xB8 GASLIMIT 0x48 SWAP8 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "362:4762:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDivRoundingUp(uint256,uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "INVALID",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 362,
									"end": 5124,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f9c35d942826af63c46e2adc8357fe9661b937b7379149bc153b8b50b845489764736f6c63430007060033",
									".code": [
										{
											"begin": 362,
											"end": 5124,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 362,
											"end": 5124,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Contains 512-bit math functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":\"FullMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3874093a6b37d8e68f9475a91f8eb0a1c808cb6153c84cfe6c37909505a4d24e\",\"dweb:/ipfs/QmUqGpQqvSHX4SwUvcBCs9g4ZhR9JPhgD3615oUigAhtjj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/libraries/TickMath.sol": {
				"TickMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"MAX_SQRT_RATIO": {
								"details": "The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
							},
							"MAX_TICK": {
								"details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
							},
							"MIN_SQRT_RATIO": {
								"details": "The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
							},
							"MIN_TICK": {
								"details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
							}
						},
						"title": "Math library for computing sqrt prices from ticks and vice versa",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":313:8644  library TickMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":313:8644  library TickMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220088155d964d43a73867fb878ddd461135a55c36ccca22ac587972e02302871a164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220088155d964d43a73867fb878ddd461135a55c36ccca22ac587972e02302871a164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD DUP2 SSTORE 0xD9 PUSH5 0xD43A73867F 0xB8 PUSH25 0xDDD461135A55C36CCCA22AC587972E02302871A164736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "313:8331:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220088155d964d43a73867fb878ddd461135a55c36ccca22ac587972e02302871a164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD DUP2 SSTORE 0xD9 PUSH5 0xD43A73867F 0xB8 PUSH25 0xDDD461135A55C36CCCA22AC587972E02302871A164736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "313:8331:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getSqrtRatioAtTick(int24)": "infinite",
								"getTickAtSqrtRatio(uint160)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "INVALID",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220088155d964d43a73867fb878ddd461135a55c36ccca22ac587972e02302871a164736f6c63430007060033",
									".code": [
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3f3d2d7c2723c91830c74d96292f28fc1cfe28d388cdb9c1a5ebadb4c2b96f81\",\"dweb:/ipfs/QmYU4wk8MEm33wVWR38LoncvR7b8PP1mLuGBKX3dUpYJVE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol": {
				"OracleLibrary": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Oracle library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":356:9339  library OracleLibrary {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":356:9339  library OracleLibrary {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220287644743ee4dc0343d94704569690cd2c1cd2f23b842b97bb6d888913fac62a64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220287644743ee4dc0343d94704569690cd2c1cd2f23b842b97bb6d888913fac62a64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 PUSH23 0x44743EE4DC0343D94704569690CD2C1CD2F23B842B97BB PUSH14 0x888913FAC62A64736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "356:8983:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220287644743ee4dc0343d94704569690cd2c1cd2f23b842b97bb6d888913fac62a64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 PUSH23 0x44743EE4DC0343D94704569690CD2C1CD2F23B842B97BB PUSH14 0x888913FAC62A64736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "356:8983:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"consult(address,uint32)": "infinite",
								"getBlockStartingTickAndLiquidity(address)": "infinite",
								"getChainedPrice(address[] memory,int24[] memory)": "infinite",
								"getOldestObservationSecondsAgo(address)": "infinite",
								"getQuoteAtTick(int24,uint128,address,address)": "infinite",
								"getWeightedArithmeticMeanTick(struct OracleLibrary.WeightedTickData memory[] memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 356,
									"end": 9339,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "INVALID",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 356,
									"end": 9339,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220287644743ee4dc0343d94704569690cd2c1cd2f23b842b97bb6d888913fac62a64736f6c63430007060033",
									".code": [
										{
											"begin": 356,
											"end": 9339,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 356,
											"end": 9339,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 356,
											"end": 9339,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 356,
											"end": 9339,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 356,
											"end": 9339,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 9339,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 356,
											"end": 9339,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 9339,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 356,
											"end": 9339,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Oracle library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides functions to integrate with V3 pool oracle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":\"OracleLibrary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3874093a6b37d8e68f9475a91f8eb0a1c808cb6153c84cfe6c37909505a4d24e\",\"dweb:/ipfs/QmUqGpQqvSHX4SwUvcBCs9g4ZhR9JPhgD3615oUigAhtjj\"]},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3f3d2d7c2723c91830c74d96292f28fc1cfe28d388cdb9c1a5ebadb4c2b96f81\",\"dweb:/ipfs/QmYU4wk8MEm33wVWR38LoncvR7b8PP1mLuGBKX3dUpYJVE\"]},\"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":{\"keccak256\":\"0xf24785c7c0b8afa39ec0a90d027fefca682ce3540d8448fc0f90075a7e1b92ca\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb1ac49b3b9fccad8ab5b0df0ef502d61ce68114d5c45784d0c61b483349cf78\",\"dweb:/ipfs/QmZky2WujN7H9n2JQWNzTzShcAkG7NGWoJGxTawkd64K4D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Provides functions to integrate with V3 pool oracle",
						"version": 1
					}
				}
			},
			"contracts/UniswapV3Oracle.sol": {
				"UniswapV3Oracle": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token1",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "_fee",
									"type": "uint24"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amountIn",
									"type": "uint128"
								},
								{
									"internalType": "uint32",
									"name": "secondsAgo",
									"type": "uint32"
								}
							],
							"name": "estimateAmountOut",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pool",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/UniswapV3Oracle.sol\":530:1479  contract UniswapV3Oracle {... */\n  mstore(0x40, 0xe0)\n    /* \"contracts/UniswapV3Oracle.sol\":671:982  constructor(address _token0,address _token1,address _factory,uint24 _fee){... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/UniswapV3Oracle.sol\":761:768  _token0 */\n  dup4\n    /* \"contracts/UniswapV3Oracle.sol\":754:768  token0=_token0 */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x80\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x60\n  shl\n  dup2\n  mstore\n  pop\n  pop\n    /* \"contracts/UniswapV3Oracle.sol\":785:792  _token1 */\n  dup3\n    /* \"contracts/UniswapV3Oracle.sol\":778:792  token1=_token1 */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xa0\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x60\n  shl\n  dup2\n  mstore\n  pop\n  pop\n    /* \"contracts/UniswapV3Oracle.sol\":803:816  address _pool */\n  0x00\n    /* \"contracts/UniswapV3Oracle.sol\":835:843  _factory */\n  dup3\n    /* \"contracts/UniswapV3Oracle.sol\":817:852  IUniswapV3Factory(_factory).getPool */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x1698ee82\n    /* \"contracts/UniswapV3Oracle.sol\":866:873  _token0 */\n  dup7\n    /* \"contracts/UniswapV3Oracle.sol\":874:881  _token1 */\n  dup7\n    /* \"contracts/UniswapV3Oracle.sol\":882:886  _fee */\n  dup6\n    /* \"contracts/UniswapV3Oracle.sol\":817:896  IUniswapV3Factory(_factory).getPool(... */\n  mload(0x40)\n  dup5\n  0xffffffff\n  and\n  0xe0\n  shl\n  dup2\n  mstore\n  0x04\n  add\n  tag_6\n  swap4\n  swap3\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  0x20\n  mload(0x40)\n  dup1\n  dup4\n  sub\n  dup2\n  dup7\n  dup1\n  extcodesize\n  iszero\n  dup1\n  iszero\n  tag_8\n  jumpi\n  0x00\n  dup1\n  revert\ntag_8:\n  pop\n  gas\n  staticcall\n  iszero\n  dup1\n  iszero\n  tag_10\n  jumpi\n  returndatasize\n  0x00\n  dup1\n  returndatacopy\n  revert(0x00, returndatasize)\ntag_10:\n  pop\n  pop\n  pop\n  pop\n  mload(0x40)\n  returndatasize\n  not(0x1f)\n  0x1f\n  dup3\n  add\n  and\n  dup3\n  add\n  dup1\n  0x40\n  mstore\n  pop\n  dup2\n  add\n  swap1\n  tag_11\n  swap2\n  swap1\n  tag_12\n  jump\t// in\ntag_11:\n    /* \"contracts/UniswapV3Oracle.sol\":803:896  address _pool=IUniswapV3Factory(_factory).getPool(... */\n  swap1\n  pop\n    /* \"contracts/UniswapV3Oracle.sol\":929:930  0 */\n  0x00\n    /* \"contracts/UniswapV3Oracle.sol\":914:931  _pool!=address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"contracts/UniswapV3Oracle.sol\":914:919  _pool */\n  dup2\n    /* \"contracts/UniswapV3Oracle.sol\":914:931  _pool!=address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  eq\n  iszero\n    /* \"contracts/UniswapV3Oracle.sol\":906:955  require(_pool!=address(0),\"Pools does not exist\") */\n  tag_13\n  jumpi\n  mload(0x40)\n  0x08c379a000000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_14\n  swap1\n  tag_15\n  jump\t// in\ntag_14:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_13:\n    /* \"contracts/UniswapV3Oracle.sol\":970:975  _pool */\n  dup1\n    /* \"contracts/UniswapV3Oracle.sol\":965:975  pool=_pool */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xc0\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x60\n  shl\n  dup2\n  mstore\n  pop\n  pop\n    /* \"contracts/UniswapV3Oracle.sol\":671:982  constructor(address _token0,address _token1,address _factory,uint24 _fee){... */\n  pop\n  pop\n  pop\n  pop\n  pop\n    /* \"contracts/UniswapV3Oracle.sol\":530:1479  contract UniswapV3Oracle {... */\n  jump(tag_16)\n    /* \"#utility.yul\":7:150   */\ntag_18:\n  0x00\n    /* \"#utility.yul\":95:101   */\n  dup2\n    /* \"#utility.yul\":89:102   */\n  mload\n    /* \"#utility.yul\":80:102   */\n  swap1\n  pop\n    /* \"#utility.yul\":111:144   */\n  tag_20\n    /* \"#utility.yul\":138:143   */\n  dup2\n    /* \"#utility.yul\":111:144   */\n  tag_21\n  jump\t// in\ntag_20:\n    /* \"#utility.yul\":70:150   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":156:297   */\ntag_22:\n  0x00\n    /* \"#utility.yul\":243:249   */\n  dup2\n    /* \"#utility.yul\":237:250   */\n  mload\n    /* \"#utility.yul\":228:250   */\n  swap1\n  pop\n    /* \"#utility.yul\":259:291   */\n  tag_24\n    /* \"#utility.yul\":285:290   */\n  dup2\n    /* \"#utility.yul\":259:291   */\n  tag_25\n  jump\t// in\ntag_24:\n    /* \"#utility.yul\":218:297   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":303:587   */\ntag_12:\n  0x00\n    /* \"#utility.yul\":422:424   */\n  0x20\n    /* \"#utility.yul\":410:419   */\n  dup3\n    /* \"#utility.yul\":401:408   */\n  dup5\n    /* \"#utility.yul\":397:420   */\n  sub\n    /* \"#utility.yul\":393:425   */\n  slt\n    /* \"#utility.yul\":390:392   */\n  iszero\n  tag_27\n  jumpi\n    /* \"#utility.yul\":438:439   */\n  0x00\n    /* \"#utility.yul\":435:436   */\n  dup1\n    /* \"#utility.yul\":428:440   */\n  revert\n    /* \"#utility.yul\":390:392   */\ntag_27:\n    /* \"#utility.yul\":481:482   */\n  0x00\n    /* \"#utility.yul\":506:570   */\n  tag_28\n    /* \"#utility.yul\":562:569   */\n  dup5\n    /* \"#utility.yul\":553:559   */\n  dup3\n    /* \"#utility.yul\":542:551   */\n  dup6\n    /* \"#utility.yul\":538:560   */\n  add\n    /* \"#utility.yul\":506:570   */\n  tag_18\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":496:570   */\n  swap2\n  pop\n    /* \"#utility.yul\":452:580   */\n  pop\n    /* \"#utility.yul\":380:587   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":593:1344   */\ntag_3:\n  0x00\n  dup1\n  0x00\n  dup1\n    /* \"#utility.yul\":762:765   */\n  0x80\n    /* \"#utility.yul\":750:759   */\n  dup6\n    /* \"#utility.yul\":741:748   */\n  dup8\n    /* \"#utility.yul\":737:760   */\n  sub\n    /* \"#utility.yul\":733:766   */\n  slt\n    /* \"#utility.yul\":730:732   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":779:780   */\n  0x00\n    /* \"#utility.yul\":776:777   */\n  dup1\n    /* \"#utility.yul\":769:781   */\n  revert\n    /* \"#utility.yul\":730:732   */\ntag_30:\n    /* \"#utility.yul\":822:823   */\n  0x00\n    /* \"#utility.yul\":847:911   */\n  tag_31\n    /* \"#utility.yul\":903:910   */\n  dup8\n    /* \"#utility.yul\":894:900   */\n  dup3\n    /* \"#utility.yul\":883:892   */\n  dup9\n    /* \"#utility.yul\":879:901   */\n  add\n    /* \"#utility.yul\":847:911   */\n  tag_18\n  jump\t// in\ntag_31:\n    /* \"#utility.yul\":837:911   */\n  swap5\n  pop\n    /* \"#utility.yul\":793:921   */\n  pop\n    /* \"#utility.yul\":960:962   */\n  0x20\n    /* \"#utility.yul\":986:1050   */\n  tag_32\n    /* \"#utility.yul\":1042:1049   */\n  dup8\n    /* \"#utility.yul\":1033:1039   */\n  dup3\n    /* \"#utility.yul\":1022:1031   */\n  dup9\n    /* \"#utility.yul\":1018:1040   */\n  add\n    /* \"#utility.yul\":986:1050   */\n  tag_18\n  jump\t// in\ntag_32:\n    /* \"#utility.yul\":976:1050   */\n  swap4\n  pop\n    /* \"#utility.yul\":931:1060   */\n  pop\n    /* \"#utility.yul\":1099:1101   */\n  0x40\n    /* \"#utility.yul\":1125:1189   */\n  tag_33\n    /* \"#utility.yul\":1181:1188   */\n  dup8\n    /* \"#utility.yul\":1172:1178   */\n  dup3\n    /* \"#utility.yul\":1161:1170   */\n  dup9\n    /* \"#utility.yul\":1157:1179   */\n  add\n    /* \"#utility.yul\":1125:1189   */\n  tag_18\n  jump\t// in\ntag_33:\n    /* \"#utility.yul\":1115:1189   */\n  swap3\n  pop\n    /* \"#utility.yul\":1070:1199   */\n  pop\n    /* \"#utility.yul\":1238:1240   */\n  0x60\n    /* \"#utility.yul\":1264:1327   */\n  tag_34\n    /* \"#utility.yul\":1319:1326   */\n  dup8\n    /* \"#utility.yul\":1310:1316   */\n  dup3\n    /* \"#utility.yul\":1299:1308   */\n  dup9\n    /* \"#utility.yul\":1295:1317   */\n  add\n    /* \"#utility.yul\":1264:1327   */\n  tag_22\n  jump\t// in\ntag_34:\n    /* \"#utility.yul\":1254:1327   */\n  swap2\n  pop\n    /* \"#utility.yul\":1209:1337   */\n  pop\n    /* \"#utility.yul\":720:1344   */\n  swap3\n  swap6\n  swap2\n  swap5\n  pop\n  swap3\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1350:1468   */\ntag_35:\n    /* \"#utility.yul\":1437:1461   */\n  tag_37\n    /* \"#utility.yul\":1455:1460   */\n  dup2\n    /* \"#utility.yul\":1437:1461   */\n  tag_38\n  jump\t// in\ntag_37:\n    /* \"#utility.yul\":1432:1435   */\n  dup3\n    /* \"#utility.yul\":1425:1462   */\n  mstore\n    /* \"#utility.yul\":1415:1468   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1474:1792   */\ntag_39:\n  0x00\n    /* \"#utility.yul\":1637:1704   */\n  tag_41\n    /* \"#utility.yul\":1701:1703   */\n  0x14\n    /* \"#utility.yul\":1696:1699   */\n  dup4\n    /* \"#utility.yul\":1637:1704   */\n  tag_42\n  jump\t// in\ntag_41:\n    /* \"#utility.yul\":1630:1704   */\n  swap2\n  pop\n    /* \"#utility.yul\":1734:1756   */\n  0x506f6f6c7320646f6573206e6f74206578697374000000000000000000000000\n    /* \"#utility.yul\":1730:1731   */\n  0x00\n    /* \"#utility.yul\":1725:1728   */\n  dup4\n    /* \"#utility.yul\":1721:1732   */\n  add\n    /* \"#utility.yul\":1714:1757   */\n  mstore\n    /* \"#utility.yul\":1783:1785   */\n  0x20\n    /* \"#utility.yul\":1778:1781   */\n  dup3\n    /* \"#utility.yul\":1774:1786   */\n  add\n    /* \"#utility.yul\":1767:1786   */\n  swap1\n  pop\n    /* \"#utility.yul\":1620:1792   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1798:1913   */\ntag_43:\n    /* \"#utility.yul\":1883:1906   */\n  tag_45\n    /* \"#utility.yul\":1900:1905   */\n  dup2\n    /* \"#utility.yul\":1883:1906   */\n  tag_46\n  jump\t// in\ntag_45:\n    /* \"#utility.yul\":1878:1881   */\n  dup3\n    /* \"#utility.yul\":1871:1907   */\n  mstore\n    /* \"#utility.yul\":1861:1913   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1919:2357   */\ntag_7:\n  0x00\n    /* \"#utility.yul\":2104:2106   */\n  0x60\n    /* \"#utility.yul\":2093:2102   */\n  dup3\n    /* \"#utility.yul\":2089:2107   */\n  add\n    /* \"#utility.yul\":2081:2107   */\n  swap1\n  pop\n    /* \"#utility.yul\":2117:2188   */\n  tag_48\n    /* \"#utility.yul\":2185:2186   */\n  0x00\n    /* \"#utility.yul\":2174:2183   */\n  dup4\n    /* \"#utility.yul\":2170:2187   */\n  add\n    /* \"#utility.yul\":2161:2167   */\n  dup7\n    /* \"#utility.yul\":2117:2188   */\n  tag_35\n  jump\t// in\ntag_48:\n    /* \"#utility.yul\":2198:2270   */\n  tag_49\n    /* \"#utility.yul\":2266:2268   */\n  0x20\n    /* \"#utility.yul\":2255:2264   */\n  dup4\n    /* \"#utility.yul\":2251:2269   */\n  add\n    /* \"#utility.yul\":2242:2248   */\n  dup6\n    /* \"#utility.yul\":2198:2270   */\n  tag_35\n  jump\t// in\ntag_49:\n    /* \"#utility.yul\":2280:2350   */\n  tag_50\n    /* \"#utility.yul\":2346:2348   */\n  0x40\n    /* \"#utility.yul\":2335:2344   */\n  dup4\n    /* \"#utility.yul\":2331:2349   */\n  add\n    /* \"#utility.yul\":2322:2328   */\n  dup5\n    /* \"#utility.yul\":2280:2350   */\n  tag_43\n  jump\t// in\ntag_50:\n    /* \"#utility.yul\":2071:2357   */\n  swap5\n  swap4\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2363:2782   */\ntag_15:\n  0x00\n    /* \"#utility.yul\":2567:2569   */\n  0x20\n    /* \"#utility.yul\":2556:2565   */\n  dup3\n    /* \"#utility.yul\":2552:2570   */\n  add\n    /* \"#utility.yul\":2544:2570   */\n  swap1\n  pop\n    /* \"#utility.yul\":2616:2625   */\n  dup2\n    /* \"#utility.yul\":2610:2614   */\n  dup2\n    /* \"#utility.yul\":2606:2626   */\n  sub\n    /* \"#utility.yul\":2602:2603   */\n  0x00\n    /* \"#utility.yul\":2591:2600   */\n  dup4\n    /* \"#utility.yul\":2587:2604   */\n  add\n    /* \"#utility.yul\":2580:2627   */\n  mstore\n    /* \"#utility.yul\":2644:2775   */\n  tag_52\n    /* \"#utility.yul\":2770:2774   */\n  dup2\n    /* \"#utility.yul\":2644:2775   */\n  tag_39\n  jump\t// in\ntag_52:\n    /* \"#utility.yul\":2636:2775   */\n  swap1\n  pop\n    /* \"#utility.yul\":2534:2782   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2788:2957   */\ntag_42:\n  0x00\n    /* \"#utility.yul\":2906:2912   */\n  dup3\n    /* \"#utility.yul\":2901:2904   */\n  dup3\n    /* \"#utility.yul\":2894:2913   */\n  mstore\n    /* \"#utility.yul\":2946:2950   */\n  0x20\n    /* \"#utility.yul\":2941:2944   */\n  dup3\n    /* \"#utility.yul\":2937:2951   */\n  add\n    /* \"#utility.yul\":2922:2951   */\n  swap1\n  pop\n    /* \"#utility.yul\":2884:2957   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2963:3059   */\ntag_38:\n  0x00\n    /* \"#utility.yul\":3029:3053   */\n  tag_55\n    /* \"#utility.yul\":3047:3052   */\n  dup3\n    /* \"#utility.yul\":3029:3053   */\n  tag_56\n  jump\t// in\ntag_55:\n    /* \"#utility.yul\":3018:3053   */\n  swap1\n  pop\n    /* \"#utility.yul\":3008:3059   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3065:3191   */\ntag_56:\n  0x00\n    /* \"#utility.yul\":3142:3184   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":3135:3140   */\n  dup3\n    /* \"#utility.yul\":3131:3185   */\n  and\n    /* \"#utility.yul\":3120:3185   */\n  swap1\n  pop\n    /* \"#utility.yul\":3110:3191   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3197:3288   */\ntag_46:\n  0x00\n    /* \"#utility.yul\":3273:3281   */\n  0xffffff\n    /* \"#utility.yul\":3266:3271   */\n  dup3\n    /* \"#utility.yul\":3262:3282   */\n  and\n    /* \"#utility.yul\":3251:3282   */\n  swap1\n  pop\n    /* \"#utility.yul\":3241:3288   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3294:3416   */\ntag_21:\n    /* \"#utility.yul\":3367:3391   */\n  tag_60\n    /* \"#utility.yul\":3385:3390   */\n  dup2\n    /* \"#utility.yul\":3367:3391   */\n  tag_38\n  jump\t// in\ntag_60:\n    /* \"#utility.yul\":3360:3365   */\n  dup2\n    /* \"#utility.yul\":3357:3392   */\n  eq\n    /* \"#utility.yul\":3347:3349   */\n  tag_61\n  jumpi\n    /* \"#utility.yul\":3406:3407   */\n  0x00\n    /* \"#utility.yul\":3403:3404   */\n  dup1\n    /* \"#utility.yul\":3396:3408   */\n  revert\n    /* \"#utility.yul\":3347:3349   */\ntag_61:\n    /* \"#utility.yul\":3337:3416   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3422:3542   */\ntag_25:\n    /* \"#utility.yul\":3494:3517   */\n  tag_63\n    /* \"#utility.yul\":3511:3516   */\n  dup2\n    /* \"#utility.yul\":3494:3517   */\n  tag_46\n  jump\t// in\ntag_63:\n    /* \"#utility.yul\":3487:3492   */\n  dup2\n    /* \"#utility.yul\":3484:3518   */\n  eq\n    /* \"#utility.yul\":3474:3476   */\n  tag_64\n  jumpi\n    /* \"#utility.yul\":3532:3533   */\n  0x00\n    /* \"#utility.yul\":3529:3530   */\n  dup1\n    /* \"#utility.yul\":3522:3534   */\n  revert\n    /* \"#utility.yul\":3474:3476   */\ntag_64:\n    /* \"#utility.yul\":3464:3542   */\n  pop\n  jump\t// out\n    /* \"contracts/UniswapV3Oracle.sol\":530:1479  contract UniswapV3Oracle {... */\ntag_16:\n  shr(0x60, mload(0x80))\n  shr(0x60, mload(0xa0))\n  shr(0x60, mload(0xc0))\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  assignImmutable(\"0x61cf277f49a864a3f102f174d094da4de630a0b5b8a1b673544f81eacd3333a6\")\n  assignImmutable(\"0x55102a3417bb17711dc0a7887b2d1956ef4cc0406d53a2bd493c2e852606b04c\")\n  assignImmutable(\"0x250be49989bc0ce4209c3b239a8715bf51814f9847b0d82daabeef5dab6c4913\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/UniswapV3Oracle.sol\":530:1479  contract UniswapV3Oracle {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x0dfe1681\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x16f0115b\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x8f2e8199\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xd21220a7\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/UniswapV3Oracle.sol\":561:592  address public immutable token0 */\n    tag_3:\n      tag_7\n      tag_8\n      jump\t// in\n    tag_7:\n      mload(0x40)\n      tag_9\n      swap2\n      swap1\n      tag_10\n      jump\t// in\n    tag_9:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/UniswapV3Oracle.sol\":635:664  address public immutable pool */\n    tag_4:\n      tag_11\n      tag_12\n      jump\t// in\n    tag_11:\n      mload(0x40)\n      tag_13\n      swap2\n      swap1\n      tag_10\n      jump\t// in\n    tag_13:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/UniswapV3Oracle.sol\":988:1477  function estimateAmountOut(... */\n    tag_5:\n      tag_14\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n      tag_17\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      tag_18\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/UniswapV3Oracle.sol\":598:629  address public immutable token1 */\n    tag_6:\n      tag_20\n      tag_21\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      tag_22\n      swap2\n      swap1\n      tag_10\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/UniswapV3Oracle.sol\":561:592  address public immutable token0 */\n    tag_8:\n      immutable(\"0x250be49989bc0ce4209c3b239a8715bf51814f9847b0d82daabeef5dab6c4913\")\n      dup2\n      jump\t// out\n        /* \"contracts/UniswapV3Oracle.sol\":635:664  address public immutable pool */\n    tag_12:\n      immutable(\"0x61cf277f49a864a3f102f174d094da4de630a0b5b8a1b673544f81eacd3333a6\")\n      dup2\n      jump\t// out\n        /* \"contracts/UniswapV3Oracle.sol\":988:1477  function estimateAmountOut(... */\n    tag_17:\n        /* \"contracts/UniswapV3Oracle.sol\":1121:1135  uint amountOut */\n      0x00\n        /* \"contracts/UniswapV3Oracle.sol\":1164:1170  token0 */\n      immutable(\"0x250be49989bc0ce4209c3b239a8715bf51814f9847b0d82daabeef5dab6c4913\")\n        /* \"contracts/UniswapV3Oracle.sol\":1155:1170  tokenIn==token0 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/UniswapV3Oracle.sol\":1155:1162  tokenIn */\n      dup5\n        /* \"contracts/UniswapV3Oracle.sol\":1155:1170  tokenIn==token0 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/UniswapV3Oracle.sol\":1155:1189  tokenIn==token0 || tokenIn==token1 */\n      dup1\n      tag_24\n      jumpi\n      pop\n        /* \"contracts/UniswapV3Oracle.sol\":1183:1189  token1 */\n      immutable(\"0x55102a3417bb17711dc0a7887b2d1956ef4cc0406d53a2bd493c2e852606b04c\")\n        /* \"contracts/UniswapV3Oracle.sol\":1174:1189  tokenIn==token1 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/UniswapV3Oracle.sol\":1174:1181  tokenIn */\n      dup5\n        /* \"contracts/UniswapV3Oracle.sol\":1174:1189  tokenIn==token1 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/UniswapV3Oracle.sol\":1155:1189  tokenIn==token0 || tokenIn==token1 */\n    tag_24:\n        /* \"contracts/UniswapV3Oracle.sol\":1147:1206  require(tokenIn==token0 || tokenIn==token1,\"invalid token\") */\n      tag_25\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_25:\n        /* \"contracts/UniswapV3Oracle.sol\":1216:1232  address tokenout */\n      0x00\n        /* \"contracts/UniswapV3Oracle.sol\":1242:1248  token0 */\n      immutable(\"0x250be49989bc0ce4209c3b239a8715bf51814f9847b0d82daabeef5dab6c4913\")\n        /* \"contracts/UniswapV3Oracle.sol\":1233:1248  tokenIn==token0 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/UniswapV3Oracle.sol\":1233:1240  tokenIn */\n      dup6\n        /* \"contracts/UniswapV3Oracle.sol\":1233:1248  tokenIn==token0 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/UniswapV3Oracle.sol\":1233:1264  tokenIn==token0 ? token1:token0 */\n      tag_28\n      jumpi\n        /* \"contracts/UniswapV3Oracle.sol\":1258:1264  token0 */\n      immutable(\"0x250be49989bc0ce4209c3b239a8715bf51814f9847b0d82daabeef5dab6c4913\")\n        /* \"contracts/UniswapV3Oracle.sol\":1233:1264  tokenIn==token0 ? token1:token0 */\n      jump(tag_29)\n    tag_28:\n        /* \"contracts/UniswapV3Oracle.sol\":1251:1257  token1 */\n      immutable(\"0x55102a3417bb17711dc0a7887b2d1956ef4cc0406d53a2bd493c2e852606b04c\")\n        /* \"contracts/UniswapV3Oracle.sol\":1233:1264  tokenIn==token0 ? token1:token0 */\n    tag_29:\n        /* \"contracts/UniswapV3Oracle.sol\":1216:1264  address tokenout=tokenIn==token0 ? token1:token0 */\n      swap1\n      pop\n        /* \"contracts/UniswapV3Oracle.sol\":1276:1286  int24 tick */\n      0x00\n        /* \"contracts/UniswapV3Oracle.sol\":1289:1327  OracleLibrary.consult(pool,secondsAgo) */\n      tag_30\n        /* \"contracts/UniswapV3Oracle.sol\":1311:1315  pool */\n      immutable(\"0x61cf277f49a864a3f102f174d094da4de630a0b5b8a1b673544f81eacd3333a6\")\n        /* \"contracts/UniswapV3Oracle.sol\":1316:1326  secondsAgo */\n      dup6\n        /* \"contracts/UniswapV3Oracle.sol\":1289:1310  OracleLibrary.consult */\n      tag_31\n        /* \"contracts/UniswapV3Oracle.sol\":1289:1327  OracleLibrary.consult(pool,secondsAgo) */\n      jump\t// in\n    tag_30:\n        /* \"contracts/UniswapV3Oracle.sol\":1275:1327  (int24 tick,)=OracleLibrary.consult(pool,secondsAgo) */\n      pop\n      swap1\n      pop\n        /* \"contracts/UniswapV3Oracle.sol\":1349:1470  OracleLibrary.getQuoteAtTick(... */\n      tag_32\n        /* \"contracts/UniswapV3Oracle.sol\":1391:1395  tick */\n      dup2\n        /* \"contracts/UniswapV3Oracle.sol\":1409:1417  amountIn */\n      dup7\n        /* \"contracts/UniswapV3Oracle.sol\":1431:1438  tokenIn */\n      dup9\n        /* \"contracts/UniswapV3Oracle.sol\":1452:1460  tokenout */\n      dup6\n        /* \"contracts/UniswapV3Oracle.sol\":1349:1377  OracleLibrary.getQuoteAtTick */\n      tag_33\n        /* \"contracts/UniswapV3Oracle.sol\":1349:1470  OracleLibrary.getQuoteAtTick(... */\n      jump\t// in\n    tag_32:\n        /* \"contracts/UniswapV3Oracle.sol\":1337:1470  amountOut = OracleLibrary.getQuoteAtTick(... */\n      swap3\n      pop\n        /* \"contracts/UniswapV3Oracle.sol\":988:1477  function estimateAmountOut(... */\n      pop\n      pop\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/UniswapV3Oracle.sol\":598:629  address public immutable token1 */\n    tag_21:\n      immutable(\"0x55102a3417bb17711dc0a7887b2d1956ef4cc0406d53a2bd493c2e852606b04c\")\n      dup2\n      jump\t// out\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":885:2112  function consult(address pool, uint32 secondsAgo)... */\n    tag_31:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":982:1006  int24 arithmeticMeanTick */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1008:1037  uint128 harmonicMeanLiquidity */\n      dup1\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1075:1076  0 */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1061:1071  secondsAgo */\n      dup4\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1061:1076  secondsAgo != 0 */\n      0xffffffff\n      and\n      eq\n      iszero\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1053:1083  require(secondsAgo != 0, 'BP') */\n      tag_35\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x02\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4250000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_35:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1094:1121  uint32[] memory secondsAgos */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1137:1138  2 */\n      0x02\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1124:1139  new uint32[](2) */\n      0xffffffffffffffff\n      dup2\n      gt\n      dup1\n      iszero\n      tag_36\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      pop\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_37\n      jumpi\n      dup2\n      0x20\n      add\n      0x20\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_37:\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1094:1139  uint32[] memory secondsAgos = new uint32[](2) */\n      swap1\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1166:1176  secondsAgo */\n      dup4\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1149:1160  secondsAgos */\n      dup2\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1161:1162  0 */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1149:1163  secondsAgos[0] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_38\n      jumpi\n      invalid\n    tag_38:\n      0x20\n      mul\n      0x20\n      add\n      add\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1149:1176  secondsAgos[0] = secondsAgo */\n      swap1\n      0xffffffff\n      and\n      swap1\n      dup2\n      0xffffffff\n      and\n      dup2\n      mstore\n      pop\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1203:1204  0 */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1186:1197  secondsAgos */\n      dup2\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1198:1199  1 */\n      0x01\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1186:1200  secondsAgos[1] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_39\n      jumpi\n      invalid\n    tag_39:\n      0x20\n      mul\n      0x20\n      add\n      add\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1186:1204  secondsAgos[1] = 0 */\n      swap1\n      0xffffffff\n      and\n      swap1\n      dup2\n      0xffffffff\n      and\n      dup2\n      mstore\n      pop\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1216:1246  int56[] memory tickCumulatives */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1248:1299  uint160[] memory secondsPerLiquidityCumulativeX128s */\n      dup1\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1330:1334  pool */\n      dup7\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1315:1343  IUniswapV3Pool(pool).observe */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x883bdbfd\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1344:1355  secondsAgos */\n      dup5\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1315:1356  IUniswapV3Pool(pool).observe(secondsAgos) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      0x20\n      mul\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_40:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_42\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_40)\n    tag_42:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap3\n      pop\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_43\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_43:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_45\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_45:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      0x40\n      dup2\n      lt\n      iszero\n      tag_46\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_46:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      mload(0x40)\n      swap4\n      swap3\n      swap2\n      swap1\n      dup5\n      0x0100000000\n      dup3\n      gt\n      iszero\n      tag_47\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_47:\n      dup4\n      dup3\n      add\n      swap2\n      pop\n      0x20\n      dup3\n      add\n      dup6\n      dup2\n      gt\n      iszero\n      tag_48\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_48:\n      dup3\n      mload\n      dup7\n      0x20\n      dup3\n      mul\n      dup4\n      add\n      gt\n      0x0100000000\n      dup3\n      gt\n      or\n      iszero\n      tag_49\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_49:\n      dup1\n      dup4\n      mstore\n      0x20\n      dup4\n      add\n      swap3\n      pop\n      pop\n      pop\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      0x20\n      mul\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_50:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_52\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_50)\n    tag_52:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      0x40\n      mstore\n      0x20\n      add\n      dup1\n      mload\n      mload(0x40)\n      swap4\n      swap3\n      swap2\n      swap1\n      dup5\n      0x0100000000\n      dup3\n      gt\n      iszero\n      tag_53\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      dup4\n      dup3\n      add\n      swap2\n      pop\n      0x20\n      dup3\n      add\n      dup6\n      dup2\n      gt\n      iszero\n      tag_54\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_54:\n      dup3\n      mload\n      dup7\n      0x20\n      dup3\n      mul\n      dup4\n      add\n      gt\n      0x0100000000\n      dup3\n      gt\n      or\n      iszero\n      tag_55\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_55:\n      dup1\n      dup4\n      mstore\n      0x20\n      dup4\n      add\n      swap3\n      pop\n      pop\n      pop\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      0x20\n      mul\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_56:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_58\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_56)\n    tag_58:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      0x40\n      mstore\n      pop\n      pop\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1215:1356  (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) =... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1367:1393  int56 tickCumulativesDelta */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1417:1432  tickCumulatives */\n      dup3\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1433:1434  0 */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1417:1435  tickCumulatives[0] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_59\n      jumpi\n      invalid\n    tag_59:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1396:1411  tickCumulatives */\n      dup4\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1412:1413  1 */\n      0x01\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1396:1414  tickCumulatives[1] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_60\n      jumpi\n      invalid\n    tag_60:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1396:1435  tickCumulatives[1] - tickCumulatives[0] */\n      sub\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1367:1435  int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0] */\n      swap1\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1445:1488  uint160 secondsPerLiquidityCumulativesDelta */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1543:1577  secondsPerLiquidityCumulativeX128s */\n      dup3\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1578:1579  0 */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1543:1580  secondsPerLiquidityCumulativeX128s[0] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_61\n      jumpi\n      invalid\n    tag_61:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1503:1537  secondsPerLiquidityCumulativeX128s */\n      dup4\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1538:1539  1 */\n      0x01\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1503:1540  secondsPerLiquidityCumulativeX128s[1] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_62\n      jumpi\n      invalid\n    tag_62:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1503:1580  secondsPerLiquidityCumulativeX128s[1] - secondsPerLiquidityCumulativeX128s[0] */\n      sub\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1445:1580  uint160 secondsPerLiquidityCumulativesDelta =... */\n      swap1\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1641:1651  secondsAgo */\n      dup8\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1618:1651  tickCumulativesDelta / secondsAgo */\n      0xffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1618:1638  tickCumulativesDelta */\n      dup3\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1618:1651  tickCumulativesDelta / secondsAgo */\n      0x06\n      signextend\n      dup2\n      tag_63\n      jumpi\n      invalid\n    tag_63:\n      sdiv\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1591:1652  arithmeticMeanTick = int24(tickCumulativesDelta / secondsAgo) */\n      swap7\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1734:1735  0 */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1711:1731  tickCumulativesDelta */\n      dup3\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1711:1735  tickCumulativesDelta < 0 */\n      0x06\n      signextend\n      slt\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1711:1779  tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0) */\n      dup1\n      iszero\n      tag_64\n      jumpi\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1777:1778  0 */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1763:1773  secondsAgo */\n      dup9\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1740:1773  tickCumulativesDelta % secondsAgo */\n      0xffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1740:1760  tickCumulativesDelta */\n      dup4\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1740:1773  tickCumulativesDelta % secondsAgo */\n      0x06\n      signextend\n      dup2\n      tag_65\n      jumpi\n      invalid\n    tag_65:\n      smod\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1740:1778  tickCumulativesDelta % secondsAgo != 0 */\n      0x06\n      signextend\n      eq\n      iszero\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1711:1779  tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0) */\n    tag_64:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1707:1801  if (tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0)) arithmeticMeanTick-- */\n      iszero\n      tag_66\n      jumpi\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1781:1801  arithmeticMeanTick-- */\n      dup7\n      dup1\n      0x01\n      swap1\n      sub\n      swap8\n      pop\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1707:1801  if (tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0)) arithmeticMeanTick-- */\n    tag_66:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1929:1951  uint192 secondsAgoX160 */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1976:1993  type(uint160).max */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1954:1993  uint192(secondsAgo) * type(uint160).max */\n      dup1\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1962:1972  secondsAgo */\n      dup10\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1954:1973  uint192(secondsAgo) */\n      0xffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1954:1993  uint192(secondsAgo) * type(uint160).max */\n      mul\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":1929:1993  uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max */\n      swap1\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2101:2103  32 */\n      0x20\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2061:2096  secondsPerLiquidityCumulativesDelta */\n      dup3\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2053:2097  uint192(secondsPerLiquidityCumulativesDelta) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2053:2103  uint192(secondsPerLiquidityCumulativesDelta) << 32 */\n      0xffffffffffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      shl\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2035:2104  secondsAgoX160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32) */\n      0xffffffffffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2035:2049  secondsAgoX160 */\n      dup2\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2035:2104  secondsAgoX160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32) */\n      0xffffffffffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      tag_67\n      jumpi\n      invalid\n    tag_67:\n      div\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2003:2105  harmonicMeanLiquidity = uint128(secondsAgoX160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32)) */\n      swap7\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":885:2112  function consult(address pool, uint32 secondsAgo)... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2616:3571  function getQuoteAtTick(... */\n    tag_33:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2772:2791  uint256 quoteAmount */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2803:2823  uint160 sqrtRatioX96 */\n      dup1\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2826:2859  TickMath.getSqrtRatioAtTick(tick) */\n      tag_69\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2854:2858  tick */\n      dup7\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2826:2853  TickMath.getSqrtRatioAtTick */\n      tag_70\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2826:2859  TickMath.getSqrtRatioAtTick(tick) */\n      jump\t// in\n    tag_69:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2803:2859  uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick) */\n      swap1\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2994:3011  type(uint128).max */\n      0xffffffffffffffffffffffffffffffff\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2978:3011  sqrtRatioX96 <= type(uint128).max */\n      dup1\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2978:2990  sqrtRatioX96 */\n      dup2\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2978:3011  sqrtRatioX96 <= type(uint128).max */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      gt\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2974:3565  if (sqrtRatioX96 <= type(uint128).max) {... */\n      tag_71\n      jumpi\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3027:3044  uint256 ratioX192 */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3071:3083  sqrtRatioX96 */\n      dup2\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3047:3083  uint256(sqrtRatioX96) * sqrtRatioX96 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3055:3067  sqrtRatioX96 */\n      dup3\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3047:3068  uint256(sqrtRatioX96) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3047:3083  uint256(sqrtRatioX96) * sqrtRatioX96 */\n      mul\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3027:3083  uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96 */\n      swap1\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3123:3133  quoteToken */\n      dup4\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3111:3133  baseToken < quoteToken */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3111:3120  baseToken */\n      dup6\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3111:3133  baseToken < quoteToken */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3111:3267  baseToken < quoteToken... */\n      tag_72\n      jumpi\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3219:3267  FullMath.mulDiv(1 << 192, baseAmount, ratioX192) */\n      tag_73\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3235:3243  1 << 192 */\n      0x01000000000000000000000000000000000000000000000000\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3245:3255  baseAmount */\n      dup8\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3219:3267  FullMath.mulDiv(1 << 192, baseAmount, ratioX192) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3257:3266  ratioX192 */\n      dup4\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3219:3234  FullMath.mulDiv */\n      tag_74\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3219:3267  FullMath.mulDiv(1 << 192, baseAmount, ratioX192) */\n      jump\t// in\n    tag_73:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3111:3267  baseToken < quoteToken... */\n      jump(tag_75)\n    tag_72:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3152:3200  FullMath.mulDiv(ratioX192, baseAmount, 1 << 192) */\n      tag_76\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3168:3177  ratioX192 */\n      dup2\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3179:3189  baseAmount */\n      dup8\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3152:3200  FullMath.mulDiv(ratioX192, baseAmount, 1 << 192) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3191:3199  1 << 192 */\n      0x01000000000000000000000000000000000000000000000000\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3152:3167  FullMath.mulDiv */\n      tag_74\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3152:3200  FullMath.mulDiv(ratioX192, baseAmount, 1 << 192) */\n      jump\t// in\n    tag_76:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3111:3267  baseToken < quoteToken... */\n    tag_75:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3097:3267  quoteAmount = baseToken < quoteToken... */\n      swap3\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2974:3565  if (sqrtRatioX96 <= type(uint128).max) {... */\n      pop\n      jump(tag_77)\n    tag_71:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3298:3315  uint256 ratioX128 */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3318:3370  FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      tag_78\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3334:3346  sqrtRatioX96 */\n      dup3\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3318:3370  FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3348:3360  sqrtRatioX96 */\n      dup4\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3318:3370  FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3362:3369  1 << 64 */\n      0x010000000000000000\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3318:3333  FullMath.mulDiv */\n      tag_74\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3318:3370  FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      jump\t// in\n    tag_78:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3298:3370  uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64) */\n      swap1\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3410:3420  quoteToken */\n      dup4\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3398:3420  baseToken < quoteToken */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3398:3407  baseToken */\n      dup6\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3398:3420  baseToken < quoteToken */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3398:3554  baseToken < quoteToken... */\n      tag_79\n      jumpi\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3506:3554  FullMath.mulDiv(1 << 128, baseAmount, ratioX128) */\n      tag_80\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3522:3530  1 << 128 */\n      0x0100000000000000000000000000000000\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3532:3542  baseAmount */\n      dup8\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3506:3554  FullMath.mulDiv(1 << 128, baseAmount, ratioX128) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3544:3553  ratioX128 */\n      dup4\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3506:3521  FullMath.mulDiv */\n      tag_74\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3506:3554  FullMath.mulDiv(1 << 128, baseAmount, ratioX128) */\n      jump\t// in\n    tag_80:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3398:3554  baseToken < quoteToken... */\n      jump(tag_81)\n    tag_79:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3439:3487  FullMath.mulDiv(ratioX128, baseAmount, 1 << 128) */\n      tag_82\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3455:3464  ratioX128 */\n      dup2\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3466:3476  baseAmount */\n      dup8\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3439:3487  FullMath.mulDiv(ratioX128, baseAmount, 1 << 128) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3478:3486  1 << 128 */\n      0x0100000000000000000000000000000000\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3439:3454  FullMath.mulDiv */\n      tag_74\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3439:3487  FullMath.mulDiv(ratioX128, baseAmount, 1 << 128) */\n      jump\t// in\n    tag_82:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3398:3554  baseToken < quoteToken... */\n    tag_81:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":3384:3554  quoteAmount = baseToken < quoteToken... */\n      swap3\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2974:3565  if (sqrtRatioX96 <= type(uint128).max) {... */\n      pop\n    tag_77:\n        /* \"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":2616:3571  function getQuoteAtTick(... */\n      pop\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1362:3942  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {... */\n    tag_70:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1425:1445  uint160 sqrtPriceX96 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1457:1472  uint256 absTick */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1482:1483  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1475:1479  tick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1475:1483  tick < 0 */\n      0x02\n      signextend\n      slt\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1475:1532  tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n      tag_84\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1526:1530  tick */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1519:1531  int256(tick) */\n      0x02\n      signextend\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1475:1532  tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n      jump(tag_85)\n    tag_84:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1502:1506  tick */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1495:1507  int256(tick) */\n      0x02\n      signextend\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1494:1507  -int256(tick) */\n      0x00\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1475:1532  tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n    tag_85:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1457:1532  uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":484:491  -887272 */\n      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":644:653  -MIN_TICK */\n      0x00\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1561:1578  uint256(MAX_TICK) */\n      0x02\n      signextend\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1550:1557  absTick */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1550:1578  absTick <= uint256(MAX_TICK) */\n      gt\n      iszero\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1542:1584  require(absTick <= uint256(MAX_TICK), 'T') */\n      tag_86\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x01\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5400000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_86:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1595:1608  uint256 ratio */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1628:1629  0 */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1621:1624  0x1 */\n      0x01\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1611:1618  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1611:1624  absTick & 0x1 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1611:1629  absTick & 0x1 != 0 */\n      eq\n      iszero\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1611:1704  absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n      tag_87\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1669:1704  0x100000000000000000000000000000000 */\n      0x0100000000000000000000000000000000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1611:1704  absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n      jump(tag_88)\n    tag_87:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1632:1666  0xfffcb933bd6fad37aa2d162d1a594001 */\n      0xfffcb933bd6fad37aa2d162d1a594001\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1611:1704  absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n    tag_88:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1595:1704  uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n      0xffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1735:1736  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1728:1731  0x2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1718:1725  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1718:1731  absTick & 0x2 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1718:1736  absTick & 0x2 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1714:1797  if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n      tag_89\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1794:1797  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1755:1789  0xfff97272373d413259a46990580e213a */\n      0xfff97272373d413259a46990580e213a\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1747:1752  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1747:1789  ratio * 0xfff97272373d413259a46990580e213a */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1746:1797  (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1738:1797  ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1714:1797  if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n    tag_89:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1828:1829  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1821:1824  0x4 */\n      0x04\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1811:1818  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1811:1824  absTick & 0x4 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1811:1829  absTick & 0x4 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1807:1890  if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n      tag_90\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1887:1890  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1848:1882  0xfff2e50f5f656932ef12357cf3c7fdcc */\n      0xfff2e50f5f656932ef12357cf3c7fdcc\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1840:1845  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1840:1882  ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1839:1890  (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1831:1890  ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1807:1890  if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n    tag_90:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1921:1922  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1914:1917  0x8 */\n      0x08\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1904:1911  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1904:1917  absTick & 0x8 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1904:1922  absTick & 0x8 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1900:1983  if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n      tag_91\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1980:1983  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1941:1975  0xffe5caca7e10e4e61c3624eaa0941cd0 */\n      0xffe5caca7e10e4e61c3624eaa0941cd0\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1933:1938  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1933:1975  ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1932:1983  (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1924:1983  ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1900:1983  if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n    tag_91:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2015:2016  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2007:2011  0x10 */\n      0x10\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1997:2004  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1997:2011  absTick & 0x10 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1997:2016  absTick & 0x10 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1993:2077  if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n      tag_92\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2074:2077  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2035:2069  0xffcb9843d60f6159c9db58835c926644 */\n      0xffcb9843d60f6159c9db58835c926644\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2027:2032  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2027:2069  ratio * 0xffcb9843d60f6159c9db58835c926644 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2026:2077  (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2018:2077  ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1993:2077  if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n    tag_92:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2109:2110  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2101:2105  0x20 */\n      0x20\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2091:2098  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2091:2105  absTick & 0x20 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2091:2110  absTick & 0x20 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2087:2171  if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n      tag_93\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2168:2171  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2129:2163  0xff973b41fa98c081472e6896dfb254c0 */\n      0xff973b41fa98c081472e6896dfb254c0\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2121:2126  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2121:2163  ratio * 0xff973b41fa98c081472e6896dfb254c0 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2120:2171  (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2112:2171  ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2087:2171  if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n    tag_93:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2203:2204  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2195:2199  0x40 */\n      0x40\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2185:2192  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2185:2199  absTick & 0x40 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2185:2204  absTick & 0x40 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2181:2265  if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n      tag_94\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2262:2265  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2223:2257  0xff2ea16466c96a3843ec78b326b52861 */\n      0xff2ea16466c96a3843ec78b326b52861\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2215:2220  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2215:2257  ratio * 0xff2ea16466c96a3843ec78b326b52861 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2214:2265  (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2206:2265  ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2181:2265  if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n    tag_94:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2297:2298  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2289:2293  0x80 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2279:2286  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2279:2293  absTick & 0x80 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2279:2298  absTick & 0x80 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2275:2359  if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n      tag_95\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2356:2359  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2317:2351  0xfe5dee046a99a2a811c461f1969c3053 */\n      0xfe5dee046a99a2a811c461f1969c3053\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2309:2314  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2309:2351  ratio * 0xfe5dee046a99a2a811c461f1969c3053 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2308:2359  (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2300:2359  ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2275:2359  if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n    tag_95:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2392:2393  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2383:2388  0x100 */\n      0x0100\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2373:2380  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2373:2388  absTick & 0x100 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2373:2393  absTick & 0x100 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2369:2454  if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n      tag_96\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2451:2454  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2412:2446  0xfcbe86c7900a88aedcffc83b479aa3a4 */\n      0xfcbe86c7900a88aedcffc83b479aa3a4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2404:2409  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2404:2446  ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2403:2454  (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2395:2454  ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2369:2454  if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n    tag_96:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2487:2488  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2478:2483  0x200 */\n      0x0200\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2468:2475  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2468:2483  absTick & 0x200 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2468:2488  absTick & 0x200 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2464:2549  if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n      tag_97\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2546:2549  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2507:2541  0xf987a7253ac413176f2b074cf7815e54 */\n      0xf987a7253ac413176f2b074cf7815e54\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2499:2504  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2499:2541  ratio * 0xf987a7253ac413176f2b074cf7815e54 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2498:2549  (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2490:2549  ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2464:2549  if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n    tag_97:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2582:2583  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2573:2578  0x400 */\n      0x0400\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2563:2570  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2563:2578  absTick & 0x400 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2563:2583  absTick & 0x400 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2559:2644  if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n      tag_98\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2641:2644  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2602:2636  0xf3392b0822b70005940c7a398e4b70f3 */\n      0xf3392b0822b70005940c7a398e4b70f3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2594:2599  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2594:2636  ratio * 0xf3392b0822b70005940c7a398e4b70f3 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2593:2644  (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2585:2644  ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2559:2644  if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n    tag_98:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2677:2678  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2668:2673  0x800 */\n      0x0800\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2658:2665  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2658:2673  absTick & 0x800 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2658:2678  absTick & 0x800 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2654:2739  if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n      tag_99\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2736:2739  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2697:2731  0xe7159475a2c29b7443b29c7fa6e889d9 */\n      0xe7159475a2c29b7443b29c7fa6e889d9\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2689:2694  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2689:2731  ratio * 0xe7159475a2c29b7443b29c7fa6e889d9 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2688:2739  (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2680:2739  ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2654:2739  if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n    tag_99:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2773:2774  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2763:2769  0x1000 */\n      0x1000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2753:2760  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2753:2769  absTick & 0x1000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2753:2774  absTick & 0x1000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2749:2835  if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n      tag_100\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2832:2835  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2793:2827  0xd097f3bdfd2022b8845ad8f792aa5825 */\n      0xd097f3bdfd2022b8845ad8f792aa5825\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2785:2790  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2785:2827  ratio * 0xd097f3bdfd2022b8845ad8f792aa5825 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2784:2835  (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2776:2835  ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2749:2835  if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n    tag_100:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2869:2870  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2859:2865  0x2000 */\n      0x2000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2849:2856  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2849:2865  absTick & 0x2000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2849:2870  absTick & 0x2000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2845:2931  if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n      tag_101\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2928:2931  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2889:2923  0xa9f746462d870fdf8a65dc1f90e061e5 */\n      0xa9f746462d870fdf8a65dc1f90e061e5\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2881:2886  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2881:2923  ratio * 0xa9f746462d870fdf8a65dc1f90e061e5 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2880:2931  (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2872:2931  ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2845:2931  if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n    tag_101:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2965:2966  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2955:2961  0x4000 */\n      0x4000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2945:2952  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2945:2961  absTick & 0x4000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2945:2966  absTick & 0x4000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2941:3027  if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n      tag_102\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3024:3027  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2985:3019  0x70d869a156d2a1b890bb3df62baf32f7 */\n      0x70d869a156d2a1b890bb3df62baf32f7\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2977:2982  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2977:3019  ratio * 0x70d869a156d2a1b890bb3df62baf32f7 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2976:3027  (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2968:3027  ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":2941:3027  if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n    tag_102:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3061:3062  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3051:3057  0x8000 */\n      0x8000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3041:3048  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3041:3057  absTick & 0x8000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3041:3062  absTick & 0x8000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3037:3123  if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n      tag_103\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3120:3123  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3081:3115  0x31be135f97d08fd981231505542fcfa6 */\n      0x31be135f97d08fd981231505542fcfa6\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3073:3078  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3073:3115  ratio * 0x31be135f97d08fd981231505542fcfa6 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3072:3123  (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3064:3123  ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3037:3123  if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n    tag_103:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3158:3159  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3147:3154  0x10000 */\n      0x010000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3137:3144  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3137:3154  absTick & 0x10000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3137:3159  absTick & 0x10000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3133:3219  if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n      tag_104\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3216:3219  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3178:3211  0x9aa508b5b7a84e1c677de54f3e99bc9 */\n      0x09aa508b5b7a84e1c677de54f3e99bc9\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3170:3175  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3170:3211  ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3169:3219  (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3161:3219  ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3133:3219  if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n    tag_104:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3254:3255  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3243:3250  0x20000 */\n      0x020000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3233:3240  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3233:3250  absTick & 0x20000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3233:3255  absTick & 0x20000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3229:3314  if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n      tag_105\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3311:3314  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3274:3306  0x5d6af8dedb81196699c329225ee604 */\n      0x5d6af8dedb81196699c329225ee604\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3266:3271  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3266:3306  ratio * 0x5d6af8dedb81196699c329225ee604 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3265:3314  (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3257:3314  ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3229:3314  if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n    tag_105:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3349:3350  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3338:3345  0x40000 */\n      0x040000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3328:3335  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3328:3345  absTick & 0x40000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3328:3350  absTick & 0x40000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3324:3407  if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n      tag_106\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3404:3407  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3369:3399  0x2216e584f5fa1ea926041bedfe98 */\n      0x2216e584f5fa1ea926041bedfe98\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3361:3366  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3361:3399  ratio * 0x2216e584f5fa1ea926041bedfe98 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3360:3407  (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3352:3407  ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3324:3407  if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n    tag_106:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3442:3443  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3431:3438  0x80000 */\n      0x080000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3421:3428  absTick */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3421:3438  absTick & 0x80000 */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3421:3443  absTick & 0x80000 != 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3417:3495  if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n      tag_107\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3492:3495  128 */\n      0x80\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3462:3487  0x48a170391f7dc42444e8fa2 */\n      0x048a170391f7dc42444e8fa2\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3454:3459  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3454:3487  ratio * 0x48a170391f7dc42444e8fa2 */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3453:3495  (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3445:3495  ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3417:3495  if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n    tag_107:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3517:3518  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3510:3514  tick */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3510:3518  tick > 0 */\n      0x02\n      signextend\n      sgt\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3506:3553  if (tick > 0) ratio = type(uint256).max / ratio */\n      iszero\n      tag_108\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3548:3553  ratio */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3528:3545  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3528:3553  type(uint256).max / ratio */\n      dup2\n      tag_109\n      jumpi\n      invalid\n    tag_109:\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3520:3553  ratio = type(uint256).max / ratio */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3506:3553  if (tick > 0) ratio = type(uint256).max / ratio */\n    tag_108:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3924:3925  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3912:3919  1 << 32 */\n      0x0100000000\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3903:3908  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3903:3920  ratio % (1 << 32) */\n      dup2\n      tag_110\n      jumpi\n      invalid\n    tag_110:\n      mod\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3903:3925  ratio % (1 << 32) == 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3903:3933  ratio % (1 << 32) == 0 ? 0 : 1 */\n      tag_111\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3932:3933  1 */\n      0x01\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3903:3933  ratio % (1 << 32) == 0 ? 0 : 1 */\n      jump(tag_112)\n    tag_111:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3928:3929  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3903:3933  ratio % (1 << 32) == 0 ? 0 : 1 */\n    tag_112:\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3886:3934  (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1) */\n      0xff\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3896:3898  32 */\n      0x20\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3887:3892  ratio */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3887:3898  ratio >> 32 */\n      swap1\n      shr\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3886:3934  (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1) */\n      add\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":3863:3935  sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)) */\n      swap3\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":1362:3942  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {... */\n      pop\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":749:4525  function mulDiv(... */\n    tag_74:\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":861:875  uint256 result */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1190:1203  uint256 prod0 */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1258:1271  uint256 prod1 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1375:1376  0 */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1371:1377  not(0) */\n      not\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1368:1369  b */\n      dup6\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1365:1366  a */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1358:1378  mulmod(a, b, not(0)) */\n      mulmod\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1407:1408  b */\n      dup6\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1404:1405  a */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1400:1409  mul(a, b) */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1391:1409  prod0 := mul(a, b) */\n      swap3\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1458:1463  prod0 */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1454:1456  mm */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1451:1464  lt(mm, prod0) */\n      lt\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1443:1448  prod0 */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1439:1441  mm */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1435:1449  sub(mm, prod0) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1431:1465  sub(sub(mm, prod0), lt(mm, prod0)) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1422:1465  prod1 := sub(sub(mm, prod0), lt(mm, prod0)) */\n      swap2\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1334:1475  {... */\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1556:1557  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1547:1552  prod1 */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1547:1557  prod1 == 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1543:1722  if (prod1 == 0) {... */\n      iszero\n      tag_114\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1595:1596  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1581:1592  denominator */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1581:1596  denominator > 0 */\n      gt\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1573:1597  require(denominator > 0) */\n      tag_115\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_115:\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1659:1670  denominator */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1652:1657  prod0 */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1648:1671  div(prod0, denominator) */\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1638:1671  result := div(prod0, denominator) */\n      swap3\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1698:1711  return result */\n      pop\n      pop\n      jump(tag_113)\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1543:1722  if (prod1 == 0) {... */\n    tag_114:\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1849:1854  prod1 */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1835:1846  denominator */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1835:1854  denominator > prod1 */\n      gt\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1827:1855  require(denominator > prod1) */\n      tag_116\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_116:\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2132:2149  uint256 remainder */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2208:2219  denominator */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2205:2206  b */\n      dup7\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2202:2203  a */\n      dup9\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2195:2220  mulmod(a, b, denominator) */\n      mulmod\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2182:2220  remainder := mulmod(a, b, denominator) */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2351:2356  prod0 */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2340:2349  remainder */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2337:2357  gt(remainder, prod0) */\n      gt\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2330:2335  prod1 */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2326:2358  sub(prod1, gt(remainder, prod0)) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2317:2358  prod1 := sub(prod1, gt(remainder, prod0)) */\n      swap2\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2391:2400  remainder */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2384:2389  prod0 */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2380:2401  sub(prod0, remainder) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2371:2401  prod0 := sub(prod0, remainder) */\n      swap3\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2560:2572  uint256 twos */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2590:2601  denominator */\n      dup6\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2576:2587  denominator */\n      dup7\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2575:2587  -denominator */\n      0x00\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2575:2601  -denominator & denominator */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2560:2601  uint256 twos = -denominator & denominator */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2712:2716  twos */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2699:2710  denominator */\n      dup7\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2695:2717  div(denominator, twos) */\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2680:2717  denominator := div(denominator, twos) */\n      swap6\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2834:2838  twos */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2827:2832  prod0 */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2823:2839  div(prod0, twos) */\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2814:2839  prod0 := div(prod0, twos) */\n      swap4\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3088:3089  1 */\n      0x01\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3081:3085  twos */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3074:3078  twos */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3071:3072  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3067:3079  sub(0, twos) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3063:3086  div(sub(0, twos), twos) */\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3059:3090  add(div(sub(0, twos), twos), 1) */\n      add\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3051:3090  twos := add(div(sub(0, twos), twos), 1) */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3126:3130  twos */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3118:3123  prod1 */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3118:3130  prod1 * twos */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3109:3130  prod0 |= prod1 * twos */\n      dup5\n      or\n      swap4\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3464:3475  uint256 inv */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3498:3499  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3483:3494  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3479:3480  3 */\n      0x03\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3479:3494  3 * denominator */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3478:3499  (3 * denominator) ^ 2 */\n      xor\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3464:3499  uint256 inv = (3 * denominator) ^ 2 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3739:3742  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3725:3736  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3725:3742  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3721:3722  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3721:3742  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3714:3742  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3797:3800  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3783:3794  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3783:3800  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3779:3780  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3779:3800  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3772:3800  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3856:3859  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3842:3853  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3842:3859  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3838:3839  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3838:3859  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3831:3859  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3915:3918  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3901:3912  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3901:3918  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3897:3898  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3897:3918  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3890:3918  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3974:3977  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3960:3971  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3960:3977  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3956:3957  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3956:3977  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3949:3977  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4034:4037  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4020:4031  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4020:4037  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4016:4017  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4016:4037  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4009:4037  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4492:4495  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4484:4489  prod0 */\n      dup6\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4484:4495  prod0 * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4475:4495  result = prod0 * inv */\n      swap6\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4505:4518  return result */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":749:4525  function mulDiv(... */\n    tag_113:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_118:\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_120\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_121\n      jump\t// in\n    tag_120:\n        /* \"#utility.yul\":59:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:291   */\n    tag_122:\n      0x00\n        /* \"#utility.yul\":236:242   */\n      dup2\n        /* \"#utility.yul\":223:243   */\n      calldataload\n        /* \"#utility.yul\":214:243   */\n      swap1\n      pop\n        /* \"#utility.yul\":252:285   */\n      tag_124\n        /* \"#utility.yul\":279:284   */\n      dup2\n        /* \"#utility.yul\":252:285   */\n      tag_125\n      jump\t// in\n    tag_124:\n        /* \"#utility.yul\":204:291   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":297:434   */\n    tag_126:\n      0x00\n        /* \"#utility.yul\":380:386   */\n      dup2\n        /* \"#utility.yul\":367:387   */\n      calldataload\n        /* \"#utility.yul\":358:387   */\n      swap1\n      pop\n        /* \"#utility.yul\":396:428   */\n      tag_128\n        /* \"#utility.yul\":422:427   */\n      dup2\n        /* \"#utility.yul\":396:428   */\n      tag_129\n      jump\t// in\n    tag_128:\n        /* \"#utility.yul\":348:434   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":440:990   */\n    tag_16:\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":581:583   */\n      0x60\n        /* \"#utility.yul\":569:578   */\n      dup5\n        /* \"#utility.yul\":560:567   */\n      dup7\n        /* \"#utility.yul\":556:579   */\n      sub\n        /* \"#utility.yul\":552:584   */\n      slt\n        /* \"#utility.yul\":549:551   */\n      iszero\n      tag_131\n      jumpi\n        /* \"#utility.yul\":597:598   */\n      0x00\n        /* \"#utility.yul\":594:595   */\n      dup1\n        /* \"#utility.yul\":587:599   */\n      revert\n        /* \"#utility.yul\":549:551   */\n    tag_131:\n        /* \"#utility.yul\":640:641   */\n      0x00\n        /* \"#utility.yul\":665:718   */\n      tag_132\n        /* \"#utility.yul\":710:717   */\n      dup7\n        /* \"#utility.yul\":701:707   */\n      dup3\n        /* \"#utility.yul\":690:699   */\n      dup8\n        /* \"#utility.yul\":686:708   */\n      add\n        /* \"#utility.yul\":665:718   */\n      tag_118\n      jump\t// in\n    tag_132:\n        /* \"#utility.yul\":655:718   */\n      swap4\n      pop\n        /* \"#utility.yul\":611:728   */\n      pop\n        /* \"#utility.yul\":767:769   */\n      0x20\n        /* \"#utility.yul\":793:846   */\n      tag_133\n        /* \"#utility.yul\":838:845   */\n      dup7\n        /* \"#utility.yul\":829:835   */\n      dup3\n        /* \"#utility.yul\":818:827   */\n      dup8\n        /* \"#utility.yul\":814:836   */\n      add\n        /* \"#utility.yul\":793:846   */\n      tag_122\n      jump\t// in\n    tag_133:\n        /* \"#utility.yul\":783:846   */\n      swap3\n      pop\n        /* \"#utility.yul\":738:856   */\n      pop\n        /* \"#utility.yul\":895:897   */\n      0x40\n        /* \"#utility.yul\":921:973   */\n      tag_134\n        /* \"#utility.yul\":965:972   */\n      dup7\n        /* \"#utility.yul\":956:962   */\n      dup3\n        /* \"#utility.yul\":945:954   */\n      dup8\n        /* \"#utility.yul\":941:963   */\n      add\n        /* \"#utility.yul\":921:973   */\n      tag_126\n      jump\t// in\n    tag_134:\n        /* \"#utility.yul\":911:973   */\n      swap2\n      pop\n        /* \"#utility.yul\":866:983   */\n      pop\n        /* \"#utility.yul\":539:990   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":996:1114   */\n    tag_135:\n        /* \"#utility.yul\":1083:1107   */\n      tag_137\n        /* \"#utility.yul\":1101:1106   */\n      dup2\n        /* \"#utility.yul\":1083:1107   */\n      tag_138\n      jump\t// in\n    tag_137:\n        /* \"#utility.yul\":1078:1081   */\n      dup3\n        /* \"#utility.yul\":1071:1108   */\n      mstore\n        /* \"#utility.yul\":1061:1114   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1120:1431   */\n    tag_139:\n      0x00\n        /* \"#utility.yul\":1283:1350   */\n      tag_141\n        /* \"#utility.yul\":1347:1349   */\n      0x0d\n        /* \"#utility.yul\":1342:1345   */\n      dup4\n        /* \"#utility.yul\":1283:1350   */\n      tag_142\n      jump\t// in\n    tag_141:\n        /* \"#utility.yul\":1276:1350   */\n      swap2\n      pop\n        /* \"#utility.yul\":1380:1395   */\n      0x696e76616c696420746f6b656e00000000000000000000000000000000000000\n        /* \"#utility.yul\":1376:1377   */\n      0x00\n        /* \"#utility.yul\":1371:1374   */\n      dup4\n        /* \"#utility.yul\":1367:1378   */\n      add\n        /* \"#utility.yul\":1360:1396   */\n      mstore\n        /* \"#utility.yul\":1422:1424   */\n      0x20\n        /* \"#utility.yul\":1417:1420   */\n      dup3\n        /* \"#utility.yul\":1413:1425   */\n      add\n        /* \"#utility.yul\":1406:1425   */\n      swap1\n      pop\n        /* \"#utility.yul\":1266:1431   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1437:1555   */\n    tag_143:\n        /* \"#utility.yul\":1524:1548   */\n      tag_145\n        /* \"#utility.yul\":1542:1547   */\n      dup2\n        /* \"#utility.yul\":1524:1548   */\n      tag_146\n      jump\t// in\n    tag_145:\n        /* \"#utility.yul\":1519:1522   */\n      dup3\n        /* \"#utility.yul\":1512:1549   */\n      mstore\n        /* \"#utility.yul\":1502:1555   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1561:1783   */\n    tag_10:\n      0x00\n        /* \"#utility.yul\":1692:1694   */\n      0x20\n        /* \"#utility.yul\":1681:1690   */\n      dup3\n        /* \"#utility.yul\":1677:1695   */\n      add\n        /* \"#utility.yul\":1669:1695   */\n      swap1\n      pop\n        /* \"#utility.yul\":1705:1776   */\n      tag_148\n        /* \"#utility.yul\":1773:1774   */\n      0x00\n        /* \"#utility.yul\":1762:1771   */\n      dup4\n        /* \"#utility.yul\":1758:1775   */\n      add\n        /* \"#utility.yul\":1749:1755   */\n      dup5\n        /* \"#utility.yul\":1705:1776   */\n      tag_135\n      jump\t// in\n    tag_148:\n        /* \"#utility.yul\":1659:1783   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1789:2208   */\n    tag_27:\n      0x00\n        /* \"#utility.yul\":1993:1995   */\n      0x20\n        /* \"#utility.yul\":1982:1991   */\n      dup3\n        /* \"#utility.yul\":1978:1996   */\n      add\n        /* \"#utility.yul\":1970:1996   */\n      swap1\n      pop\n        /* \"#utility.yul\":2042:2051   */\n      dup2\n        /* \"#utility.yul\":2036:2040   */\n      dup2\n        /* \"#utility.yul\":2032:2052   */\n      sub\n        /* \"#utility.yul\":2028:2029   */\n      0x00\n        /* \"#utility.yul\":2017:2026   */\n      dup4\n        /* \"#utility.yul\":2013:2030   */\n      add\n        /* \"#utility.yul\":2006:2053   */\n      mstore\n        /* \"#utility.yul\":2070:2201   */\n      tag_150\n        /* \"#utility.yul\":2196:2200   */\n      dup2\n        /* \"#utility.yul\":2070:2201   */\n      tag_139\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":2062:2201   */\n      swap1\n      pop\n        /* \"#utility.yul\":1960:2208   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2214:2436   */\n    tag_19:\n      0x00\n        /* \"#utility.yul\":2345:2347   */\n      0x20\n        /* \"#utility.yul\":2334:2343   */\n      dup3\n        /* \"#utility.yul\":2330:2348   */\n      add\n        /* \"#utility.yul\":2322:2348   */\n      swap1\n      pop\n        /* \"#utility.yul\":2358:2429   */\n      tag_152\n        /* \"#utility.yul\":2426:2427   */\n      0x00\n        /* \"#utility.yul\":2415:2424   */\n      dup4\n        /* \"#utility.yul\":2411:2428   */\n      add\n        /* \"#utility.yul\":2402:2408   */\n      dup5\n        /* \"#utility.yul\":2358:2429   */\n      tag_143\n      jump\t// in\n    tag_152:\n        /* \"#utility.yul\":2312:2436   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2442:2611   */\n    tag_142:\n      0x00\n        /* \"#utility.yul\":2560:2566   */\n      dup3\n        /* \"#utility.yul\":2555:2558   */\n      dup3\n        /* \"#utility.yul\":2548:2567   */\n      mstore\n        /* \"#utility.yul\":2600:2604   */\n      0x20\n        /* \"#utility.yul\":2595:2598   */\n      dup3\n        /* \"#utility.yul\":2591:2605   */\n      add\n        /* \"#utility.yul\":2576:2605   */\n      swap1\n      pop\n        /* \"#utility.yul\":2538:2611   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2617:2713   */\n    tag_138:\n      0x00\n        /* \"#utility.yul\":2683:2707   */\n      tag_155\n        /* \"#utility.yul\":2701:2706   */\n      dup3\n        /* \"#utility.yul\":2683:2707   */\n      tag_156\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":2672:2707   */\n      swap1\n      pop\n        /* \"#utility.yul\":2662:2713   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2719:2837   */\n    tag_157:\n      0x00\n        /* \"#utility.yul\":2796:2830   */\n      0xffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":2789:2794   */\n      dup3\n        /* \"#utility.yul\":2785:2831   */\n      and\n        /* \"#utility.yul\":2774:2831   */\n      swap1\n      pop\n        /* \"#utility.yul\":2764:2837   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2843:2969   */\n    tag_156:\n      0x00\n        /* \"#utility.yul\":2920:2962   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":2913:2918   */\n      dup3\n        /* \"#utility.yul\":2909:2963   */\n      and\n        /* \"#utility.yul\":2898:2963   */\n      swap1\n      pop\n        /* \"#utility.yul\":2888:2969   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2975:3052   */\n    tag_146:\n      0x00\n        /* \"#utility.yul\":3041:3046   */\n      dup2\n        /* \"#utility.yul\":3030:3046   */\n      swap1\n      pop\n        /* \"#utility.yul\":3020:3052   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3058:3151   */\n    tag_161:\n      0x00\n        /* \"#utility.yul\":3134:3144   */\n      0xffffffff\n        /* \"#utility.yul\":3127:3132   */\n      dup3\n        /* \"#utility.yul\":3123:3145   */\n      and\n        /* \"#utility.yul\":3112:3145   */\n      swap1\n      pop\n        /* \"#utility.yul\":3102:3151   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3157:3279   */\n    tag_121:\n        /* \"#utility.yul\":3230:3254   */\n      tag_164\n        /* \"#utility.yul\":3248:3253   */\n      dup2\n        /* \"#utility.yul\":3230:3254   */\n      tag_138\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":3223:3228   */\n      dup2\n        /* \"#utility.yul\":3220:3255   */\n      eq\n        /* \"#utility.yul\":3210:3212   */\n      tag_165\n      jumpi\n        /* \"#utility.yul\":3269:3270   */\n      0x00\n        /* \"#utility.yul\":3266:3267   */\n      dup1\n        /* \"#utility.yul\":3259:3271   */\n      revert\n        /* \"#utility.yul\":3210:3212   */\n    tag_165:\n        /* \"#utility.yul\":3200:3279   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3285:3407   */\n    tag_125:\n        /* \"#utility.yul\":3358:3382   */\n      tag_167\n        /* \"#utility.yul\":3376:3381   */\n      dup2\n        /* \"#utility.yul\":3358:3382   */\n      tag_157\n      jump\t// in\n    tag_167:\n        /* \"#utility.yul\":3351:3356   */\n      dup2\n        /* \"#utility.yul\":3348:3383   */\n      eq\n        /* \"#utility.yul\":3338:3340   */\n      tag_168\n      jumpi\n        /* \"#utility.yul\":3397:3398   */\n      0x00\n        /* \"#utility.yul\":3394:3395   */\n      dup1\n        /* \"#utility.yul\":3387:3399   */\n      revert\n        /* \"#utility.yul\":3338:3340   */\n    tag_168:\n        /* \"#utility.yul\":3328:3407   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3413:3533   */\n    tag_129:\n        /* \"#utility.yul\":3485:3508   */\n      tag_170\n        /* \"#utility.yul\":3502:3507   */\n      dup2\n        /* \"#utility.yul\":3485:3508   */\n      tag_161\n      jump\t// in\n    tag_170:\n        /* \"#utility.yul\":3478:3483   */\n      dup2\n        /* \"#utility.yul\":3475:3509   */\n      eq\n        /* \"#utility.yul\":3465:3467   */\n      tag_171\n      jumpi\n        /* \"#utility.yul\":3523:3524   */\n      0x00\n        /* \"#utility.yul\":3520:3521   */\n      dup1\n        /* \"#utility.yul\":3513:3525   */\n      revert\n        /* \"#utility.yul\":3465:3467   */\n    tag_171:\n        /* \"#utility.yul\":3455:3533   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220a9b1bf6f132ac2b87431ccd1f49839b1fcd2c7b8d57068d3570f626be403196f64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:3545:12",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "70:80:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "80:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "89:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "89:13:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "80:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "138:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "111:26:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "111:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "111:33:12"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "48:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "56:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "64:5:12",
														"type": ""
													}
												],
												"src": "7:143:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "218:79:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "228:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "243:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "237:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "237:13:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "228:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "285:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint24",
																	"nodeType": "YulIdentifier",
																	"src": "259:25:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "259:32:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "259:32:12"
														}
													]
												},
												"name": "abi_decode_t_uint24_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "196:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "204:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "212:5:12",
														"type": ""
													}
												],
												"src": "156:141:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "380:207:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "426:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "435:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "438:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "428:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "428:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "428:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "401:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "410:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "397:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "397:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "422:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "393:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "393:32:12"
															},
															"nodeType": "YulIf",
															"src": "390:2:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "452:128:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "467:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "481:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "471:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "496:74:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "542:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "553:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "538:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "538:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "562:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "506:31:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "506:64:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "496:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "350:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "361:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "373:6:12",
														"type": ""
													}
												],
												"src": "303:284:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "720:624:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "767:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "776:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "779:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "769:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "769:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "741:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "750:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "737:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "737:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "762:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "733:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "733:33:12"
															},
															"nodeType": "YulIf",
															"src": "730:2:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "793:128:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "808:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "822:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "812:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "837:74:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "883:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "894:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "879:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "879:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "903:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "847:31:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "847:64:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "837:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "931:129:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "946:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "960:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "950:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "976:74:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1022:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1033:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1018:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1018:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1042:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "986:31:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "986:64:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "976:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1070:129:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1085:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1099:2:12",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1089:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1115:74:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1161:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1172:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1157:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1157:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1181:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1125:31:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1125:64:12"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "1115:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1209:128:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1224:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1238:2:12",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1228:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1254:73:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1299:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1310:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1295:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1295:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1319:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint24_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1264:30:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1264:63:12"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "1254:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_addresst_uint24_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "666:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "677:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "689:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "697:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "705:6:12",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "713:6:12",
														"type": ""
													}
												],
												"src": "593:751:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1415:53:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1432:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1455:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1437:17:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1437:24:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1425:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1425:37:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1425:37:12"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1403:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1410:3:12",
														"type": ""
													}
												],
												"src": "1350:118:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1620:172:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1630:74:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1696:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1701:2:12",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1637:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1637:67:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "1630:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1725:3:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1730:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1721:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1721:11:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1734:22:12",
																		"type": "",
																		"value": "Pools does not exist"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1714:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1714:43:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1714:43:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1767:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1778:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1783:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1774:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1774:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1767:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_3af18816a8a568d0d762c6bf9b28b87a3089f28cd99bc9524d95c6fa1b66a712_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1608:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1616:3:12",
														"type": ""
													}
												],
												"src": "1474:318:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1861:52:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1878:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1900:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint24",
																			"nodeType": "YulIdentifier",
																			"src": "1883:16:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1883:23:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1871:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1871:36:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1871:36:12"
														}
													]
												},
												"name": "abi_encode_t_uint24_to_t_uint24_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1849:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1856:3:12",
														"type": ""
													}
												],
												"src": "1798:115:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2071:286:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2081:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2093:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2104:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2089:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2089:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2081:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2161:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2174:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2185:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2170:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2170:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2117:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2117:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2117:71:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2242:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2255:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2266:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2251:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2251:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2198:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2198:72:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2198:72:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "2322:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2335:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2346:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2331:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2331:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint24_to_t_uint24_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2280:41:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2280:70:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2280:70:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2027:9:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2039:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2047:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2055:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2066:4:12",
														"type": ""
													}
												],
												"src": "1919:438:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2534:248:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2544:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2556:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2567:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2552:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2552:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2544:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2591:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2602:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2587:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2587:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "2610:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2616:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2606:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2606:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2580:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2580:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2580:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2636:139:12",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "2770:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_3af18816a8a568d0d762c6bf9b28b87a3089f28cd99bc9524d95c6fa1b66a712_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2644:124:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2644:131:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2636:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3af18816a8a568d0d762c6bf9b28b87a3089f28cd99bc9524d95c6fa1b66a712__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2514:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2529:4:12",
														"type": ""
													}
												],
												"src": "2363:419:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2884:73:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2901:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2906:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2894:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2894:19:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2894:19:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2922:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2941:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2946:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2937:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2937:14:12"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "2922:11:12"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2856:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2861:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "2872:11:12",
														"type": ""
													}
												],
												"src": "2788:169:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3008:51:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3018:35:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3047:5:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "3029:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3029:24:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3018:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2990:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3000:7:12",
														"type": ""
													}
												],
												"src": "2963:96:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3110:81:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3120:65:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3135:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3142:42:12",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3131:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3131:54:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3120:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3092:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3102:7:12",
														"type": ""
													}
												],
												"src": "3065:126:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3241:47:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3251:31:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3266:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3273:8:12",
																		"type": "",
																		"value": "0xffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3262:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3262:20:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3251:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3223:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3233:7:12",
														"type": ""
													}
												],
												"src": "3197:91:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3337:79:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3394:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3403:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3406:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3396:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3396:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3396:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3360:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3385:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "3367:17:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3367:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3357:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3357:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3350:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3350:43:12"
															},
															"nodeType": "YulIf",
															"src": "3347:2:12"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3330:5:12",
														"type": ""
													}
												],
												"src": "3294:122:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3464:78:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3520:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3529:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3532:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3522:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3522:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3522:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3487:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3511:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint24",
																					"nodeType": "YulIdentifier",
																					"src": "3494:16:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3494:23:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3484:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3484:34:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3477:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3477:42:12"
															},
															"nodeType": "YulIf",
															"src": "3474:2:12"
														}
													]
												},
												"name": "validator_revert_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3457:5:12",
														"type": ""
													}
												],
												"src": "3422:120:12"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_uint24_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint24(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint24_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint24_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_stringliteral_3af18816a8a568d0d762c6bf9b28b87a3089f28cd99bc9524d95c6fa1b66a712_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n\n        mstore(add(pos, 0), \"Pools does not exist\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_uint24_to_t_uint24_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint24(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint24_to_t_uint24_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_3af18816a8a568d0d762c6bf9b28b87a3089f28cd99bc9524d95c6fa1b66a712__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3af18816a8a568d0d762c6bf9b28b87a3089f28cd99bc9524d95c6fa1b66a712_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint24(value) -> cleaned {\n        cleaned := and(value, 0xffffff)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint24(value) {\n        if iszero(eq(value, cleanup_t_uint24(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60e06040523480156200001157600080fd5b50604051620015223803806200152283398181016040528101906200003791906200024b565b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060008273ffffffffffffffffffffffffffffffffffffffff16631698ee828686856040518463ffffffff1660e01b8152600401620000e6939291906200031b565b60206040518083038186803b158015620000ff57600080fd5b505afa15801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a91906200021f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620001af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001a69062000358565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505050505062000402565b6000815190506200020281620003ce565b92915050565b6000815190506200021981620003e8565b92915050565b6000602082840312156200023257600080fd5b60006200024284828501620001f1565b91505092915050565b600080600080608085870312156200026257600080fd5b60006200027287828801620001f1565b94505060206200028587828801620001f1565b93505060406200029887828801620001f1565b9250506060620002ab8782880162000208565b91505092959194509250565b620002c2816200038b565b82525050565b6000620002d76014836200037a565b91507f506f6f6c7320646f6573206e6f742065786973740000000000000000000000006000830152602082019050919050565b6200031581620003bf565b82525050565b6000606082019050620003326000830186620002b7565b620003416020830185620002b7565b6200035060408301846200030a565b949350505050565b600060208201905081810360008301526200037381620002c8565b9050919050565b600082825260208201905092915050565b600062000398826200039f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b620003d9816200038b565b8114620003e557600080fd5b50565b620003f381620003bf565b8114620003ff57600080fd5b50565b60805160601c60a05160601c60c05160601c6110cd620004556000398061010152806102af52508061017c528061028652806102f052508060dd5280610127528061020d528061026052506110cd6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630dfe16811461005157806316f0115b1461006f5780638f2e81991461008d578063d21220a7146100bd575b600080fd5b6100596100db565b6040516100669190610f83565b60405180910390f35b6100776100ff565b6040516100849190610f83565b60405180910390f35b6100a760048036038101906100a29190610ed6565b610123565b6040516100b49190610fbe565b60405180910390f35b6100c56102ee565b6040516100d29190610f83565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806101ca57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b610209576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020090610f9e565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610284577f00000000000000000000000000000000000000000000000000000000000000006102a6565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006102d47f000000000000000000000000000000000000000000000000000000000000000085610312565b5090506102e38186888561077f565b925050509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008363ffffffff161415610392576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f425000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600267ffffffffffffffff811180156103ac57600080fd5b506040519080825280602002602001820160405280156103db5781602001602082028036833780820191505090505b50905083816000815181106103ec57fe5b602002602001019063ffffffff16908163ffffffff168152505060008160018151811061041557fe5b602002602001019063ffffffff16908163ffffffff16815250506000808673ffffffffffffffffffffffffffffffffffffffff1663883bdbfd846040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b838110156104a1578082015181840152602081019050610486565b505050509050019250505060006040518083038186803b1580156104c457600080fd5b505afa1580156104d8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250604081101561050257600080fd5b810190808051604051939291908464010000000082111561052257600080fd5b8382019150602082018581111561053857600080fd5b825186602082028301116401000000008211171561055557600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561058c578082015181840152602081019050610571565b50505050905001604052602001805160405193929190846401000000008211156105b557600080fd5b838201915060208201858111156105cb57600080fd5b82518660208202830111640100000000821117156105e857600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561061f578082015181840152602081019050610604565b505050509050016040525050509150915060008260008151811061063f57fe5b60200260200101518360018151811061065457fe5b602002602001015103905060008260008151811061066e57fe5b60200260200101518360018151811061068357fe5b60200260200101510390508763ffffffff168260060b816106a057fe5b05965060008260060b1280156106cc575060008863ffffffff168360060b816106c557fe5b0760060b14155b156106db578680600190039750505b600073ffffffffffffffffffffffffffffffffffffffff80168963ffffffff1602905060208273ffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16901b77ffffffffffffffffffffffffffffffffffffffffffffffff168177ffffffffffffffffffffffffffffffffffffffffffffffff168161076f57fe5b0496505050505050509250929050565b60008061078b86610982565b90506fffffffffffffffffffffffffffffffff80168173ffffffffffffffffffffffffffffffffffffffff161161089c5760008173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160290508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061085d576108587801000000000000000000000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683610dbd565b610894565b61089381876fffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000610dbd565b5b925050610979565b60006108de8273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1668010000000000000000610dbd565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061094657610941700100000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683610dbd565b610975565b61097481876fffffffffffffffffffffffffffffffff16700100000000000000000000000000000000610dbd565b5b9250505b50949350505050565b60008060008360020b12610999578260020b6109a1565b8260020b6000035b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860000360020b811115610a3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f540000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600080600183161415610a6357700100000000000000000000000000000000610a75565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060006002831614610aaf5760806ffff97272373d413259a46990580e213a8202901c90505b60006004831614610ad45760806ffff2e50f5f656932ef12357cf3c7fdcc8202901c90505b60006008831614610af95760806fffe5caca7e10e4e61c3624eaa0941cd08202901c90505b60006010831614610b1e5760806fffcb9843d60f6159c9db58835c9266448202901c90505b60006020831614610b435760806fff973b41fa98c081472e6896dfb254c08202901c90505b60006040831614610b685760806fff2ea16466c96a3843ec78b326b528618202901c90505b60006080831614610b8d5760806ffe5dee046a99a2a811c461f1969c30538202901c90505b6000610100831614610bb35760806ffcbe86c7900a88aedcffc83b479aa3a48202901c90505b6000610200831614610bd95760806ff987a7253ac413176f2b074cf7815e548202901c90505b6000610400831614610bff5760806ff3392b0822b70005940c7a398e4b70f38202901c90505b6000610800831614610c255760806fe7159475a2c29b7443b29c7fa6e889d98202901c90505b6000611000831614610c4b5760806fd097f3bdfd2022b8845ad8f792aa58258202901c90505b6000612000831614610c715760806fa9f746462d870fdf8a65dc1f90e061e58202901c90505b6000614000831614610c975760806f70d869a156d2a1b890bb3df62baf32f78202901c90505b6000618000831614610cbd5760806f31be135f97d08fd981231505542fcfa68202901c90505b600062010000831614610ce45760806f09aa508b5b7a84e1c677de54f3e99bc98202901c90505b600062020000831614610d0a5760806e5d6af8dedb81196699c329225ee6048202901c90505b600062040000831614610d2f5760806d2216e584f5fa1ea926041bedfe988202901c90505b600062080000831614610d525760806b048a170391f7dc42444e8fa28202901c90505b60008460020b1315610d8b57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81610d8757fe5b0490505b60006401000000008281610d9b57fe5b0614610da8576001610dab565b60005b60ff16602082901c0192505050919050565b600080600080198587098587029250828110838203039150506000811415610df85760008411610dec57600080fd5b83820492505050610e90565b808411610e0457600080fd5b600084868809905082811182039150808303925060008586600003169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b600081359050610ea681611052565b92915050565b600081359050610ebb81611069565b92915050565b600081359050610ed081611080565b92915050565b600080600060608486031215610eeb57600080fd5b6000610ef986828701610e97565b9350506020610f0a86828701610eac565b9250506040610f1b86828701610ec1565b9150509250925092565b610f2e81610fea565b82525050565b6000610f41600d83610fd9565b91507f696e76616c696420746f6b656e000000000000000000000000000000000000006000830152602082019050919050565b610f7d81611038565b82525050565b6000602082019050610f986000830184610f25565b92915050565b60006020820190508181036000830152610fb781610f34565b9050919050565b6000602082019050610fd36000830184610f74565b92915050565b600082825260208201905092915050565b6000610ff582611018565b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b61105b81610fea565b811461106657600080fd5b50565b61107281610ffc565b811461107d57600080fd5b50565b61108981611042565b811461109457600080fd5b5056fea2646970667358221220a9b1bf6f132ac2b87431ccd1f49839b1fcd2c7b8d57068d3570f626be403196f64736f6c63430007060033",
							"opcodes": "PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1522 CODESIZE SUB DUP1 PUSH3 0x1522 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x24B JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1698EE82 DUP7 DUP7 DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xE6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x31B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x114 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x13A SWAP2 SWAP1 PUSH3 0x21F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH3 0x1AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1A6 SWAP1 PUSH3 0x358 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP POP POP POP POP PUSH3 0x402 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x202 DUP2 PUSH3 0x3CE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x219 DUP2 PUSH3 0x3E8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x242 DUP5 DUP3 DUP6 ADD PUSH3 0x1F1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x272 DUP8 DUP3 DUP9 ADD PUSH3 0x1F1 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x285 DUP8 DUP3 DUP9 ADD PUSH3 0x1F1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH3 0x298 DUP8 DUP3 DUP9 ADD PUSH3 0x1F1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH3 0x2AB DUP8 DUP3 DUP9 ADD PUSH3 0x208 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH3 0x2C2 DUP2 PUSH3 0x38B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2D7 PUSH1 0x14 DUP4 PUSH3 0x37A JUMP JUMPDEST SWAP2 POP PUSH32 0x506F6F6C7320646F6573206E6F74206578697374000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x315 DUP2 PUSH3 0x3BF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH3 0x332 PUSH1 0x0 DUP4 ADD DUP7 PUSH3 0x2B7 JUMP JUMPDEST PUSH3 0x341 PUSH1 0x20 DUP4 ADD DUP6 PUSH3 0x2B7 JUMP JUMPDEST PUSH3 0x350 PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0x30A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x373 DUP2 PUSH3 0x2C8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x398 DUP3 PUSH3 0x39F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x3D9 DUP2 PUSH3 0x38B JUMP JUMPDEST DUP2 EQ PUSH3 0x3E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x3F3 DUP2 PUSH3 0x3BF JUMP JUMPDEST DUP2 EQ PUSH3 0x3FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH2 0x10CD PUSH3 0x455 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x101 MSTORE DUP1 PUSH2 0x2AF MSTORE POP DUP1 PUSH2 0x17C MSTORE DUP1 PUSH2 0x286 MSTORE DUP1 PUSH2 0x2F0 MSTORE POP DUP1 PUSH1 0xDD MSTORE DUP1 PUSH2 0x127 MSTORE DUP1 PUSH2 0x20D MSTORE DUP1 PUSH2 0x260 MSTORE POP PUSH2 0x10CD PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDFE1681 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x16F0115B EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x8F2E8199 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0xD21220A7 EQ PUSH2 0xBD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0xDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xF83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x77 PUSH2 0xFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x84 SWAP2 SWAP1 PUSH2 0xF83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0xED6 JUMP JUMPDEST PUSH2 0x123 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0x2EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD2 SWAP2 SWAP1 PUSH2 0xF83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1CA JUMPI POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x209 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x200 SWAP1 PUSH2 0xF9E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x284 JUMPI PUSH32 0x0 PUSH2 0x2A6 JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2D4 PUSH32 0x0 DUP6 PUSH2 0x312 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x2E3 DUP2 DUP7 DUP9 DUP6 PUSH2 0x77F JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x392 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4250000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3DB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH4 0xFFFFFFFF AND SWAP1 DUP2 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x415 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH4 0xFFFFFFFF AND SWAP1 DUP2 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x883BDBFD DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x486 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x522 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x538 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x555 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x58C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x571 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x5B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x5CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x61F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x604 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE POP POP POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x63F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x654 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x66E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x683 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB SWAP1 POP DUP8 PUSH4 0xFFFFFFFF AND DUP3 PUSH1 0x6 SIGNEXTEND DUP2 PUSH2 0x6A0 JUMPI INVALID JUMPDEST SDIV SWAP7 POP PUSH1 0x0 DUP3 PUSH1 0x6 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x6CC JUMPI POP PUSH1 0x0 DUP9 PUSH4 0xFFFFFFFF AND DUP4 PUSH1 0x6 SIGNEXTEND DUP2 PUSH2 0x6C5 JUMPI INVALID JUMPDEST SMOD PUSH1 0x6 SIGNEXTEND EQ ISZERO JUMPDEST ISZERO PUSH2 0x6DB JUMPI DUP7 DUP1 PUSH1 0x1 SWAP1 SUB SWAP8 POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP10 PUSH4 0xFFFFFFFF AND MUL SWAP1 POP PUSH1 0x20 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 SHL PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH2 0x76F JUMPI INVALID JUMPDEST DIV SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x78B DUP7 PUSH2 0x982 JUMP JUMPDEST SWAP1 POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x89C JUMPI PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x85D JUMPI PUSH2 0x858 PUSH25 0x1000000000000000000000000000000000000000000000000 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0xDBD JUMP JUMPDEST PUSH2 0x894 JUMP JUMPDEST PUSH2 0x893 DUP2 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH25 0x1000000000000000000000000000000000000000000000000 PUSH2 0xDBD JUMP JUMPDEST JUMPDEST SWAP3 POP POP PUSH2 0x979 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8DE DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH9 0x10000000000000000 PUSH2 0xDBD JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x946 JUMPI PUSH2 0x941 PUSH17 0x100000000000000000000000000000000 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0xDBD JUMP JUMPDEST PUSH2 0x975 JUMP JUMPDEST PUSH2 0x974 DUP2 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH17 0x100000000000000000000000000000000 PUSH2 0xDBD JUMP JUMPDEST JUMPDEST SWAP3 POP POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x999 JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x9A1 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27618 PUSH1 0x0 SUB PUSH1 0x2 SIGNEXTEND DUP2 GT ISZERO PUSH2 0xA3F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 DUP4 AND EQ ISZERO PUSH2 0xA63 JUMPI PUSH17 0x100000000000000000000000000000000 PUSH2 0xA75 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP4 AND EQ PUSH2 0xAAF JUMPI PUSH1 0x80 PUSH16 0xFFF97272373D413259A46990580E213A DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP4 AND EQ PUSH2 0xAD4 JUMPI PUSH1 0x80 PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 AND EQ PUSH2 0xAF9 JUMPI PUSH1 0x80 PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x10 DUP4 AND EQ PUSH2 0xB1E JUMPI PUSH1 0x80 PUSH16 0xFFCB9843D60F6159C9DB58835C926644 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 AND EQ PUSH2 0xB43 JUMPI PUSH1 0x80 PUSH16 0xFF973B41FA98C081472E6896DFB254C0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP4 AND EQ PUSH2 0xB68 JUMPI PUSH1 0x80 PUSH16 0xFF2EA16466C96A3843EC78B326B52861 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 AND EQ PUSH2 0xB8D JUMPI PUSH1 0x80 PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP4 AND EQ PUSH2 0xBB3 JUMPI PUSH1 0x80 PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP4 AND EQ PUSH2 0xBD9 JUMPI PUSH1 0x80 PUSH16 0xF987A7253AC413176F2B074CF7815E54 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x400 DUP4 AND EQ PUSH2 0xBFF JUMPI PUSH1 0x80 PUSH16 0xF3392B0822B70005940C7A398E4B70F3 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x800 DUP4 AND EQ PUSH2 0xC25 JUMPI PUSH1 0x80 PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x1000 DUP4 AND EQ PUSH2 0xC4B JUMPI PUSH1 0x80 PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x2000 DUP4 AND EQ PUSH2 0xC71 JUMPI PUSH1 0x80 PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x4000 DUP4 AND EQ PUSH2 0xC97 JUMPI PUSH1 0x80 PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x8000 DUP4 AND EQ PUSH2 0xCBD JUMPI PUSH1 0x80 PUSH16 0x31BE135F97D08FD981231505542FCFA6 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x10000 DUP4 AND EQ PUSH2 0xCE4 JUMPI PUSH1 0x80 PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x20000 DUP4 AND EQ PUSH2 0xD0A JUMPI PUSH1 0x80 PUSH15 0x5D6AF8DEDB81196699C329225EE604 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x40000 DUP4 AND EQ PUSH2 0xD2F JUMPI PUSH1 0x80 PUSH14 0x2216E584F5FA1EA926041BEDFE98 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x80000 DUP4 AND EQ PUSH2 0xD52 JUMPI PUSH1 0x80 PUSH12 0x48A170391F7DC42444E8FA2 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0xD8B JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 PUSH2 0xD87 JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH1 0x0 PUSH5 0x100000000 DUP3 DUP2 PUSH2 0xD9B JUMPI INVALID JUMPDEST MOD EQ PUSH2 0xDA8 JUMPI PUSH1 0x1 PUSH2 0xDAB JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0xDF8 JUMPI PUSH1 0x0 DUP5 GT PUSH2 0xDEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 DIV SWAP3 POP POP POP PUSH2 0xE90 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0xE04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH1 0x0 DUP6 DUP7 PUSH1 0x0 SUB AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH1 0x0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH1 0x0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xEA6 DUP2 PUSH2 0x1052 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xEBB DUP2 PUSH2 0x1069 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xED0 DUP2 PUSH2 0x1080 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xEEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEF9 DUP7 DUP3 DUP8 ADD PUSH2 0xE97 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xF0A DUP7 DUP3 DUP8 ADD PUSH2 0xEAC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xF1B DUP7 DUP3 DUP8 ADD PUSH2 0xEC1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xF2E DUP2 PUSH2 0xFEA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF41 PUSH1 0xD DUP4 PUSH2 0xFD9 JUMP JUMPDEST SWAP2 POP PUSH32 0x696E76616C696420746F6B656E00000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF7D DUP2 PUSH2 0x1038 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xF98 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF25 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFB7 DUP2 PUSH2 0xF34 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFD3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF74 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF5 DUP3 PUSH2 0x1018 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x105B DUP2 PUSH2 0xFEA JUMP JUMPDEST DUP2 EQ PUSH2 0x1066 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1072 DUP2 PUSH2 0xFFC JUMP JUMPDEST DUP2 EQ PUSH2 0x107D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1089 DUP2 PUSH2 0x1042 JUMP JUMPDEST DUP2 EQ PUSH2 0x1094 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0xB1 0xBF PUSH16 0x132AC2B87431CCD1F49839B1FCD2C7B8 0xD5 PUSH17 0x68D3570F626BE403196F64736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "530:949:11:-:0;;;671:311;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;761:7;754:14;;;;;;;;;;;;785:7;778:14;;;;;;;;;;;;803:13;835:8;817:35;;;866:7;874;882:4;817:79;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;803:93;;929:1;914:17;;:5;:17;;;;906:49;;;;;;;;;;;;:::i;:::-;;;;;;;;;970:5;965:10;;;;;;;;;;;;671:311;;;;;530:949;;7:143:12;;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;70:80;;;;:::o;156:141::-;;243:6;237:13;228:22;;259:32;285:5;259:32;:::i;:::-;218:79;;;;:::o;303:284::-;;422:2;410:9;401:7;397:23;393:32;390:2;;;438:1;435;428:12;390:2;481:1;506:64;562:7;553:6;542:9;538:22;506:64;:::i;:::-;496:74;;452:128;380:207;;;;:::o;593:751::-;;;;;762:3;750:9;741:7;737:23;733:33;730:2;;;779:1;776;769:12;730:2;822:1;847:64;903:7;894:6;883:9;879:22;847:64;:::i;:::-;837:74;;793:128;960:2;986:64;1042:7;1033:6;1022:9;1018:22;986:64;:::i;:::-;976:74;;931:129;1099:2;1125:64;1181:7;1172:6;1161:9;1157:22;1125:64;:::i;:::-;1115:74;;1070:129;1238:2;1264:63;1319:7;1310:6;1299:9;1295:22;1264:63;:::i;:::-;1254:73;;1209:128;720:624;;;;;;;:::o;1350:118::-;1437:24;1455:5;1437:24;:::i;:::-;1432:3;1425:37;1415:53;;:::o;1474:318::-;;1637:67;1701:2;1696:3;1637:67;:::i;:::-;1630:74;;1734:22;1730:1;1725:3;1721:11;1714:43;1783:2;1778:3;1774:12;1767:19;;1620:172;;;:::o;1798:115::-;1883:23;1900:5;1883:23;:::i;:::-;1878:3;1871:36;1861:52;;:::o;1919:438::-;;2104:2;2093:9;2089:18;2081:26;;2117:71;2185:1;2174:9;2170:17;2161:6;2117:71;:::i;:::-;2198:72;2266:2;2255:9;2251:18;2242:6;2198:72;:::i;:::-;2280:70;2346:2;2335:9;2331:18;2322:6;2280:70;:::i;:::-;2071:286;;;;;;:::o;2363:419::-;;2567:2;2556:9;2552:18;2544:26;;2616:9;2610:4;2606:20;2602:1;2591:9;2587:17;2580:47;2644:131;2770:4;2644:131;:::i;:::-;2636:139;;2534:248;;;:::o;2788:169::-;;2906:6;2901:3;2894:19;2946:4;2941:3;2937:14;2922:29;;2884:73;;;;:::o;2963:96::-;;3029:24;3047:5;3029:24;:::i;:::-;3018:35;;3008:51;;;:::o;3065:126::-;;3142:42;3135:5;3131:54;3120:65;;3110:81;;;:::o;3197:91::-;;3273:8;3266:5;3262:20;3251:31;;3241:47;;;:::o;3294:122::-;3367:24;3385:5;3367:24;:::i;:::-;3360:5;3357:35;3347:2;;3406:1;3403;3396:12;3347:2;3337:79;:::o;3422:120::-;3494:23;3511:5;3494:23;:::i;:::-;3487:5;3484:34;3474:2;;3532:1;3529;3522:12;3474:2;3464:78;:::o;530:949:11:-;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:3536:12",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:12"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:12",
														"type": ""
													}
												],
												"src": "7:139:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "204:87:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "214:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "236:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "223:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "214:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "279:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint128",
																	"nodeType": "YulIdentifier",
																	"src": "252:26:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "252:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "252:33:12"
														}
													]
												},
												"name": "abi_decode_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "182:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "190:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "198:5:12",
														"type": ""
													}
												],
												"src": "152:139:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "348:86:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "358:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "380:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "367:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "367:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "358:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "422:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint32",
																	"nodeType": "YulIdentifier",
																	"src": "396:25:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "396:32:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "396:32:12"
														}
													]
												},
												"name": "abi_decode_t_uint32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "326:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "334:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "342:5:12",
														"type": ""
													}
												],
												"src": "297:137:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "539:451:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "585:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "594:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "597:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "587:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "587:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "587:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "560:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "569:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "556:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "556:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "581:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "552:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "552:32:12"
															},
															"nodeType": "YulIf",
															"src": "549:2:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "611:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "626:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "640:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "630:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "655:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "690:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "701:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "686:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "686:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "710:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "665:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "665:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "655:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "738:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "753:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "767:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "757:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "783:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "818:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "829:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "814:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "814:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "838:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint128",
																			"nodeType": "YulIdentifier",
																			"src": "793:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "793:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "783:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "866:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "881:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "895:2:12",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "885:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "911:62:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "945:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "956:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "941:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "941:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "965:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint32",
																			"nodeType": "YulIdentifier",
																			"src": "921:19:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "921:52:12"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "911:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint128t_uint32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "493:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "504:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "516:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "524:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "532:6:12",
														"type": ""
													}
												],
												"src": "440:550:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1061:53:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1078:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1101:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1083:17:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1083:24:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1071:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1071:37:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1071:37:12"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1049:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1056:3:12",
														"type": ""
													}
												],
												"src": "996:118:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1266:165:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1276:74:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1342:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1347:2:12",
																		"type": "",
																		"value": "13"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1283:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1283:67:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "1276:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1371:3:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1376:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1367:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1367:11:12"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1380:15:12",
																		"type": "",
																		"value": "invalid token"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1360:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1360:36:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1360:36:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1406:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1417:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1422:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1413:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1413:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1406:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_91766924399ba2aa6ad0c8d1146b6e8fd47173f69f3b391bd887f350814cada7_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1254:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1262:3:12",
														"type": ""
													}
												],
												"src": "1120:311:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1502:53:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1519:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1542:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1524:17:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1524:24:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1512:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1512:37:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1512:37:12"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1490:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1497:3:12",
														"type": ""
													}
												],
												"src": "1437:118:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1659:124:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1669:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1681:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1692:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1677:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1677:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1669:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1749:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1762:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1773:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1758:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1758:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1705:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1705:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1705:71:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1631:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1643:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1654:4:12",
														"type": ""
													}
												],
												"src": "1561:222:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1960:248:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1970:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1982:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1993:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1978:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1978:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1970:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2017:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2028:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2013:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2013:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "2036:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2042:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2032:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2032:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2006:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2006:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2006:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2062:139:12",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "2196:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_91766924399ba2aa6ad0c8d1146b6e8fd47173f69f3b391bd887f350814cada7_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2070:124:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2070:131:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2062:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_91766924399ba2aa6ad0c8d1146b6e8fd47173f69f3b391bd887f350814cada7__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1940:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1955:4:12",
														"type": ""
													}
												],
												"src": "1789:419:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2312:124:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2322:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2334:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2345:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2330:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2330:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2322:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2402:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2415:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2426:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2411:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2411:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2358:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2358:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2358:71:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2284:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2296:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2307:4:12",
														"type": ""
													}
												],
												"src": "2214:222:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2538:73:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2555:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2560:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2548:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2548:19:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2548:19:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2576:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2595:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2600:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2591:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2591:14:12"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "2576:11:12"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2510:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2515:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "2526:11:12",
														"type": ""
													}
												],
												"src": "2442:169:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2662:51:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2672:35:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2701:5:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "2683:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2683:24:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2672:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2644:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2654:7:12",
														"type": ""
													}
												],
												"src": "2617:96:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2764:73:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2774:57:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2789:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2796:34:12",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2785:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2785:46:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2774:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2746:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2756:7:12",
														"type": ""
													}
												],
												"src": "2719:118:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2888:81:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2898:65:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2913:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2920:42:12",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2909:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2909:54:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2898:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2870:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2880:7:12",
														"type": ""
													}
												],
												"src": "2843:126:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3020:32:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3030:16:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3041:5:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3030:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3002:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3012:7:12",
														"type": ""
													}
												],
												"src": "2975:77:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3102:49:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3112:33:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3127:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3134:10:12",
																		"type": "",
																		"value": "0xffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3123:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3123:22:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3112:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3084:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3094:7:12",
														"type": ""
													}
												],
												"src": "3058:93:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3200:79:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3257:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3266:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3269:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3259:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3259:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3259:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3223:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3248:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "3230:17:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3230:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3220:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3220:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3213:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3213:43:12"
															},
															"nodeType": "YulIf",
															"src": "3210:2:12"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3193:5:12",
														"type": ""
													}
												],
												"src": "3157:122:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3328:79:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3385:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3394:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3397:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3387:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3387:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3387:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3351:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3376:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint128",
																					"nodeType": "YulIdentifier",
																					"src": "3358:17:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3358:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3348:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3348:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3341:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3341:43:12"
															},
															"nodeType": "YulIf",
															"src": "3338:2:12"
														}
													]
												},
												"name": "validator_revert_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3321:5:12",
														"type": ""
													}
												],
												"src": "3285:122:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3455:78:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3511:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3520:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3523:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3513:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3513:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3513:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3478:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3502:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint32",
																					"nodeType": "YulIdentifier",
																					"src": "3485:16:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3485:23:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3475:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3475:34:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3468:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3468:42:12"
															},
															"nodeType": "YulIf",
															"src": "3465:2:12"
														}
													]
												},
												"name": "validator_revert_t_uint32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3448:5:12",
														"type": ""
													}
												],
												"src": "3413:120:12"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_uint128(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint128(value)\n    }\n\n    function abi_decode_t_uint32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint128t_uint32(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint128(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_stringliteral_91766924399ba2aa6ad0c8d1146b6e8fd47173f69f3b391bd887f350814cada7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n\n        mstore(add(pos, 0), \"invalid token\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_91766924399ba2aa6ad0c8d1146b6e8fd47173f69f3b391bd887f350814cada7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_91766924399ba2aa6ad0c8d1146b6e8fd47173f69f3b391bd887f350814cada7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint128(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint128(value) {\n        if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1828": [
									{
										"length": 32,
										"start": 221
									},
									{
										"length": 32,
										"start": 295
									},
									{
										"length": 32,
										"start": 525
									},
									{
										"length": 32,
										"start": 608
									}
								],
								"1830": [
									{
										"length": 32,
										"start": 380
									},
									{
										"length": 32,
										"start": 646
									},
									{
										"length": 32,
										"start": 752
									}
								],
								"1832": [
									{
										"length": 32,
										"start": 257
									},
									{
										"length": 32,
										"start": 687
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061004c5760003560e01c80630dfe16811461005157806316f0115b1461006f5780638f2e81991461008d578063d21220a7146100bd575b600080fd5b6100596100db565b6040516100669190610f83565b60405180910390f35b6100776100ff565b6040516100849190610f83565b60405180910390f35b6100a760048036038101906100a29190610ed6565b610123565b6040516100b49190610fbe565b60405180910390f35b6100c56102ee565b6040516100d29190610f83565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806101ca57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b610209576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020090610f9e565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610284577f00000000000000000000000000000000000000000000000000000000000000006102a6565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006102d47f000000000000000000000000000000000000000000000000000000000000000085610312565b5090506102e38186888561077f565b925050509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008363ffffffff161415610392576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f425000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600267ffffffffffffffff811180156103ac57600080fd5b506040519080825280602002602001820160405280156103db5781602001602082028036833780820191505090505b50905083816000815181106103ec57fe5b602002602001019063ffffffff16908163ffffffff168152505060008160018151811061041557fe5b602002602001019063ffffffff16908163ffffffff16815250506000808673ffffffffffffffffffffffffffffffffffffffff1663883bdbfd846040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b838110156104a1578082015181840152602081019050610486565b505050509050019250505060006040518083038186803b1580156104c457600080fd5b505afa1580156104d8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250604081101561050257600080fd5b810190808051604051939291908464010000000082111561052257600080fd5b8382019150602082018581111561053857600080fd5b825186602082028301116401000000008211171561055557600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561058c578082015181840152602081019050610571565b50505050905001604052602001805160405193929190846401000000008211156105b557600080fd5b838201915060208201858111156105cb57600080fd5b82518660208202830111640100000000821117156105e857600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561061f578082015181840152602081019050610604565b505050509050016040525050509150915060008260008151811061063f57fe5b60200260200101518360018151811061065457fe5b602002602001015103905060008260008151811061066e57fe5b60200260200101518360018151811061068357fe5b60200260200101510390508763ffffffff168260060b816106a057fe5b05965060008260060b1280156106cc575060008863ffffffff168360060b816106c557fe5b0760060b14155b156106db578680600190039750505b600073ffffffffffffffffffffffffffffffffffffffff80168963ffffffff1602905060208273ffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16901b77ffffffffffffffffffffffffffffffffffffffffffffffff168177ffffffffffffffffffffffffffffffffffffffffffffffff168161076f57fe5b0496505050505050509250929050565b60008061078b86610982565b90506fffffffffffffffffffffffffffffffff80168173ffffffffffffffffffffffffffffffffffffffff161161089c5760008173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160290508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061085d576108587801000000000000000000000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683610dbd565b610894565b61089381876fffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000610dbd565b5b925050610979565b60006108de8273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1668010000000000000000610dbd565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061094657610941700100000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683610dbd565b610975565b61097481876fffffffffffffffffffffffffffffffff16700100000000000000000000000000000000610dbd565b5b9250505b50949350505050565b60008060008360020b12610999578260020b6109a1565b8260020b6000035b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860000360020b811115610a3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f540000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600080600183161415610a6357700100000000000000000000000000000000610a75565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060006002831614610aaf5760806ffff97272373d413259a46990580e213a8202901c90505b60006004831614610ad45760806ffff2e50f5f656932ef12357cf3c7fdcc8202901c90505b60006008831614610af95760806fffe5caca7e10e4e61c3624eaa0941cd08202901c90505b60006010831614610b1e5760806fffcb9843d60f6159c9db58835c9266448202901c90505b60006020831614610b435760806fff973b41fa98c081472e6896dfb254c08202901c90505b60006040831614610b685760806fff2ea16466c96a3843ec78b326b528618202901c90505b60006080831614610b8d5760806ffe5dee046a99a2a811c461f1969c30538202901c90505b6000610100831614610bb35760806ffcbe86c7900a88aedcffc83b479aa3a48202901c90505b6000610200831614610bd95760806ff987a7253ac413176f2b074cf7815e548202901c90505b6000610400831614610bff5760806ff3392b0822b70005940c7a398e4b70f38202901c90505b6000610800831614610c255760806fe7159475a2c29b7443b29c7fa6e889d98202901c90505b6000611000831614610c4b5760806fd097f3bdfd2022b8845ad8f792aa58258202901c90505b6000612000831614610c715760806fa9f746462d870fdf8a65dc1f90e061e58202901c90505b6000614000831614610c975760806f70d869a156d2a1b890bb3df62baf32f78202901c90505b6000618000831614610cbd5760806f31be135f97d08fd981231505542fcfa68202901c90505b600062010000831614610ce45760806f09aa508b5b7a84e1c677de54f3e99bc98202901c90505b600062020000831614610d0a5760806e5d6af8dedb81196699c329225ee6048202901c90505b600062040000831614610d2f5760806d2216e584f5fa1ea926041bedfe988202901c90505b600062080000831614610d525760806b048a170391f7dc42444e8fa28202901c90505b60008460020b1315610d8b57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81610d8757fe5b0490505b60006401000000008281610d9b57fe5b0614610da8576001610dab565b60005b60ff16602082901c0192505050919050565b600080600080198587098587029250828110838203039150506000811415610df85760008411610dec57600080fd5b83820492505050610e90565b808411610e0457600080fd5b600084868809905082811182039150808303925060008586600003169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b600081359050610ea681611052565b92915050565b600081359050610ebb81611069565b92915050565b600081359050610ed081611080565b92915050565b600080600060608486031215610eeb57600080fd5b6000610ef986828701610e97565b9350506020610f0a86828701610eac565b9250506040610f1b86828701610ec1565b9150509250925092565b610f2e81610fea565b82525050565b6000610f41600d83610fd9565b91507f696e76616c696420746f6b656e000000000000000000000000000000000000006000830152602082019050919050565b610f7d81611038565b82525050565b6000602082019050610f986000830184610f25565b92915050565b60006020820190508181036000830152610fb781610f34565b9050919050565b6000602082019050610fd36000830184610f74565b92915050565b600082825260208201905092915050565b6000610ff582611018565b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b61105b81610fea565b811461106657600080fd5b50565b61107281610ffc565b811461107d57600080fd5b50565b61108981611042565b811461109457600080fd5b5056fea2646970667358221220a9b1bf6f132ac2b87431ccd1f49839b1fcd2c7b8d57068d3570f626be403196f64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDFE1681 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x16F0115B EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x8F2E8199 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0xD21220A7 EQ PUSH2 0xBD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0xDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xF83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x77 PUSH2 0xFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x84 SWAP2 SWAP1 PUSH2 0xF83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0xED6 JUMP JUMPDEST PUSH2 0x123 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0x2EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD2 SWAP2 SWAP1 PUSH2 0xF83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1CA JUMPI POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x209 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x200 SWAP1 PUSH2 0xF9E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x284 JUMPI PUSH32 0x0 PUSH2 0x2A6 JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2D4 PUSH32 0x0 DUP6 PUSH2 0x312 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x2E3 DUP2 DUP7 DUP9 DUP6 PUSH2 0x77F JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x392 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4250000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3DB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH4 0xFFFFFFFF AND SWAP1 DUP2 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x415 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH4 0xFFFFFFFF AND SWAP1 DUP2 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x883BDBFD DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x486 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x522 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x538 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x555 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x58C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x571 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x5B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x5CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x61F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x604 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE POP POP POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x63F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x654 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x66E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x683 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB SWAP1 POP DUP8 PUSH4 0xFFFFFFFF AND DUP3 PUSH1 0x6 SIGNEXTEND DUP2 PUSH2 0x6A0 JUMPI INVALID JUMPDEST SDIV SWAP7 POP PUSH1 0x0 DUP3 PUSH1 0x6 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x6CC JUMPI POP PUSH1 0x0 DUP9 PUSH4 0xFFFFFFFF AND DUP4 PUSH1 0x6 SIGNEXTEND DUP2 PUSH2 0x6C5 JUMPI INVALID JUMPDEST SMOD PUSH1 0x6 SIGNEXTEND EQ ISZERO JUMPDEST ISZERO PUSH2 0x6DB JUMPI DUP7 DUP1 PUSH1 0x1 SWAP1 SUB SWAP8 POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP10 PUSH4 0xFFFFFFFF AND MUL SWAP1 POP PUSH1 0x20 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 SHL PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH2 0x76F JUMPI INVALID JUMPDEST DIV SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x78B DUP7 PUSH2 0x982 JUMP JUMPDEST SWAP1 POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x89C JUMPI PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x85D JUMPI PUSH2 0x858 PUSH25 0x1000000000000000000000000000000000000000000000000 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0xDBD JUMP JUMPDEST PUSH2 0x894 JUMP JUMPDEST PUSH2 0x893 DUP2 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH25 0x1000000000000000000000000000000000000000000000000 PUSH2 0xDBD JUMP JUMPDEST JUMPDEST SWAP3 POP POP PUSH2 0x979 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8DE DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH9 0x10000000000000000 PUSH2 0xDBD JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x946 JUMPI PUSH2 0x941 PUSH17 0x100000000000000000000000000000000 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0xDBD JUMP JUMPDEST PUSH2 0x975 JUMP JUMPDEST PUSH2 0x974 DUP2 DUP8 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH17 0x100000000000000000000000000000000 PUSH2 0xDBD JUMP JUMPDEST JUMPDEST SWAP3 POP POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x999 JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x9A1 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27618 PUSH1 0x0 SUB PUSH1 0x2 SIGNEXTEND DUP2 GT ISZERO PUSH2 0xA3F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 DUP4 AND EQ ISZERO PUSH2 0xA63 JUMPI PUSH17 0x100000000000000000000000000000000 PUSH2 0xA75 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP4 AND EQ PUSH2 0xAAF JUMPI PUSH1 0x80 PUSH16 0xFFF97272373D413259A46990580E213A DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP4 AND EQ PUSH2 0xAD4 JUMPI PUSH1 0x80 PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 AND EQ PUSH2 0xAF9 JUMPI PUSH1 0x80 PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x10 DUP4 AND EQ PUSH2 0xB1E JUMPI PUSH1 0x80 PUSH16 0xFFCB9843D60F6159C9DB58835C926644 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 AND EQ PUSH2 0xB43 JUMPI PUSH1 0x80 PUSH16 0xFF973B41FA98C081472E6896DFB254C0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP4 AND EQ PUSH2 0xB68 JUMPI PUSH1 0x80 PUSH16 0xFF2EA16466C96A3843EC78B326B52861 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 AND EQ PUSH2 0xB8D JUMPI PUSH1 0x80 PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP4 AND EQ PUSH2 0xBB3 JUMPI PUSH1 0x80 PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP4 AND EQ PUSH2 0xBD9 JUMPI PUSH1 0x80 PUSH16 0xF987A7253AC413176F2B074CF7815E54 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x400 DUP4 AND EQ PUSH2 0xBFF JUMPI PUSH1 0x80 PUSH16 0xF3392B0822B70005940C7A398E4B70F3 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x800 DUP4 AND EQ PUSH2 0xC25 JUMPI PUSH1 0x80 PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x1000 DUP4 AND EQ PUSH2 0xC4B JUMPI PUSH1 0x80 PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x2000 DUP4 AND EQ PUSH2 0xC71 JUMPI PUSH1 0x80 PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x4000 DUP4 AND EQ PUSH2 0xC97 JUMPI PUSH1 0x80 PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x8000 DUP4 AND EQ PUSH2 0xCBD JUMPI PUSH1 0x80 PUSH16 0x31BE135F97D08FD981231505542FCFA6 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x10000 DUP4 AND EQ PUSH2 0xCE4 JUMPI PUSH1 0x80 PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x20000 DUP4 AND EQ PUSH2 0xD0A JUMPI PUSH1 0x80 PUSH15 0x5D6AF8DEDB81196699C329225EE604 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x40000 DUP4 AND EQ PUSH2 0xD2F JUMPI PUSH1 0x80 PUSH14 0x2216E584F5FA1EA926041BEDFE98 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x80000 DUP4 AND EQ PUSH2 0xD52 JUMPI PUSH1 0x80 PUSH12 0x48A170391F7DC42444E8FA2 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0xD8B JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 PUSH2 0xD87 JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH1 0x0 PUSH5 0x100000000 DUP3 DUP2 PUSH2 0xD9B JUMPI INVALID JUMPDEST MOD EQ PUSH2 0xDA8 JUMPI PUSH1 0x1 PUSH2 0xDAB JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0xDF8 JUMPI PUSH1 0x0 DUP5 GT PUSH2 0xDEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 DIV SWAP3 POP POP POP PUSH2 0xE90 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0xE04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH1 0x0 DUP6 DUP7 PUSH1 0x0 SUB AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH1 0x0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH1 0x0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xEA6 DUP2 PUSH2 0x1052 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xEBB DUP2 PUSH2 0x1069 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xED0 DUP2 PUSH2 0x1080 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xEEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEF9 DUP7 DUP3 DUP8 ADD PUSH2 0xE97 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xF0A DUP7 DUP3 DUP8 ADD PUSH2 0xEAC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xF1B DUP7 DUP3 DUP8 ADD PUSH2 0xEC1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xF2E DUP2 PUSH2 0xFEA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF41 PUSH1 0xD DUP4 PUSH2 0xFD9 JUMP JUMPDEST SWAP2 POP PUSH32 0x696E76616C696420746F6B656E00000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF7D DUP2 PUSH2 0x1038 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xF98 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF25 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFB7 DUP2 PUSH2 0xF34 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFD3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF74 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF5 DUP3 PUSH2 0x1018 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x105B DUP2 PUSH2 0xFEA JUMP JUMPDEST DUP2 EQ PUSH2 0x1066 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1072 DUP2 PUSH2 0xFFC JUMP JUMPDEST DUP2 EQ PUSH2 0x107D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1089 DUP2 PUSH2 0x1042 JUMP JUMPDEST DUP2 EQ PUSH2 0x1094 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0xB1 0xBF PUSH16 0x132AC2B87431CCD1F49839B1FCD2C7B8 0xD5 PUSH17 0x68D3570F626BE403196F64736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "530:949:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;561:31;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;635:29;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;988:489;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;598:31;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;561;;;:::o;635:29::-;;;:::o;988:489::-;1121:14;1164:6;1155:15;;:7;:15;;;:34;;;;1183:6;1174:15;;:7;:15;;;1155:34;1147:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;1216:16;1242:6;1233:15;;:7;:15;;;:31;;1258:6;1233:31;;;1251:6;1233:31;1216:48;;1276:10;1289:38;1311:4;1316:10;1289:21;:38::i;:::-;1275:52;;;1349:121;1391:4;1409:8;1431:7;1452:8;1349:28;:121::i;:::-;1337:133;;988:489;;;;;;;:::o;598:31::-;;;:::o;885:1227:10:-;982:24;1008:29;1075:1;1061:10;:15;;;;1053:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1094:27;1137:1;1124:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1094:45;;1166:10;1149:11;1161:1;1149:14;;;;;;;;;;;;;:27;;;;;;;;;;;1203:1;1186:11;1198:1;1186:14;;;;;;;;;;;;;:18;;;;;;;;;;;1216:30;1248:51;1330:4;1315:28;;;1344:11;1315:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1215:141;;;;1367:26;1417:15;1433:1;1417:18;;;;;;;;;;;;;;1396:15;1412:1;1396:18;;;;;;;;;;;;;;:39;1367:68;;1445:43;1543:34;1578:1;1543:37;;;;;;;;;;;;;;1503:34;1538:1;1503:37;;;;;;;;;;;;;;:77;1445:135;;1641:10;1618:33;;:20;:33;;;;;;;;1591:61;;1734:1;1711:20;:24;;;:68;;;;;1777:1;1763:10;1740:33;;:20;:33;;;;;;;;:38;;;;1711:68;1707:94;;;1781:20;;;;;;;;1707:94;1929:22;1976:17;1954:39;;1962:10;1954:19;;:39;1929:64;;2101:2;2061:35;2053:44;;:50;;;;2035:69;;:14;:69;;;;;;;;2003:102;;885:1227;;;;;;;;;;;:::o;2616:955::-;2772:19;2803:20;2826:33;2854:4;2826:27;:33::i;:::-;2803:56;;2994:17;2978:33;;:12;:33;;;2974:591;;3027:17;3071:12;3047:36;;3055:12;3047:21;;:36;3027:56;;3123:10;3111:22;;:9;:22;;;:156;;3219:48;3235:8;3245:10;3219:48;;3257:9;3219:15;:48::i;:::-;3111:156;;;3152:48;3168:9;3179:10;3152:48;;3191:8;3152:15;:48::i;:::-;3111:156;3097:170;;2974:591;;;;3298:17;3318:52;3334:12;3318:52;;3348:12;3318:52;;3362:7;3318:15;:52::i;:::-;3298:72;;3410:10;3398:22;;:9;:22;;;:156;;3506:48;3522:8;3532:10;3506:48;;3544:9;3506:15;:48::i;:::-;3398:156;;;3439:48;3455:9;3466:10;3439:48;;3478:8;3439:15;:48::i;:::-;3398:156;3384:170;;2974:591;;2616:955;;;;;;;:::o;1362:2580:9:-;1425:20;1457:15;1482:1;1475:4;:8;;;:57;;1526:4;1519:12;;1475:57;;;1502:4;1495:12;;1494:13;;1475:57;1457:75;;484:7;644:9;;1561:17;;1550:7;:28;;1542:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1595:13;1628:1;1621:3;1611:7;:13;:18;;:93;;1669:35;1611:93;;;1632:34;1611:93;1595:109;;;;1735:1;1728:3;1718:7;:13;:18;1714:83;;1794:3;1755:34;1747:5;:42;1746:51;;1738:59;;1714:83;1828:1;1821:3;1811:7;:13;:18;1807:83;;1887:3;1848:34;1840:5;:42;1839:51;;1831:59;;1807:83;1921:1;1914:3;1904:7;:13;:18;1900:83;;1980:3;1941:34;1933:5;:42;1932:51;;1924:59;;1900:83;2015:1;2007:4;1997:7;:14;:19;1993:84;;2074:3;2035:34;2027:5;:42;2026:51;;2018:59;;1993:84;2109:1;2101:4;2091:7;:14;:19;2087:84;;2168:3;2129:34;2121:5;:42;2120:51;;2112:59;;2087:84;2203:1;2195:4;2185:7;:14;:19;2181:84;;2262:3;2223:34;2215:5;:42;2214:51;;2206:59;;2181:84;2297:1;2289:4;2279:7;:14;:19;2275:84;;2356:3;2317:34;2309:5;:42;2308:51;;2300:59;;2275:84;2392:1;2383:5;2373:7;:15;:20;2369:85;;2451:3;2412:34;2404:5;:42;2403:51;;2395:59;;2369:85;2487:1;2478:5;2468:7;:15;:20;2464:85;;2546:3;2507:34;2499:5;:42;2498:51;;2490:59;;2464:85;2582:1;2573:5;2563:7;:15;:20;2559:85;;2641:3;2602:34;2594:5;:42;2593:51;;2585:59;;2559:85;2677:1;2668:5;2658:7;:15;:20;2654:85;;2736:3;2697:34;2689:5;:42;2688:51;;2680:59;;2654:85;2773:1;2763:6;2753:7;:16;:21;2749:86;;2832:3;2793:34;2785:5;:42;2784:51;;2776:59;;2749:86;2869:1;2859:6;2849:7;:16;:21;2845:86;;2928:3;2889:34;2881:5;:42;2880:51;;2872:59;;2845:86;2965:1;2955:6;2945:7;:16;:21;2941:86;;3024:3;2985:34;2977:5;:42;2976:51;;2968:59;;2941:86;3061:1;3051:6;3041:7;:16;:21;3037:86;;3120:3;3081:34;3073:5;:42;3072:51;;3064:59;;3037:86;3158:1;3147:7;3137;:17;:22;3133:86;;3216:3;3178:33;3170:5;:41;3169:50;;3161:58;;3133:86;3254:1;3243:7;3233;:17;:22;3229:85;;3311:3;3274:32;3266:5;:40;3265:49;;3257:57;;3229:85;3349:1;3338:7;3328;:17;:22;3324:83;;3404:3;3369:30;3361:5;:38;3360:47;;3352:55;;3324:83;3442:1;3431:7;3421;:17;:22;3417:78;;3492:3;3462:25;3454:5;:33;3453:42;;3445:50;;3417:78;3517:1;3510:4;:8;;;3506:47;;;3548:5;3528:17;:25;;;;;;3520:33;;3506:47;3924:1;3912:7;3903:5;:17;;;;;;:22;:30;;3932:1;3903:30;;;3928:1;3903:30;3886:48;;3896:2;3887:5;:11;;3886:48;3863:72;;1362:2580;;;;;:::o;749:3776:8:-;861:14;1190:13;1258;1375:1;1371:6;1368:1;1365;1358:20;1407:1;1404;1400:9;1391:18;;1458:5;1454:2;1451:13;1443:5;1439:2;1435:14;1431:34;1422:43;;1334:141;1556:1;1547:5;:10;1543:179;;;1595:1;1581:11;:15;1573:24;;;;;;1659:11;1652:5;1648:23;1638:33;;1698:13;;;;1543:179;1849:5;1835:11;:19;1827:28;;;;;;2132:17;2208:11;2205:1;2202;2195:25;2182:38;;2351:5;2340:9;2337:20;2330:5;2326:32;2317:41;;2391:9;2384:5;2380:21;2371:30;;2560:12;2590:11;2576;2575:12;;:26;2560:41;;2712:4;2699:11;2695:22;2680:37;;2834:4;2827:5;2823:16;2814:25;;3088:1;3081:4;3074;3071:1;3067:12;3063:23;3059:31;3051:39;;3126:4;3118:5;:12;3109:21;;;;3464:11;3498:1;3483:11;3479:1;:15;3478:21;3464:35;;3739:3;3725:11;:17;3721:1;:21;3714:28;;;;3797:3;3783:11;:17;3779:1;:21;3772:28;;;;3856:3;3842:11;:17;3838:1;:21;3831:28;;;;3915:3;3901:11;:17;3897:1;:21;3890:28;;;;3974:3;3960:11;:17;3956:1;:21;3949:28;;;;4034:3;4020:11;:17;4016:1;:21;4009:28;;;;4492:3;4484:5;:11;4475:20;;4505:13;;;;;749:3776;;;;;;:::o;7:139:12:-;;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;59:87;;;;:::o;152:139::-;;236:6;223:20;214:29;;252:33;279:5;252:33;:::i;:::-;204:87;;;;:::o;297:137::-;;380:6;367:20;358:29;;396:32;422:5;396:32;:::i;:::-;348:86;;;;:::o;440:550::-;;;;581:2;569:9;560:7;556:23;552:32;549:2;;;597:1;594;587:12;549:2;640:1;665:53;710:7;701:6;690:9;686:22;665:53;:::i;:::-;655:63;;611:117;767:2;793:53;838:7;829:6;818:9;814:22;793:53;:::i;:::-;783:63;;738:118;895:2;921:52;965:7;956:6;945:9;941:22;921:52;:::i;:::-;911:62;;866:117;539:451;;;;;:::o;996:118::-;1083:24;1101:5;1083:24;:::i;:::-;1078:3;1071:37;1061:53;;:::o;1120:311::-;;1283:67;1347:2;1342:3;1283:67;:::i;:::-;1276:74;;1380:15;1376:1;1371:3;1367:11;1360:36;1422:2;1417:3;1413:12;1406:19;;1266:165;;;:::o;1437:118::-;1524:24;1542:5;1524:24;:::i;:::-;1519:3;1512:37;1502:53;;:::o;1561:222::-;;1692:2;1681:9;1677:18;1669:26;;1705:71;1773:1;1762:9;1758:17;1749:6;1705:71;:::i;:::-;1659:124;;;;:::o;1789:419::-;;1993:2;1982:9;1978:18;1970:26;;2042:9;2036:4;2032:20;2028:1;2017:9;2013:17;2006:47;2070:131;2196:4;2070:131;:::i;:::-;2062:139;;1960:248;;;:::o;2214:222::-;;2345:2;2334:9;2330:18;2322:26;;2358:71;2426:1;2415:9;2411:17;2402:6;2358:71;:::i;:::-;2312:124;;;;:::o;2442:169::-;;2560:6;2555:3;2548:19;2600:4;2595:3;2591:14;2576:29;;2538:73;;;;:::o;2617:96::-;;2683:24;2701:5;2683:24;:::i;:::-;2672:35;;2662:51;;;:::o;2719:118::-;;2796:34;2789:5;2785:46;2774:57;;2764:73;;;:::o;2843:126::-;;2920:42;2913:5;2909:54;2898:65;;2888:81;;;:::o;2975:77::-;;3041:5;3030:16;;3020:32;;;:::o;3058:93::-;;3134:10;3127:5;3123:22;3112:33;;3102:49;;;:::o;3157:122::-;3230:24;3248:5;3230:24;:::i;:::-;3223:5;3220:35;3210:2;;3269:1;3266;3259:12;3210:2;3200:79;:::o;3285:122::-;3358:24;3376:5;3358:24;:::i;:::-;3351:5;3348:35;3338:2;;3397:1;3394;3387:12;3338:2;3328:79;:::o;3413:120::-;3485:23;3502:5;3485:23;:::i;:::-;3478:5;3475:34;3465:2;;3523:1;3520;3513:12;3465:2;3455:78;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "860200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"estimateAmountOut(address,uint128,uint32)": "infinite",
								"pool()": "infinite",
								"token0()": "infinite",
								"token1()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH",
									"source": 11,
									"value": "E0"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 671,
									"end": 982,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 671,
									"end": 982,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 671,
									"end": 982,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 671,
									"end": 982,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "PUSHSIZE",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "CODESIZE",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "PUSHSIZE",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 671,
									"end": 982,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 671,
									"end": 982,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 671,
									"end": 982,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 671,
									"end": 982,
									"name": "tag",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 671,
									"end": 982,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 761,
									"end": 768,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 754,
									"end": 768,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 754,
									"end": 768,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 754,
									"end": 768,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 754,
									"end": 768,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 754,
									"end": 768,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 754,
									"end": 768,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 754,
									"end": 768,
									"name": "PUSH",
									"source": 11,
									"value": "60"
								},
								{
									"begin": 754,
									"end": 768,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 754,
									"end": 768,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 754,
									"end": 768,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 754,
									"end": 768,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 754,
									"end": 768,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 785,
									"end": 792,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 778,
									"end": 792,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 778,
									"end": 792,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 778,
									"end": 792,
									"name": "PUSH",
									"source": 11,
									"value": "A0"
								},
								{
									"begin": 778,
									"end": 792,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 778,
									"end": 792,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 778,
									"end": 792,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 778,
									"end": 792,
									"name": "PUSH",
									"source": 11,
									"value": "60"
								},
								{
									"begin": 778,
									"end": 792,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 778,
									"end": 792,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 778,
									"end": 792,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 778,
									"end": 792,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 778,
									"end": 792,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 803,
									"end": 816,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 835,
									"end": 843,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 817,
									"end": 852,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 817,
									"end": 852,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 817,
									"end": 852,
									"name": "PUSH",
									"source": 11,
									"value": "1698EE82"
								},
								{
									"begin": 866,
									"end": 873,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 874,
									"end": 881,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 882,
									"end": 886,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFF"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH",
									"source": 11,
									"value": "E0"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "6"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "7"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "tag",
									"source": 11,
									"value": "6"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "EXTCODESIZE",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "8"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "tag",
									"source": 11,
									"value": "8"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "GAS",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "STATICCALL",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "10"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "RETURNDATASIZE",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "RETURNDATACOPY",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "RETURNDATASIZE",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "tag",
									"source": 11,
									"value": "10"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "RETURNDATASIZE",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "11"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 817,
									"end": 896,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "12"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "tag",
									"source": 11,
									"value": "11"
								},
								{
									"begin": 817,
									"end": 896,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 803,
									"end": 896,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 803,
									"end": 896,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 929,
									"end": 930,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 914,
									"end": 931,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 914,
									"end": 931,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 914,
									"end": 919,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 914,
									"end": 931,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 914,
									"end": 931,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 914,
									"end": 931,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 914,
									"end": 931,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "13"
								},
								{
									"begin": 906,
									"end": 955,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 906,
									"end": 955,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "PUSH",
									"source": 11,
									"value": "8C379A000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 906,
									"end": 955,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 906,
									"end": 955,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "14"
								},
								{
									"begin": 906,
									"end": 955,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "15"
								},
								{
									"begin": 906,
									"end": 955,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 906,
									"end": 955,
									"name": "tag",
									"source": 11,
									"value": "14"
								},
								{
									"begin": 906,
									"end": 955,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 906,
									"end": 955,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 906,
									"end": 955,
									"name": "tag",
									"source": 11,
									"value": "13"
								},
								{
									"begin": 906,
									"end": 955,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 970,
									"end": 975,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 965,
									"end": 975,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 965,
									"end": 975,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 965,
									"end": 975,
									"name": "PUSH",
									"source": 11,
									"value": "C0"
								},
								{
									"begin": 965,
									"end": 975,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 965,
									"end": 975,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 965,
									"end": 975,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 965,
									"end": 975,
									"name": "PUSH",
									"source": 11,
									"value": "60"
								},
								{
									"begin": 965,
									"end": 975,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 965,
									"end": 975,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 965,
									"end": 975,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 965,
									"end": 975,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 965,
									"end": 975,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 671,
									"end": 982,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 7,
									"end": 150,
									"name": "tag",
									"source": 12,
									"value": "18"
								},
								{
									"begin": 7,
									"end": 150,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 7,
									"end": 150,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 95,
									"end": 101,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 89,
									"end": 102,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 80,
									"end": 102,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 80,
									"end": 102,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 111,
									"end": 144,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 138,
									"end": 143,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 111,
									"end": 144,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "21"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "tag",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 70,
									"end": 150,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 70,
									"end": 150,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 70,
									"end": 150,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 70,
									"end": 150,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 70,
									"end": 150,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 156,
									"end": 297,
									"name": "tag",
									"source": 12,
									"value": "22"
								},
								{
									"begin": 156,
									"end": 297,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 156,
									"end": 297,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 243,
									"end": 249,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 237,
									"end": 250,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 228,
									"end": 250,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 228,
									"end": 250,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 259,
									"end": 291,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 285,
									"end": 290,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 259,
									"end": 291,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "25"
								},
								{
									"begin": 259,
									"end": 291,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 259,
									"end": 291,
									"name": "tag",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 259,
									"end": 291,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 218,
									"end": 297,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 218,
									"end": 297,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 218,
									"end": 297,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 218,
									"end": 297,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 218,
									"end": 297,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 303,
									"end": 587,
									"name": "tag",
									"source": 12,
									"value": "12"
								},
								{
									"begin": 303,
									"end": 587,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 303,
									"end": 587,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 422,
									"end": 424,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 410,
									"end": 419,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 401,
									"end": 408,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 397,
									"end": 420,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 393,
									"end": 425,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 390,
									"end": 392,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 390,
									"end": 392,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "27"
								},
								{
									"begin": 390,
									"end": 392,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 438,
									"end": 439,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 435,
									"end": 436,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 428,
									"end": 440,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 390,
									"end": 392,
									"name": "tag",
									"source": 12,
									"value": "27"
								},
								{
									"begin": 390,
									"end": 392,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 481,
									"end": 482,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 506,
									"end": 570,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 562,
									"end": 569,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 553,
									"end": 559,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 542,
									"end": 551,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 538,
									"end": 560,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 506,
									"end": 570,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "18"
								},
								{
									"begin": 506,
									"end": 570,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 506,
									"end": 570,
									"name": "tag",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 506,
									"end": 570,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 496,
									"end": 570,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 496,
									"end": 570,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 452,
									"end": 580,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 380,
									"end": 587,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 380,
									"end": 587,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 380,
									"end": 587,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 380,
									"end": 587,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 380,
									"end": 587,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 593,
									"end": 1344,
									"name": "tag",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 593,
									"end": 1344,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 593,
									"end": 1344,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 593,
									"end": 1344,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 593,
									"end": 1344,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 593,
									"end": 1344,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 762,
									"end": 765,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 750,
									"end": 759,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 741,
									"end": 748,
									"name": "DUP8",
									"source": 12
								},
								{
									"begin": 737,
									"end": 760,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 733,
									"end": 766,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 730,
									"end": 732,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 730,
									"end": 732,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 730,
									"end": 732,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 779,
									"end": 780,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 776,
									"end": 777,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 769,
									"end": 781,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 730,
									"end": 732,
									"name": "tag",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 730,
									"end": 732,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 822,
									"end": 823,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 847,
									"end": 911,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "31"
								},
								{
									"begin": 903,
									"end": 910,
									"name": "DUP8",
									"source": 12
								},
								{
									"begin": 894,
									"end": 900,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 883,
									"end": 892,
									"name": "DUP9",
									"source": 12
								},
								{
									"begin": 879,
									"end": 901,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 847,
									"end": 911,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "18"
								},
								{
									"begin": 847,
									"end": 911,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 847,
									"end": 911,
									"name": "tag",
									"source": 12,
									"value": "31"
								},
								{
									"begin": 847,
									"end": 911,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 837,
									"end": 911,
									"name": "SWAP5",
									"source": 12
								},
								{
									"begin": 837,
									"end": 911,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 793,
									"end": 921,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 960,
									"end": 962,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 986,
									"end": 1050,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "32"
								},
								{
									"begin": 1042,
									"end": 1049,
									"name": "DUP8",
									"source": 12
								},
								{
									"begin": 1033,
									"end": 1039,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1022,
									"end": 1031,
									"name": "DUP9",
									"source": 12
								},
								{
									"begin": 1018,
									"end": 1040,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 986,
									"end": 1050,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "18"
								},
								{
									"begin": 986,
									"end": 1050,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 986,
									"end": 1050,
									"name": "tag",
									"source": 12,
									"value": "32"
								},
								{
									"begin": 986,
									"end": 1050,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 976,
									"end": 1050,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 976,
									"end": 1050,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 931,
									"end": 1060,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1099,
									"end": 1101,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1125,
									"end": 1189,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "33"
								},
								{
									"begin": 1181,
									"end": 1188,
									"name": "DUP8",
									"source": 12
								},
								{
									"begin": 1172,
									"end": 1178,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1170,
									"name": "DUP9",
									"source": 12
								},
								{
									"begin": 1157,
									"end": 1179,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1125,
									"end": 1189,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "18"
								},
								{
									"begin": 1125,
									"end": 1189,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1125,
									"end": 1189,
									"name": "tag",
									"source": 12,
									"value": "33"
								},
								{
									"begin": 1125,
									"end": 1189,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1115,
									"end": 1189,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 1115,
									"end": 1189,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1070,
									"end": 1199,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1238,
									"end": 1240,
									"name": "PUSH",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 1264,
									"end": 1327,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 1319,
									"end": 1326,
									"name": "DUP8",
									"source": 12
								},
								{
									"begin": 1310,
									"end": 1316,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1299,
									"end": 1308,
									"name": "DUP9",
									"source": 12
								},
								{
									"begin": 1295,
									"end": 1317,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1264,
									"end": 1327,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "22"
								},
								{
									"begin": 1264,
									"end": 1327,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1264,
									"end": 1327,
									"name": "tag",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 1264,
									"end": 1327,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1254,
									"end": 1327,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1254,
									"end": 1327,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1209,
									"end": 1337,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 720,
									"end": 1344,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 720,
									"end": 1344,
									"name": "SWAP6",
									"source": 12
								},
								{
									"begin": 720,
									"end": 1344,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 720,
									"end": 1344,
									"name": "SWAP5",
									"source": 12
								},
								{
									"begin": 720,
									"end": 1344,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 720,
									"end": 1344,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 720,
									"end": 1344,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 720,
									"end": 1344,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1350,
									"end": 1468,
									"name": "tag",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 1350,
									"end": 1468,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1437,
									"end": 1461,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "37"
								},
								{
									"begin": 1455,
									"end": 1460,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1437,
									"end": 1461,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "38"
								},
								{
									"begin": 1437,
									"end": 1461,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1437,
									"end": 1461,
									"name": "tag",
									"source": 12,
									"value": "37"
								},
								{
									"begin": 1437,
									"end": 1461,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1432,
									"end": 1435,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1425,
									"end": 1462,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1415,
									"end": 1468,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1415,
									"end": 1468,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1415,
									"end": 1468,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1474,
									"end": 1792,
									"name": "tag",
									"source": 12,
									"value": "39"
								},
								{
									"begin": 1474,
									"end": 1792,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1474,
									"end": 1792,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1637,
									"end": 1704,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 1701,
									"end": 1703,
									"name": "PUSH",
									"source": 12,
									"value": "14"
								},
								{
									"begin": 1696,
									"end": 1699,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1637,
									"end": 1704,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "42"
								},
								{
									"begin": 1637,
									"end": 1704,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1637,
									"end": 1704,
									"name": "tag",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 1637,
									"end": 1704,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1630,
									"end": 1704,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1630,
									"end": 1704,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1734,
									"end": 1756,
									"name": "PUSH",
									"source": 12,
									"value": "506F6F6C7320646F6573206E6F74206578697374000000000000000000000000"
								},
								{
									"begin": 1730,
									"end": 1731,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1725,
									"end": 1728,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1721,
									"end": 1732,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1714,
									"end": 1757,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1783,
									"end": 1785,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1778,
									"end": 1781,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1774,
									"end": 1786,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1767,
									"end": 1786,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1767,
									"end": 1786,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1620,
									"end": 1792,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1620,
									"end": 1792,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1620,
									"end": 1792,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1620,
									"end": 1792,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1798,
									"end": 1913,
									"name": "tag",
									"source": 12,
									"value": "43"
								},
								{
									"begin": 1798,
									"end": 1913,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1883,
									"end": 1906,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "45"
								},
								{
									"begin": 1900,
									"end": 1905,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1883,
									"end": 1906,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "46"
								},
								{
									"begin": 1883,
									"end": 1906,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1883,
									"end": 1906,
									"name": "tag",
									"source": 12,
									"value": "45"
								},
								{
									"begin": 1883,
									"end": 1906,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1878,
									"end": 1881,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1871,
									"end": 1907,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1861,
									"end": 1913,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1861,
									"end": 1913,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1861,
									"end": 1913,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1919,
									"end": 2357,
									"name": "tag",
									"source": 12,
									"value": "7"
								},
								{
									"begin": 1919,
									"end": 2357,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1919,
									"end": 2357,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2104,
									"end": 2106,
									"name": "PUSH",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 2093,
									"end": 2102,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2089,
									"end": 2107,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2081,
									"end": 2107,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2081,
									"end": 2107,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2117,
									"end": 2188,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "48"
								},
								{
									"begin": 2185,
									"end": 2186,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2174,
									"end": 2183,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2170,
									"end": 2187,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2161,
									"end": 2167,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 2117,
									"end": 2188,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 2117,
									"end": 2188,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2117,
									"end": 2188,
									"name": "tag",
									"source": 12,
									"value": "48"
								},
								{
									"begin": 2117,
									"end": 2188,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2198,
									"end": 2270,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "49"
								},
								{
									"begin": 2266,
									"end": 2268,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2255,
									"end": 2264,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2251,
									"end": 2269,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2242,
									"end": 2248,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 2198,
									"end": 2270,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 2198,
									"end": 2270,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2198,
									"end": 2270,
									"name": "tag",
									"source": 12,
									"value": "49"
								},
								{
									"begin": 2198,
									"end": 2270,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2280,
									"end": 2350,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "50"
								},
								{
									"begin": 2346,
									"end": 2348,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 2335,
									"end": 2344,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2331,
									"end": 2349,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2322,
									"end": 2328,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2280,
									"end": 2350,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "43"
								},
								{
									"begin": 2280,
									"end": 2350,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2280,
									"end": 2350,
									"name": "tag",
									"source": 12,
									"value": "50"
								},
								{
									"begin": 2280,
									"end": 2350,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2071,
									"end": 2357,
									"name": "SWAP5",
									"source": 12
								},
								{
									"begin": 2071,
									"end": 2357,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 2071,
									"end": 2357,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2071,
									"end": 2357,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2071,
									"end": 2357,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2071,
									"end": 2357,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2071,
									"end": 2357,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 2363,
									"end": 2782,
									"name": "tag",
									"source": 12,
									"value": "15"
								},
								{
									"begin": 2363,
									"end": 2782,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2363,
									"end": 2782,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2567,
									"end": 2569,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2556,
									"end": 2565,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2552,
									"end": 2570,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2544,
									"end": 2570,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2544,
									"end": 2570,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2616,
									"end": 2625,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2610,
									"end": 2614,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2606,
									"end": 2626,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 2602,
									"end": 2603,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2591,
									"end": 2600,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2587,
									"end": 2604,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2580,
									"end": 2627,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2644,
									"end": 2775,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "52"
								},
								{
									"begin": 2770,
									"end": 2774,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2644,
									"end": 2775,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "39"
								},
								{
									"begin": 2644,
									"end": 2775,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2644,
									"end": 2775,
									"name": "tag",
									"source": 12,
									"value": "52"
								},
								{
									"begin": 2644,
									"end": 2775,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2636,
									"end": 2775,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2636,
									"end": 2775,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2534,
									"end": 2782,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2534,
									"end": 2782,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2534,
									"end": 2782,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2534,
									"end": 2782,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 2788,
									"end": 2957,
									"name": "tag",
									"source": 12,
									"value": "42"
								},
								{
									"begin": 2788,
									"end": 2957,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2788,
									"end": 2957,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2906,
									"end": 2912,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2901,
									"end": 2904,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2894,
									"end": 2913,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2946,
									"end": 2950,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2941,
									"end": 2944,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2937,
									"end": 2951,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2922,
									"end": 2951,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2922,
									"end": 2951,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2884,
									"end": 2957,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 2884,
									"end": 2957,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2884,
									"end": 2957,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2884,
									"end": 2957,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2884,
									"end": 2957,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 2963,
									"end": 3059,
									"name": "tag",
									"source": 12,
									"value": "38"
								},
								{
									"begin": 2963,
									"end": 3059,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2963,
									"end": 3059,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3029,
									"end": 3053,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "55"
								},
								{
									"begin": 3047,
									"end": 3052,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3029,
									"end": 3053,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "56"
								},
								{
									"begin": 3029,
									"end": 3053,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 3029,
									"end": 3053,
									"name": "tag",
									"source": 12,
									"value": "55"
								},
								{
									"begin": 3029,
									"end": 3053,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3018,
									"end": 3053,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3018,
									"end": 3053,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3008,
									"end": 3059,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3008,
									"end": 3059,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3008,
									"end": 3059,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3008,
									"end": 3059,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 3065,
									"end": 3191,
									"name": "tag",
									"source": 12,
									"value": "56"
								},
								{
									"begin": 3065,
									"end": 3191,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3065,
									"end": 3191,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3142,
									"end": 3184,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3135,
									"end": 3140,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3131,
									"end": 3185,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 3120,
									"end": 3185,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3120,
									"end": 3185,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3110,
									"end": 3191,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3110,
									"end": 3191,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3110,
									"end": 3191,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3110,
									"end": 3191,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 3197,
									"end": 3288,
									"name": "tag",
									"source": 12,
									"value": "46"
								},
								{
									"begin": 3197,
									"end": 3288,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3197,
									"end": 3288,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3273,
									"end": 3281,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFF"
								},
								{
									"begin": 3266,
									"end": 3271,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3262,
									"end": 3282,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 3251,
									"end": 3282,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3251,
									"end": 3282,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3241,
									"end": 3288,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3241,
									"end": 3288,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3241,
									"end": 3288,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3241,
									"end": 3288,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 3294,
									"end": 3416,
									"name": "tag",
									"source": 12,
									"value": "21"
								},
								{
									"begin": 3294,
									"end": 3416,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3367,
									"end": 3391,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 3385,
									"end": 3390,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3367,
									"end": 3391,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "38"
								},
								{
									"begin": 3367,
									"end": 3391,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 3367,
									"end": 3391,
									"name": "tag",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 3367,
									"end": 3391,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3360,
									"end": 3365,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3357,
									"end": 3392,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 3347,
									"end": 3349,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "61"
								},
								{
									"begin": 3347,
									"end": 3349,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 3406,
									"end": 3407,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3403,
									"end": 3404,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3396,
									"end": 3408,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 3347,
									"end": 3349,
									"name": "tag",
									"source": 12,
									"value": "61"
								},
								{
									"begin": 3347,
									"end": 3349,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3337,
									"end": 3416,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3337,
									"end": 3416,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 3422,
									"end": 3542,
									"name": "tag",
									"source": 12,
									"value": "25"
								},
								{
									"begin": 3422,
									"end": 3542,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3494,
									"end": 3517,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "63"
								},
								{
									"begin": 3511,
									"end": 3516,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3494,
									"end": 3517,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "46"
								},
								{
									"begin": 3494,
									"end": 3517,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 3494,
									"end": 3517,
									"name": "tag",
									"source": 12,
									"value": "63"
								},
								{
									"begin": 3494,
									"end": 3517,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3487,
									"end": 3492,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3484,
									"end": 3518,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 3474,
									"end": 3476,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "64"
								},
								{
									"begin": 3474,
									"end": 3476,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 3532,
									"end": 3533,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3529,
									"end": 3530,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3522,
									"end": 3534,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 3474,
									"end": 3476,
									"name": "tag",
									"source": 12,
									"value": "64"
								},
								{
									"begin": 3474,
									"end": 3476,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3464,
									"end": 3542,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3464,
									"end": 3542,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "tag",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH",
									"source": 11,
									"value": "60"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH",
									"source": 11,
									"value": "A0"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH",
									"source": 11,
									"value": "60"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH",
									"source": 11,
									"value": "C0"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH",
									"source": 11,
									"value": "60"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "ASSIGNIMMUTABLE",
									"source": 11,
									"value": "1832"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "ASSIGNIMMUTABLE",
									"source": 11,
									"value": "1830"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "ASSIGNIMMUTABLE",
									"source": 11,
									"value": "1828"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 1479,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a9b1bf6f132ac2b87431ccd1f49839b1fcd2c7b8d57068d3570f626be403196f64736f6c63430007060033",
									".code": [
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "tag",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "DFE1681"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "16F0115B"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "8F2E8199"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "D21220A7"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "tag",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 530,
											"end": 1479,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "tag",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 561,
											"end": 592,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 561,
											"end": 592,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 561,
											"end": 592,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 561,
											"end": 592,
											"name": "tag",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 561,
											"end": 592,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 561,
											"end": 592,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 561,
											"end": 592,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 561,
											"end": 592,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 561,
											"end": 592,
											"name": "tag",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 561,
											"end": 592,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 561,
											"end": 592,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "tag",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "tag",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "tag",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "tag",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "tag",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "tag",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "tag",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "tag",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "tag",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "tag",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "tag",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 561,
											"end": 592,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1828"
										},
										{
											"begin": 561,
											"end": 592,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 561,
											"end": 592,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "tag",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1832"
										},
										{
											"begin": 635,
											"end": 664,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 635,
											"end": 664,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "tag",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1164,
											"end": 1170,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1828"
										},
										{
											"begin": 1155,
											"end": 1170,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1155,
											"end": 1170,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1155,
											"end": 1162,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1155,
											"end": 1170,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1155,
											"end": 1170,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1155,
											"end": 1170,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1155,
											"end": 1189,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1155,
											"end": 1189,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 1155,
											"end": 1189,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1155,
											"end": 1189,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1183,
											"end": 1189,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1830"
										},
										{
											"begin": 1174,
											"end": 1189,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1174,
											"end": 1189,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1174,
											"end": 1181,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1174,
											"end": 1189,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1174,
											"end": 1189,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1174,
											"end": 1189,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1155,
											"end": 1189,
											"name": "tag",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 1155,
											"end": 1189,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "PUSH",
											"source": 11,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "tag",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "tag",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 1147,
											"end": 1206,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1216,
											"end": 1232,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1242,
											"end": 1248,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1828"
										},
										{
											"begin": 1233,
											"end": 1248,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1233,
											"end": 1248,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1233,
											"end": 1240,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1233,
											"end": 1248,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1233,
											"end": 1248,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1233,
											"end": 1248,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1233,
											"end": 1264,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 1233,
											"end": 1264,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1258,
											"end": 1264,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1828"
										},
										{
											"begin": 1233,
											"end": 1264,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 1233,
											"end": 1264,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1233,
											"end": 1264,
											"name": "tag",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 1233,
											"end": 1264,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1251,
											"end": 1257,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1830"
										},
										{
											"begin": 1233,
											"end": 1264,
											"name": "tag",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 1233,
											"end": 1264,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1216,
											"end": 1264,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1216,
											"end": 1264,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1276,
											"end": 1286,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1289,
											"end": 1327,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 1311,
											"end": 1315,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1832"
										},
										{
											"begin": 1316,
											"end": 1326,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1289,
											"end": 1310,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 1289,
											"end": 1327,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1289,
											"end": 1327,
											"name": "tag",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 1289,
											"end": 1327,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1327,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1327,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1275,
											"end": 1327,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1349,
											"end": 1470,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 1391,
											"end": 1395,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1409,
											"end": 1417,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1431,
											"end": 1438,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 1452,
											"end": 1460,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1349,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 1349,
											"end": 1470,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1349,
											"end": 1470,
											"name": "tag",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 1349,
											"end": 1470,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1337,
											"end": 1470,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1337,
											"end": 1470,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1477,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "tag",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "PUSHIMMUTABLE",
											"source": 11,
											"value": "1830"
										},
										{
											"begin": 598,
											"end": 629,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 598,
											"end": 629,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "tag",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 982,
											"end": 1006,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1008,
											"end": 1037,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1075,
											"end": 1076,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1061,
											"end": 1071,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1061,
											"end": 1076,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1061,
											"end": 1076,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1061,
											"end": 1076,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1061,
											"end": 1076,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "35"
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "PUSH",
											"source": 10,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "PUSH",
											"source": 10,
											"value": "4250000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "tag",
											"source": 10,
											"value": "35"
										},
										{
											"begin": 1053,
											"end": 1083,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1094,
											"end": 1121,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1137,
											"end": 1138,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "tag",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "CALLDATACOPY",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "tag",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1124,
											"end": 1139,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1094,
											"end": 1139,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1094,
											"end": 1139,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1166,
											"end": 1176,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1160,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1161,
											"end": 1162,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "38"
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "INVALID",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "tag",
											"source": 10,
											"value": "38"
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1163,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1176,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1176,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1149,
											"end": 1176,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1176,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1176,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1176,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1149,
											"end": 1176,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1176,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1176,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1176,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1149,
											"end": 1176,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1203,
											"end": 1204,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1186,
											"end": 1197,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1198,
											"end": 1199,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "INVALID",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "tag",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1200,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1204,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1204,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1186,
											"end": 1204,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1204,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1204,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1204,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1186,
											"end": 1204,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1204,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1204,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1204,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1186,
											"end": 1204,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1216,
											"end": 1246,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1248,
											"end": 1299,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1330,
											"end": 1334,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1343,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1315,
											"end": 1343,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1343,
											"name": "PUSH",
											"source": 10,
											"value": "883BDBFD"
										},
										{
											"begin": 1344,
											"end": 1355,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "STATICCALL",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "46"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "46"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "100000000"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "100000000"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "100000000"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "100000000"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "55"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "55"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "56"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "56"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "tag",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1315,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1215,
											"end": 1356,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1215,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1215,
											"end": 1356,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1215,
											"end": 1356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1367,
											"end": 1393,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1417,
											"end": 1432,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1433,
											"end": 1434,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "59"
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "INVALID",
											"source": 10
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "tag",
											"source": 10,
											"value": "59"
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1396,
											"end": 1411,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1413,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "INVALID",
											"source": 10
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "tag",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1396,
											"end": 1414,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1396,
											"end": 1435,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1367,
											"end": 1435,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1367,
											"end": 1435,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1445,
											"end": 1488,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1543,
											"end": 1577,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1578,
											"end": 1579,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "INVALID",
											"source": 10
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "tag",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1543,
											"end": 1580,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1537,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1538,
											"end": 1539,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "INVALID",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "tag",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1540,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1580,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1445,
											"end": 1580,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1445,
											"end": 1580,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1641,
											"end": 1651,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 1618,
											"end": 1651,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1618,
											"end": 1651,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1618,
											"end": 1638,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1618,
											"end": 1651,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 1618,
											"end": 1651,
											"name": "SIGNEXTEND",
											"source": 10
										},
										{
											"begin": 1618,
											"end": 1651,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1618,
											"end": 1651,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 1618,
											"end": 1651,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1618,
											"end": 1651,
											"name": "INVALID",
											"source": 10
										},
										{
											"begin": 1618,
											"end": 1651,
											"name": "tag",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 1618,
											"end": 1651,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1618,
											"end": 1651,
											"name": "SDIV",
											"source": 10
										},
										{
											"begin": 1591,
											"end": 1652,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 1591,
											"end": 1652,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1734,
											"end": 1735,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1711,
											"end": 1731,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1711,
											"end": 1735,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 1711,
											"end": 1735,
											"name": "SIGNEXTEND",
											"source": 10
										},
										{
											"begin": 1711,
											"end": 1735,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1711,
											"end": 1779,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1711,
											"end": 1779,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1711,
											"end": 1779,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 1711,
											"end": 1779,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1711,
											"end": 1779,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1777,
											"end": 1778,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1763,
											"end": 1773,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 1740,
											"end": 1773,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1740,
											"end": 1773,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1740,
											"end": 1760,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1740,
											"end": 1773,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 1740,
											"end": 1773,
											"name": "SIGNEXTEND",
											"source": 10
										},
										{
											"begin": 1740,
											"end": 1773,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1740,
											"end": 1773,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 1740,
											"end": 1773,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1740,
											"end": 1773,
											"name": "INVALID",
											"source": 10
										},
										{
											"begin": 1740,
											"end": 1773,
											"name": "tag",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 1740,
											"end": 1773,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1740,
											"end": 1773,
											"name": "SMOD",
											"source": 10
										},
										{
											"begin": 1740,
											"end": 1778,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 1740,
											"end": 1778,
											"name": "SIGNEXTEND",
											"source": 10
										},
										{
											"begin": 1740,
											"end": 1778,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1740,
											"end": 1778,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1711,
											"end": 1779,
											"name": "tag",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 1711,
											"end": 1779,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1707,
											"end": 1801,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1707,
											"end": 1801,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 1707,
											"end": 1801,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1781,
											"end": 1801,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1781,
											"end": 1801,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1781,
											"end": 1801,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1781,
											"end": 1801,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1781,
											"end": 1801,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1781,
											"end": 1801,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 1781,
											"end": 1801,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1781,
											"end": 1801,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1707,
											"end": 1801,
											"name": "tag",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 1707,
											"end": 1801,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1929,
											"end": 1951,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1976,
											"end": 1993,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1954,
											"end": 1993,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1954,
											"end": 1993,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1962,
											"end": 1972,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 1954,
											"end": 1973,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1954,
											"end": 1973,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1954,
											"end": 1993,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1929,
											"end": 1993,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1929,
											"end": 1993,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2101,
											"end": 2103,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2061,
											"end": 2096,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2053,
											"end": 2097,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2053,
											"end": 2097,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2053,
											"end": 2103,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2053,
											"end": 2103,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2053,
											"end": 2103,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2053,
											"end": 2103,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 2035,
											"end": 2104,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2035,
											"end": 2104,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2035,
											"end": 2049,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2035,
											"end": 2104,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2035,
											"end": 2104,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2035,
											"end": 2104,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2035,
											"end": 2104,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 2035,
											"end": 2104,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2035,
											"end": 2104,
											"name": "INVALID",
											"source": 10
										},
										{
											"begin": 2035,
											"end": 2104,
											"name": "tag",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 2035,
											"end": 2104,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2035,
											"end": 2104,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 2003,
											"end": 2105,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 2003,
											"end": 2105,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 885,
											"end": 2112,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2616,
											"end": 3571,
											"name": "tag",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 2616,
											"end": 3571,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2772,
											"end": 2791,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2803,
											"end": 2823,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2826,
											"end": 2859,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "69"
										},
										{
											"begin": 2854,
											"end": 2858,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2826,
											"end": 2853,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 2826,
											"end": 2859,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2826,
											"end": 2859,
											"name": "tag",
											"source": 10,
											"value": "69"
										},
										{
											"begin": 2826,
											"end": 2859,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2803,
											"end": 2859,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2803,
											"end": 2859,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2994,
											"end": 3011,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2978,
											"end": 3011,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2978,
											"end": 3011,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2978,
											"end": 2990,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2978,
											"end": 3011,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2978,
											"end": 3011,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2978,
											"end": 3011,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2974,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 2974,
											"end": 3565,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3027,
											"end": 3044,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3071,
											"end": 3083,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3047,
											"end": 3083,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3047,
											"end": 3083,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3055,
											"end": 3067,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3047,
											"end": 3068,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3047,
											"end": 3068,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3047,
											"end": 3083,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 3027,
											"end": 3083,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3027,
											"end": 3083,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3123,
											"end": 3133,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3111,
											"end": 3133,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3111,
											"end": 3133,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3111,
											"end": 3120,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3111,
											"end": 3133,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3111,
											"end": 3133,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3111,
											"end": 3133,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 3111,
											"end": 3267,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 3111,
											"end": 3267,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3219,
											"end": 3267,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 3235,
											"end": 3243,
											"name": "PUSH",
											"source": 10,
											"value": "1000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3245,
											"end": 3255,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3219,
											"end": 3267,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3219,
											"end": 3267,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3257,
											"end": 3266,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3219,
											"end": 3234,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 3219,
											"end": 3267,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3219,
											"end": 3267,
											"name": "tag",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 3219,
											"end": 3267,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3111,
											"end": 3267,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "75"
										},
										{
											"begin": 3111,
											"end": 3267,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3111,
											"end": 3267,
											"name": "tag",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 3111,
											"end": 3267,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3152,
											"end": 3200,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 3168,
											"end": 3177,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3179,
											"end": 3189,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3152,
											"end": 3200,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3152,
											"end": 3200,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3191,
											"end": 3199,
											"name": "PUSH",
											"source": 10,
											"value": "1000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3152,
											"end": 3167,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 3152,
											"end": 3200,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3152,
											"end": 3200,
											"name": "tag",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 3152,
											"end": 3200,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3111,
											"end": 3267,
											"name": "tag",
											"source": 10,
											"value": "75"
										},
										{
											"begin": 3111,
											"end": 3267,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3097,
											"end": 3267,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3097,
											"end": 3267,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2974,
											"end": 3565,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2974,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "77"
										},
										{
											"begin": 2974,
											"end": 3565,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2974,
											"end": 3565,
											"name": "tag",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 2974,
											"end": 3565,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3298,
											"end": 3315,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3318,
											"end": 3370,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 3334,
											"end": 3346,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3318,
											"end": 3370,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3318,
											"end": 3370,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3348,
											"end": 3360,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3318,
											"end": 3370,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3318,
											"end": 3370,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3362,
											"end": 3369,
											"name": "PUSH",
											"source": 10,
											"value": "10000000000000000"
										},
										{
											"begin": 3318,
											"end": 3333,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 3318,
											"end": 3370,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3318,
											"end": 3370,
											"name": "tag",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 3318,
											"end": 3370,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3298,
											"end": 3370,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3298,
											"end": 3370,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3410,
											"end": 3420,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3398,
											"end": 3420,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3398,
											"end": 3420,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3398,
											"end": 3407,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3398,
											"end": 3420,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3398,
											"end": 3420,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3398,
											"end": 3420,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 3398,
											"end": 3554,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 3398,
											"end": 3554,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3506,
											"end": 3554,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 3522,
											"end": 3530,
											"name": "PUSH",
											"source": 10,
											"value": "100000000000000000000000000000000"
										},
										{
											"begin": 3532,
											"end": 3542,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3506,
											"end": 3554,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3506,
											"end": 3554,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3544,
											"end": 3553,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3506,
											"end": 3521,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 3506,
											"end": 3554,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3506,
											"end": 3554,
											"name": "tag",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 3506,
											"end": 3554,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3398,
											"end": 3554,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "81"
										},
										{
											"begin": 3398,
											"end": 3554,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3398,
											"end": 3554,
											"name": "tag",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 3398,
											"end": 3554,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3439,
											"end": 3487,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 3455,
											"end": 3464,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3466,
											"end": 3476,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3439,
											"end": 3487,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3439,
											"end": 3487,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3478,
											"end": 3486,
											"name": "PUSH",
											"source": 10,
											"value": "100000000000000000000000000000000"
										},
										{
											"begin": 3439,
											"end": 3454,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 3439,
											"end": 3487,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3439,
											"end": 3487,
											"name": "tag",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 3439,
											"end": 3487,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3398,
											"end": 3554,
											"name": "tag",
											"source": 10,
											"value": "81"
										},
										{
											"begin": 3398,
											"end": 3554,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3384,
											"end": 3554,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3384,
											"end": 3554,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2974,
											"end": 3565,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2974,
											"end": 3565,
											"name": "tag",
											"source": 10,
											"value": "77"
										},
										{
											"begin": 2974,
											"end": 3565,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2616,
											"end": 3571,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2616,
											"end": 3571,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 2616,
											"end": 3571,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 2616,
											"end": 3571,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2616,
											"end": 3571,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2616,
											"end": 3571,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2616,
											"end": 3571,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2616,
											"end": 3571,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "tag",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1425,
											"end": 1445,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1457,
											"end": 1472,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1482,
											"end": 1483,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1475,
											"end": 1479,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1483,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1475,
											"end": 1483,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1483,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1526,
											"end": 1530,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1519,
											"end": 1531,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1519,
											"end": 1531,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "tag",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1502,
											"end": 1506,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 1494,
											"end": 1507,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1494,
											"end": 1507,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "tag",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1457,
											"end": 1532,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1457,
											"end": 1532,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 484,
											"end": 491,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27618"
										},
										{
											"begin": 644,
											"end": 653,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 644,
											"end": 653,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1561,
											"end": 1578,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1561,
											"end": 1578,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 1550,
											"end": 1557,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1550,
											"end": 1578,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1550,
											"end": 1578,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "5400000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "tag",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1595,
											"end": 1608,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1628,
											"end": 1629,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1621,
											"end": 1624,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1611,
											"end": 1618,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1624,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1629,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1629,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1669,
											"end": 1704,
											"name": "PUSH",
											"source": 9,
											"value": "100000000000000000000000000000000"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "tag",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1632,
											"end": 1666,
											"name": "PUSH",
											"source": 9,
											"value": "FFFCB933BD6FAD37AA2D162D1A594001"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "tag",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1735,
											"end": 1736,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1728,
											"end": 1731,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1718,
											"end": 1725,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1718,
											"end": 1731,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1718,
											"end": 1736,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1797,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1755,
											"end": 1789,
											"name": "PUSH",
											"source": 9,
											"value": "FFF97272373D413259A46990580E213A"
										},
										{
											"begin": 1747,
											"end": 1752,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1747,
											"end": 1789,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 1746,
											"end": 1797,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1746,
											"end": 1797,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 1738,
											"end": 1797,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1738,
											"end": 1797,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "tag",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1828,
											"end": 1829,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1821,
											"end": 1824,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1811,
											"end": 1818,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1811,
											"end": 1824,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1811,
											"end": 1829,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1887,
											"end": 1890,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1848,
											"end": 1882,
											"name": "PUSH",
											"source": 9,
											"value": "FFF2E50F5F656932EF12357CF3C7FDCC"
										},
										{
											"begin": 1840,
											"end": 1845,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1840,
											"end": 1882,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 1839,
											"end": 1890,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1839,
											"end": 1890,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 1831,
											"end": 1890,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1831,
											"end": 1890,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "tag",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1921,
											"end": 1922,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1914,
											"end": 1917,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 1904,
											"end": 1911,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1904,
											"end": 1917,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1904,
											"end": 1922,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1980,
											"end": 1983,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1941,
											"end": 1975,
											"name": "PUSH",
											"source": 9,
											"value": "FFE5CACA7E10E4E61C3624EAA0941CD0"
										},
										{
											"begin": 1933,
											"end": 1938,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1933,
											"end": 1975,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 1932,
											"end": 1983,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1932,
											"end": 1983,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 1924,
											"end": 1983,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1924,
											"end": 1983,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "tag",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2015,
											"end": 2016,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2007,
											"end": 2011,
											"name": "PUSH",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 1997,
											"end": 2004,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1997,
											"end": 2011,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1997,
											"end": 2016,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2074,
											"end": 2077,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2035,
											"end": 2069,
											"name": "PUSH",
											"source": 9,
											"value": "FFCB9843D60F6159C9DB58835C926644"
										},
										{
											"begin": 2027,
											"end": 2032,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2027,
											"end": 2069,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2026,
											"end": 2077,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2026,
											"end": 2077,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2018,
											"end": 2077,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2018,
											"end": 2077,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "tag",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2109,
											"end": 2110,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2101,
											"end": 2105,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2091,
											"end": 2098,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2105,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2110,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2168,
											"end": 2171,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2129,
											"end": 2163,
											"name": "PUSH",
											"source": 9,
											"value": "FF973B41FA98C081472E6896DFB254C0"
										},
										{
											"begin": 2121,
											"end": 2126,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2121,
											"end": 2163,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2120,
											"end": 2171,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2120,
											"end": 2171,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2112,
											"end": 2171,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2112,
											"end": 2171,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "tag",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2203,
											"end": 2204,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2195,
											"end": 2199,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2185,
											"end": 2192,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2185,
											"end": 2199,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2185,
											"end": 2204,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2262,
											"end": 2265,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2223,
											"end": 2257,
											"name": "PUSH",
											"source": 9,
											"value": "FF2EA16466C96A3843EC78B326B52861"
										},
										{
											"begin": 2215,
											"end": 2220,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2215,
											"end": 2257,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2214,
											"end": 2265,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2214,
											"end": 2265,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2206,
											"end": 2265,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2206,
											"end": 2265,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "tag",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2297,
											"end": 2298,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2289,
											"end": 2293,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2279,
											"end": 2286,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2279,
											"end": 2293,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2279,
											"end": 2298,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2359,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2317,
											"end": 2351,
											"name": "PUSH",
											"source": 9,
											"value": "FE5DEE046A99A2A811C461F1969C3053"
										},
										{
											"begin": 2309,
											"end": 2314,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2309,
											"end": 2351,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2308,
											"end": 2359,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2308,
											"end": 2359,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2300,
											"end": 2359,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2300,
											"end": 2359,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "tag",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2392,
											"end": 2393,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2383,
											"end": 2388,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2373,
											"end": 2380,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2373,
											"end": 2388,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2373,
											"end": 2393,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2451,
											"end": 2454,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2412,
											"end": 2446,
											"name": "PUSH",
											"source": 9,
											"value": "FCBE86C7900A88AEDCFFC83B479AA3A4"
										},
										{
											"begin": 2404,
											"end": 2409,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2404,
											"end": 2446,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2454,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2403,
											"end": 2454,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2395,
											"end": 2454,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2395,
											"end": 2454,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "tag",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2487,
											"end": 2488,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2478,
											"end": 2483,
											"name": "PUSH",
											"source": 9,
											"value": "200"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2468,
											"end": 2483,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2468,
											"end": 2488,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2546,
											"end": 2549,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2507,
											"end": 2541,
											"name": "PUSH",
											"source": 9,
											"value": "F987A7253AC413176F2B074CF7815E54"
										},
										{
											"begin": 2499,
											"end": 2504,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2499,
											"end": 2541,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2498,
											"end": 2549,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2498,
											"end": 2549,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2490,
											"end": 2549,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2490,
											"end": 2549,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "tag",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2582,
											"end": 2583,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2573,
											"end": 2578,
											"name": "PUSH",
											"source": 9,
											"value": "400"
										},
										{
											"begin": 2563,
											"end": 2570,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2563,
											"end": 2578,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2563,
											"end": 2583,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2641,
											"end": 2644,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "PUSH",
											"source": 9,
											"value": "F3392B0822B70005940C7A398E4B70F3"
										},
										{
											"begin": 2594,
											"end": 2599,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2594,
											"end": 2636,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2593,
											"end": 2644,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2593,
											"end": 2644,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2585,
											"end": 2644,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2585,
											"end": 2644,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "tag",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2677,
											"end": 2678,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2668,
											"end": 2673,
											"name": "PUSH",
											"source": 9,
											"value": "800"
										},
										{
											"begin": 2658,
											"end": 2665,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2658,
											"end": 2673,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2658,
											"end": 2678,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2736,
											"end": 2739,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2697,
											"end": 2731,
											"name": "PUSH",
											"source": 9,
											"value": "E7159475A2C29B7443B29C7FA6E889D9"
										},
										{
											"begin": 2689,
											"end": 2694,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2689,
											"end": 2731,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2688,
											"end": 2739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2688,
											"end": 2739,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2680,
											"end": 2739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2680,
											"end": 2739,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "tag",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2773,
											"end": 2774,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2763,
											"end": 2769,
											"name": "PUSH",
											"source": 9,
											"value": "1000"
										},
										{
											"begin": 2753,
											"end": 2760,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2753,
											"end": 2769,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2753,
											"end": 2774,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2832,
											"end": 2835,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2793,
											"end": 2827,
											"name": "PUSH",
											"source": 9,
											"value": "D097F3BDFD2022B8845AD8F792AA5825"
										},
										{
											"begin": 2785,
											"end": 2790,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2785,
											"end": 2827,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2784,
											"end": 2835,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2784,
											"end": 2835,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2835,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2776,
											"end": 2835,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "tag",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2869,
											"end": 2870,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2859,
											"end": 2865,
											"name": "PUSH",
											"source": 9,
											"value": "2000"
										},
										{
											"begin": 2849,
											"end": 2856,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2849,
											"end": 2865,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2849,
											"end": 2870,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2928,
											"end": 2931,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2889,
											"end": 2923,
											"name": "PUSH",
											"source": 9,
											"value": "A9F746462D870FDF8A65DC1F90E061E5"
										},
										{
											"begin": 2881,
											"end": 2886,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2881,
											"end": 2923,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2880,
											"end": 2931,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2880,
											"end": 2931,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2872,
											"end": 2931,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2872,
											"end": 2931,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "tag",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2965,
											"end": 2966,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2955,
											"end": 2961,
											"name": "PUSH",
											"source": 9,
											"value": "4000"
										},
										{
											"begin": 2945,
											"end": 2952,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2945,
											"end": 2961,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2945,
											"end": 2966,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3024,
											"end": 3027,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2985,
											"end": 3019,
											"name": "PUSH",
											"source": 9,
											"value": "70D869A156D2A1B890BB3DF62BAF32F7"
										},
										{
											"begin": 2977,
											"end": 2982,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2977,
											"end": 3019,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2976,
											"end": 3027,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2976,
											"end": 3027,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2968,
											"end": 3027,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2968,
											"end": 3027,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "tag",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3061,
											"end": 3062,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3051,
											"end": 3057,
											"name": "PUSH",
											"source": 9,
											"value": "8000"
										},
										{
											"begin": 3041,
											"end": 3048,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3041,
											"end": 3057,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3041,
											"end": 3062,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3120,
											"end": 3123,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3081,
											"end": 3115,
											"name": "PUSH",
											"source": 9,
											"value": "31BE135F97D08FD981231505542FCFA6"
										},
										{
											"begin": 3073,
											"end": 3078,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3073,
											"end": 3115,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3072,
											"end": 3123,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3072,
											"end": 3123,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3064,
											"end": 3123,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3064,
											"end": 3123,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "tag",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3158,
											"end": 3159,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3147,
											"end": 3154,
											"name": "PUSH",
											"source": 9,
											"value": "10000"
										},
										{
											"begin": 3137,
											"end": 3144,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3137,
											"end": 3154,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3137,
											"end": 3159,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "104"
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3216,
											"end": 3219,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3178,
											"end": 3211,
											"name": "PUSH",
											"source": 9,
											"value": "9AA508B5B7A84E1C677DE54F3E99BC9"
										},
										{
											"begin": 3170,
											"end": 3175,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3170,
											"end": 3211,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3169,
											"end": 3219,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3169,
											"end": 3219,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3161,
											"end": 3219,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3161,
											"end": 3219,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "tag",
											"source": 9,
											"value": "104"
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3254,
											"end": 3255,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3243,
											"end": 3250,
											"name": "PUSH",
											"source": 9,
											"value": "20000"
										},
										{
											"begin": 3233,
											"end": 3240,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3233,
											"end": 3250,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3233,
											"end": 3255,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3311,
											"end": 3314,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3274,
											"end": 3306,
											"name": "PUSH",
											"source": 9,
											"value": "5D6AF8DEDB81196699C329225EE604"
										},
										{
											"begin": 3266,
											"end": 3271,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3266,
											"end": 3306,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3265,
											"end": 3314,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3265,
											"end": 3314,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3257,
											"end": 3314,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3257,
											"end": 3314,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "tag",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3349,
											"end": 3350,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3338,
											"end": 3345,
											"name": "PUSH",
											"source": 9,
											"value": "40000"
										},
										{
											"begin": 3328,
											"end": 3335,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3328,
											"end": 3345,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3328,
											"end": 3350,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3404,
											"end": 3407,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3369,
											"end": 3399,
											"name": "PUSH",
											"source": 9,
											"value": "2216E584F5FA1EA926041BEDFE98"
										},
										{
											"begin": 3361,
											"end": 3366,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3361,
											"end": 3399,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3360,
											"end": 3407,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3360,
											"end": 3407,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3352,
											"end": 3407,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3352,
											"end": 3407,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "tag",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3442,
											"end": 3443,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3431,
											"end": 3438,
											"name": "PUSH",
											"source": 9,
											"value": "80000"
										},
										{
											"begin": 3421,
											"end": 3428,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3438,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "107"
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3492,
											"end": 3495,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3462,
											"end": 3487,
											"name": "PUSH",
											"source": 9,
											"value": "48A170391F7DC42444E8FA2"
										},
										{
											"begin": 3454,
											"end": 3459,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3454,
											"end": 3487,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3453,
											"end": 3495,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3453,
											"end": 3495,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3445,
											"end": 3495,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3445,
											"end": 3495,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "tag",
											"source": 9,
											"value": "107"
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3517,
											"end": 3518,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3510,
											"end": 3514,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3518,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3510,
											"end": 3518,
											"name": "SIGNEXTEND",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3518,
											"name": "SGT",
											"source": 9
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3548,
											"end": 3553,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3545,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "INVALID",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "tag",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3553,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3520,
											"end": 3553,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "tag",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3924,
											"end": 3925,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3912,
											"end": 3919,
											"name": "PUSH",
											"source": 9,
											"value": "100000000"
										},
										{
											"begin": 3903,
											"end": 3908,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "INVALID",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "tag",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "MOD",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3925,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3932,
											"end": 3933,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "tag",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3928,
											"end": 3929,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "tag",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3886,
											"end": 3934,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 3886,
											"end": 3934,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3896,
											"end": 3898,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3887,
											"end": 3892,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3887,
											"end": 3898,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3887,
											"end": 3898,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 3886,
											"end": 3934,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3863,
											"end": 3935,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3863,
											"end": 3935,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "tag",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 861,
											"end": 875,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1190,
											"end": 1203,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1258,
											"end": 1271,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1375,
											"end": 1376,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1371,
											"end": 1377,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1368,
											"end": 1369,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1365,
											"end": 1366,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1358,
											"end": 1378,
											"name": "MULMOD",
											"source": 8
										},
										{
											"begin": 1407,
											"end": 1408,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1404,
											"end": 1405,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1400,
											"end": 1409,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1409,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1409,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1458,
											"end": 1463,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1454,
											"end": 1456,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1451,
											"end": 1464,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1443,
											"end": 1448,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1439,
											"end": 1441,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1435,
											"end": 1449,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1431,
											"end": 1465,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1422,
											"end": 1465,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1422,
											"end": 1465,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1334,
											"end": 1475,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1556,
											"end": 1557,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1547,
											"end": 1552,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1547,
											"end": 1557,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1543,
											"end": 1722,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1543,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "114"
										},
										{
											"begin": 1543,
											"end": 1722,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1595,
											"end": 1596,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1581,
											"end": 1592,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1581,
											"end": 1596,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "115"
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "tag",
											"source": 8,
											"value": "115"
										},
										{
											"begin": 1573,
											"end": 1597,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1659,
											"end": 1670,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1652,
											"end": 1657,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1648,
											"end": 1671,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1638,
											"end": 1671,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1638,
											"end": 1671,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1698,
											"end": 1711,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1698,
											"end": 1711,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1698,
											"end": 1711,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 1698,
											"end": 1711,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1543,
											"end": 1722,
											"name": "tag",
											"source": 8,
											"value": "114"
										},
										{
											"begin": 1543,
											"end": 1722,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1849,
											"end": 1854,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1835,
											"end": 1846,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1835,
											"end": 1854,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "tag",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 1827,
											"end": 1855,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2132,
											"end": 2149,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2208,
											"end": 2219,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2205,
											"end": 2206,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2202,
											"end": 2203,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 2195,
											"end": 2220,
											"name": "MULMOD",
											"source": 8
										},
										{
											"begin": 2182,
											"end": 2220,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2182,
											"end": 2220,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2351,
											"end": 2356,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2340,
											"end": 2349,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2337,
											"end": 2357,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2330,
											"end": 2335,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2326,
											"end": 2358,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2317,
											"end": 2358,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2317,
											"end": 2358,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2391,
											"end": 2400,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2384,
											"end": 2389,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2380,
											"end": 2401,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2371,
											"end": 2401,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2371,
											"end": 2401,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2560,
											"end": 2572,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2590,
											"end": 2601,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2576,
											"end": 2587,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2575,
											"end": 2587,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2575,
											"end": 2587,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2575,
											"end": 2601,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2560,
											"end": 2601,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2560,
											"end": 2601,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2712,
											"end": 2716,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2699,
											"end": 2710,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2695,
											"end": 2717,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 2680,
											"end": 2717,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 2680,
											"end": 2717,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2834,
											"end": 2838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2827,
											"end": 2832,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2823,
											"end": 2839,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 2814,
											"end": 2839,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2814,
											"end": 2839,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3088,
											"end": 3089,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 3081,
											"end": 3085,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3074,
											"end": 3078,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3071,
											"end": 3072,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3067,
											"end": 3079,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3063,
											"end": 3086,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 3059,
											"end": 3090,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3051,
											"end": 3090,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3051,
											"end": 3090,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3126,
											"end": 3130,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3118,
											"end": 3123,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3118,
											"end": 3130,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3109,
											"end": 3130,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3109,
											"end": 3130,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 3109,
											"end": 3130,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3109,
											"end": 3130,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3464,
											"end": 3475,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3498,
											"end": 3499,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3483,
											"end": 3494,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3479,
											"end": 3480,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 3479,
											"end": 3494,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3478,
											"end": 3499,
											"name": "XOR",
											"source": 8
										},
										{
											"begin": 3464,
											"end": 3499,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3464,
											"end": 3499,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3739,
											"end": 3742,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3725,
											"end": 3736,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3725,
											"end": 3742,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3721,
											"end": 3722,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3721,
											"end": 3742,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3714,
											"end": 3742,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3714,
											"end": 3742,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3714,
											"end": 3742,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3714,
											"end": 3742,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3797,
											"end": 3800,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3783,
											"end": 3794,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3783,
											"end": 3800,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3779,
											"end": 3780,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3779,
											"end": 3800,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3772,
											"end": 3800,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3772,
											"end": 3800,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3772,
											"end": 3800,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3772,
											"end": 3800,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3856,
											"end": 3859,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3842,
											"end": 3853,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3842,
											"end": 3859,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3838,
											"end": 3839,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3838,
											"end": 3859,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3831,
											"end": 3859,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3831,
											"end": 3859,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3831,
											"end": 3859,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3831,
											"end": 3859,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3915,
											"end": 3918,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3901,
											"end": 3912,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3901,
											"end": 3918,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3897,
											"end": 3898,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3897,
											"end": 3918,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3890,
											"end": 3918,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3890,
											"end": 3918,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3890,
											"end": 3918,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3890,
											"end": 3918,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3974,
											"end": 3977,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3960,
											"end": 3971,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3960,
											"end": 3977,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3956,
											"end": 3957,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3956,
											"end": 3977,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3949,
											"end": 3977,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3949,
											"end": 3977,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3949,
											"end": 3977,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3949,
											"end": 3977,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4034,
											"end": 4037,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4020,
											"end": 4031,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4020,
											"end": 4037,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 4016,
											"end": 4017,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 4016,
											"end": 4037,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4009,
											"end": 4037,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4009,
											"end": 4037,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 4009,
											"end": 4037,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4009,
											"end": 4037,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4492,
											"end": 4495,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4484,
											"end": 4489,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4484,
											"end": 4495,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 4475,
											"end": 4495,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 4475,
											"end": 4495,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4505,
											"end": 4518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4505,
											"end": 4518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4505,
											"end": 4518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4505,
											"end": 4518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4505,
											"end": 4518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "tag",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 749,
											"end": 4525,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 12,
											"value": "118"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7,
											"end": 146,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 59,
											"end": 146,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 59,
											"end": 146,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 59,
											"end": 146,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 59,
											"end": 146,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 59,
											"end": 146,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 291,
											"name": "tag",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 152,
											"end": 291,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 152,
											"end": 291,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 236,
											"end": 242,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 223,
											"end": 243,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 214,
											"end": 243,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 214,
											"end": 243,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 252,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 279,
											"end": 284,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 252,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "tag",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 252,
											"end": 285,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 204,
											"end": 291,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 204,
											"end": 291,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 204,
											"end": 291,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 204,
											"end": 291,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 204,
											"end": 291,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 297,
											"end": 434,
											"name": "tag",
											"source": 12,
											"value": "126"
										},
										{
											"begin": 297,
											"end": 434,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 297,
											"end": 434,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 380,
											"end": 386,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 367,
											"end": 387,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 358,
											"end": 387,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 358,
											"end": 387,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 396,
											"end": 428,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "128"
										},
										{
											"begin": 422,
											"end": 427,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 396,
											"end": 428,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "129"
										},
										{
											"begin": 396,
											"end": 428,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 396,
											"end": 428,
											"name": "tag",
											"source": 12,
											"value": "128"
										},
										{
											"begin": 396,
											"end": 428,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 348,
											"end": 434,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 348,
											"end": 434,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 348,
											"end": 434,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 348,
											"end": 434,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 348,
											"end": 434,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 440,
											"end": 990,
											"name": "tag",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 440,
											"end": 990,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 440,
											"end": 990,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 440,
											"end": 990,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 440,
											"end": 990,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 581,
											"end": 583,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 569,
											"end": 578,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 560,
											"end": 567,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 556,
											"end": 579,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 552,
											"end": 584,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 549,
											"end": 551,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 549,
											"end": 551,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "131"
										},
										{
											"begin": 549,
											"end": 551,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 597,
											"end": 598,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 594,
											"end": 595,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 587,
											"end": 599,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 549,
											"end": 551,
											"name": "tag",
											"source": 12,
											"value": "131"
										},
										{
											"begin": 549,
											"end": 551,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 640,
											"end": 641,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 665,
											"end": 718,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "132"
										},
										{
											"begin": 710,
											"end": 717,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 701,
											"end": 707,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 690,
											"end": 699,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 686,
											"end": 708,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 665,
											"end": 718,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "118"
										},
										{
											"begin": 665,
											"end": 718,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 665,
											"end": 718,
											"name": "tag",
											"source": 12,
											"value": "132"
										},
										{
											"begin": 665,
											"end": 718,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 655,
											"end": 718,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 655,
											"end": 718,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 611,
											"end": 728,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 767,
											"end": 769,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 793,
											"end": 846,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "133"
										},
										{
											"begin": 838,
											"end": 845,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 829,
											"end": 835,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 818,
											"end": 827,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 814,
											"end": 836,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 793,
											"end": 846,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 793,
											"end": 846,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 793,
											"end": 846,
											"name": "tag",
											"source": 12,
											"value": "133"
										},
										{
											"begin": 793,
											"end": 846,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 783,
											"end": 846,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 783,
											"end": 846,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 738,
											"end": 856,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 895,
											"end": 897,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 921,
											"end": 973,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "134"
										},
										{
											"begin": 965,
											"end": 972,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 956,
											"end": 962,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 945,
											"end": 954,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 941,
											"end": 963,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 921,
											"end": 973,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "126"
										},
										{
											"begin": 921,
											"end": 973,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 921,
											"end": 973,
											"name": "tag",
											"source": 12,
											"value": "134"
										},
										{
											"begin": 921,
											"end": 973,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 911,
											"end": 973,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 911,
											"end": 973,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 866,
											"end": 983,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 539,
											"end": 990,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 539,
											"end": 990,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 539,
											"end": 990,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 539,
											"end": 990,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 539,
											"end": 990,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 539,
											"end": 990,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 996,
											"end": 1114,
											"name": "tag",
											"source": 12,
											"value": "135"
										},
										{
											"begin": 996,
											"end": 1114,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1083,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "137"
										},
										{
											"begin": 1101,
											"end": 1106,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1083,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 1083,
											"end": 1107,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1083,
											"end": 1107,
											"name": "tag",
											"source": 12,
											"value": "137"
										},
										{
											"begin": 1083,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1078,
											"end": 1081,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1071,
											"end": 1108,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1061,
											"end": 1114,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1061,
											"end": 1114,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1061,
											"end": 1114,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1120,
											"end": 1431,
											"name": "tag",
											"source": 12,
											"value": "139"
										},
										{
											"begin": 1120,
											"end": 1431,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1120,
											"end": 1431,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1283,
											"end": 1350,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "141"
										},
										{
											"begin": 1347,
											"end": 1349,
											"name": "PUSH",
											"source": 12,
											"value": "D"
										},
										{
											"begin": 1342,
											"end": 1345,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1283,
											"end": 1350,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "142"
										},
										{
											"begin": 1283,
											"end": 1350,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1283,
											"end": 1350,
											"name": "tag",
											"source": 12,
											"value": "141"
										},
										{
											"begin": 1283,
											"end": 1350,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1276,
											"end": 1350,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1276,
											"end": 1350,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1380,
											"end": 1395,
											"name": "PUSH",
											"source": 12,
											"value": "696E76616C696420746F6B656E00000000000000000000000000000000000000"
										},
										{
											"begin": 1376,
											"end": 1377,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1371,
											"end": 1374,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1367,
											"end": 1378,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1360,
											"end": 1396,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1422,
											"end": 1424,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1417,
											"end": 1420,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1413,
											"end": 1425,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1406,
											"end": 1425,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1406,
											"end": 1425,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1266,
											"end": 1431,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1266,
											"end": 1431,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1266,
											"end": 1431,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1266,
											"end": 1431,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1437,
											"end": 1555,
											"name": "tag",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 1437,
											"end": 1555,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1524,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "145"
										},
										{
											"begin": 1542,
											"end": 1547,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1524,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "146"
										},
										{
											"begin": 1524,
											"end": 1548,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1524,
											"end": 1548,
											"name": "tag",
											"source": 12,
											"value": "145"
										},
										{
											"begin": 1524,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1519,
											"end": 1522,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1512,
											"end": 1549,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1502,
											"end": 1555,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1502,
											"end": 1555,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1502,
											"end": 1555,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1561,
											"end": 1783,
											"name": "tag",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 1561,
											"end": 1783,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1561,
											"end": 1783,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1692,
											"end": 1694,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1681,
											"end": 1690,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1677,
											"end": 1695,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1669,
											"end": 1695,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1669,
											"end": 1695,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1705,
											"end": 1776,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "148"
										},
										{
											"begin": 1773,
											"end": 1774,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1762,
											"end": 1771,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1758,
											"end": 1775,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1749,
											"end": 1755,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1705,
											"end": 1776,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "135"
										},
										{
											"begin": 1705,
											"end": 1776,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1705,
											"end": 1776,
											"name": "tag",
											"source": 12,
											"value": "148"
										},
										{
											"begin": 1705,
											"end": 1776,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1659,
											"end": 1783,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1659,
											"end": 1783,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1659,
											"end": 1783,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1659,
											"end": 1783,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1659,
											"end": 1783,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1789,
											"end": 2208,
											"name": "tag",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 1789,
											"end": 2208,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1789,
											"end": 2208,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1993,
											"end": 1995,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1982,
											"end": 1991,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1978,
											"end": 1996,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1970,
											"end": 1996,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1970,
											"end": 1996,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2042,
											"end": 2051,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2036,
											"end": 2040,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2032,
											"end": 2052,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2028,
											"end": 2029,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2017,
											"end": 2026,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2013,
											"end": 2030,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2006,
											"end": 2053,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2070,
											"end": 2201,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "150"
										},
										{
											"begin": 2196,
											"end": 2200,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2070,
											"end": 2201,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "139"
										},
										{
											"begin": 2070,
											"end": 2201,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2070,
											"end": 2201,
											"name": "tag",
											"source": 12,
											"value": "150"
										},
										{
											"begin": 2070,
											"end": 2201,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2062,
											"end": 2201,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2062,
											"end": 2201,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1960,
											"end": 2208,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1960,
											"end": 2208,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1960,
											"end": 2208,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1960,
											"end": 2208,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2214,
											"end": 2436,
											"name": "tag",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 2214,
											"end": 2436,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2214,
											"end": 2436,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2345,
											"end": 2347,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2334,
											"end": 2343,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2330,
											"end": 2348,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2322,
											"end": 2348,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2322,
											"end": 2348,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2358,
											"end": 2429,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "152"
										},
										{
											"begin": 2426,
											"end": 2427,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2415,
											"end": 2424,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2411,
											"end": 2428,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2402,
											"end": 2408,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2358,
											"end": 2429,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 2358,
											"end": 2429,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2358,
											"end": 2429,
											"name": "tag",
											"source": 12,
											"value": "152"
										},
										{
											"begin": 2358,
											"end": 2429,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2312,
											"end": 2436,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2312,
											"end": 2436,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2312,
											"end": 2436,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2312,
											"end": 2436,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2312,
											"end": 2436,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2442,
											"end": 2611,
											"name": "tag",
											"source": 12,
											"value": "142"
										},
										{
											"begin": 2442,
											"end": 2611,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2442,
											"end": 2611,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2560,
											"end": 2566,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2555,
											"end": 2558,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2548,
											"end": 2567,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2600,
											"end": 2604,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2598,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2591,
											"end": 2605,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2576,
											"end": 2605,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2576,
											"end": 2605,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2538,
											"end": 2611,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2538,
											"end": 2611,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2538,
											"end": 2611,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2538,
											"end": 2611,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2538,
											"end": 2611,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2617,
											"end": 2713,
											"name": "tag",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 2617,
											"end": 2713,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2617,
											"end": 2713,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2683,
											"end": 2707,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 2701,
											"end": 2706,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2683,
											"end": 2707,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "156"
										},
										{
											"begin": 2683,
											"end": 2707,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2683,
											"end": 2707,
											"name": "tag",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 2683,
											"end": 2707,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2672,
											"end": 2707,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2672,
											"end": 2707,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2662,
											"end": 2713,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2662,
											"end": 2713,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2662,
											"end": 2713,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2662,
											"end": 2713,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2719,
											"end": 2837,
											"name": "tag",
											"source": 12,
											"value": "157"
										},
										{
											"begin": 2719,
											"end": 2837,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2719,
											"end": 2837,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2796,
											"end": 2830,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2789,
											"end": 2794,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2785,
											"end": 2831,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2774,
											"end": 2831,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2774,
											"end": 2831,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2764,
											"end": 2837,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2764,
											"end": 2837,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2764,
											"end": 2837,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2764,
											"end": 2837,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2843,
											"end": 2969,
											"name": "tag",
											"source": 12,
											"value": "156"
										},
										{
											"begin": 2843,
											"end": 2969,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2843,
											"end": 2969,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2920,
											"end": 2962,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2913,
											"end": 2918,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2909,
											"end": 2963,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2898,
											"end": 2963,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2898,
											"end": 2963,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2888,
											"end": 2969,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2888,
											"end": 2969,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2888,
											"end": 2969,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2888,
											"end": 2969,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2975,
											"end": 3052,
											"name": "tag",
											"source": 12,
											"value": "146"
										},
										{
											"begin": 2975,
											"end": 3052,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2975,
											"end": 3052,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3041,
											"end": 3046,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3030,
											"end": 3046,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3030,
											"end": 3046,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3020,
											"end": 3052,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3020,
											"end": 3052,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3020,
											"end": 3052,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3020,
											"end": 3052,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3058,
											"end": 3151,
											"name": "tag",
											"source": 12,
											"value": "161"
										},
										{
											"begin": 3058,
											"end": 3151,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3058,
											"end": 3151,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3134,
											"end": 3144,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3127,
											"end": 3132,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3123,
											"end": 3145,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3112,
											"end": 3145,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3112,
											"end": 3145,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3102,
											"end": 3151,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3102,
											"end": 3151,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3102,
											"end": 3151,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3102,
											"end": 3151,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3157,
											"end": 3279,
											"name": "tag",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 3157,
											"end": 3279,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "164"
										},
										{
											"begin": 3248,
											"end": 3253,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "tag",
											"source": 12,
											"value": "164"
										},
										{
											"begin": 3230,
											"end": 3254,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3223,
											"end": 3228,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3220,
											"end": 3255,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 3210,
											"end": 3212,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "165"
										},
										{
											"begin": 3210,
											"end": 3212,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3269,
											"end": 3270,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3266,
											"end": 3267,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3259,
											"end": 3271,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3210,
											"end": 3212,
											"name": "tag",
											"source": 12,
											"value": "165"
										},
										{
											"begin": 3210,
											"end": 3212,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3200,
											"end": 3279,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3200,
											"end": 3279,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3285,
											"end": 3407,
											"name": "tag",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 3285,
											"end": 3407,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3358,
											"end": 3382,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "167"
										},
										{
											"begin": 3376,
											"end": 3381,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3358,
											"end": 3382,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "157"
										},
										{
											"begin": 3358,
											"end": 3382,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3358,
											"end": 3382,
											"name": "tag",
											"source": 12,
											"value": "167"
										},
										{
											"begin": 3358,
											"end": 3382,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3351,
											"end": 3356,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3348,
											"end": 3383,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 3338,
											"end": 3340,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "168"
										},
										{
											"begin": 3338,
											"end": 3340,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3397,
											"end": 3398,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3394,
											"end": 3395,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3387,
											"end": 3399,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3338,
											"end": 3340,
											"name": "tag",
											"source": 12,
											"value": "168"
										},
										{
											"begin": 3338,
											"end": 3340,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3328,
											"end": 3407,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3328,
											"end": 3407,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3413,
											"end": 3533,
											"name": "tag",
											"source": 12,
											"value": "129"
										},
										{
											"begin": 3413,
											"end": 3533,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3485,
											"end": 3508,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "170"
										},
										{
											"begin": 3502,
											"end": 3507,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3485,
											"end": 3508,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "161"
										},
										{
											"begin": 3485,
											"end": 3508,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3485,
											"end": 3508,
											"name": "tag",
											"source": 12,
											"value": "170"
										},
										{
											"begin": 3485,
											"end": 3508,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3478,
											"end": 3483,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3475,
											"end": 3509,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 3465,
											"end": 3467,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "171"
										},
										{
											"begin": 3465,
											"end": 3467,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3523,
											"end": 3524,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3520,
											"end": 3521,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3513,
											"end": 3525,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3465,
											"end": 3467,
											"name": "tag",
											"source": 12,
											"value": "171"
										},
										{
											"begin": 3465,
											"end": 3467,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3455,
											"end": 3533,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3455,
											"end": 3533,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"estimateAmountOut(address,uint128,uint32)": "8f2e8199",
							"pool()": "16f0115b",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountIn\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"secondsAgo\",\"type\":\"uint32\"}],\"name\":\"estimateAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV3Oracle.sol\":\"UniswapV3Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b9379ad954680c44a0bc523b314ae4c4da735f9fe1d02aa56ea5bdba6f1136f2\",\"dweb:/ipfs/QmZXdgQNXKAckrXWz9R3mc47F1fvDvr28a2ewJrwNAw71B\"]},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3874093a6b37d8e68f9475a91f8eb0a1c808cb6153c84cfe6c37909505a4d24e\",\"dweb:/ipfs/QmUqGpQqvSHX4SwUvcBCs9g4ZhR9JPhgD3615oUigAhtjj\"]},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3f3d2d7c2723c91830c74d96292f28fc1cfe28d388cdb9c1a5ebadb4c2b96f81\",\"dweb:/ipfs/QmYU4wk8MEm33wVWR38LoncvR7b8PP1mLuGBKX3dUpYJVE\"]},\"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":{\"keccak256\":\"0xf24785c7c0b8afa39ec0a90d027fefca682ce3540d8448fc0f90075a7e1b92ca\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb1ac49b3b9fccad8ab5b0df0ef502d61ce68114d5c45784d0c61b483349cf78\",\"dweb:/ipfs/QmZky2WujN7H9n2JQWNzTzShcAkG7NGWoJGxTawkd64K4D\"]},\"contracts/UniswapV3Oracle.sol\":{\"keccak256\":\"0xc4dfb5aaf18e9b9cd459dc1f79031c67dc5347942bba00b8b25a528f791354c2\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://9152b4bb4bd67c381261540673c6f2ebf95a8b9816c587b27fb25149f7310caf\",\"dweb:/ipfs/QmPywMrEYyGrFpn5iUa7oKW7xA1VUTAtbyNz2fSkYC7wwZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol",
					"exportedSymbols": {
						"IUniswapV3Factory": [
							82
						]
					},
					"id": 83,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "71:163:0",
								"text": "@title The interface for the Uniswap V3 Factory\n @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees"
							},
							"fullyImplemented": false,
							"id": 82,
							"linearizedBaseContracts": [
								82
							],
							"name": "IUniswapV3Factory",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "268:185:0",
										"text": "@notice Emitted when the owner of the factory is changed\n @param oldOwner The owner before the owner was changed\n @param newOwner The owner after the owner was changed"
									},
									"id": 9,
									"name": "OwnerChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldOwner",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "477:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "477:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "503:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "503:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "476:52:0"
									},
									"src": "458:71:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 10,
										"nodeType": "StructuredDocumentation",
										"src": "535:421:0",
										"text": "@notice Emitted when a pool is created\n @param token0 The first token of the pool by address sort order\n @param token1 The second token of the pool by address sort order\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks\n @param pool The address of the created pool"
									},
									"id": 22,
									"name": "PoolCreated",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "988:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "988:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1020:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1020:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1052:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 15,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1052:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1080:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 17,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1080:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 20,
												"indexed": false,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1107:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1107:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "978:147:0"
									},
									"src": "961:165:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 23,
										"nodeType": "StructuredDocumentation",
										"src": "1132:275:0",
										"text": "@notice Emitted when a new fee amount is enabled for pool creation via the factory\n @param fee The enabled fee, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee"
									},
									"id": 29,
									"name": "FeeAmountEnabled",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "1435:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 24,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1435:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "1455:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 26,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1455:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1434:47:0"
									},
									"src": "1412:70:0"
								},
								{
									"documentation": {
										"id": 30,
										"nodeType": "StructuredDocumentation",
										"src": "1488:163:0",
										"text": "@notice Returns the current owner of the factory\n @dev Can be changed by the current owner via setOwner\n @return The address of the factory owner"
									},
									"functionSelector": "8da5cb5b",
									"id": 35,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1670:2:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1696:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1696:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1695:9:0"
									},
									"scope": 82,
									"src": "1656:49:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 36,
										"nodeType": "StructuredDocumentation",
										"src": "1711:348:0",
										"text": "@notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n @return The tick spacing"
									},
									"functionSelector": "22afcccb",
									"id": 43,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeAmountTickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "2094:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 37,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2094:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2093:12:0"
									},
									"returnParameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "2129:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 40,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2129:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2128:7:0"
									},
									"scope": 82,
									"src": "2064:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 44,
										"nodeType": "StructuredDocumentation",
										"src": "2142:471:0",
										"text": "@notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @return pool The pool address"
									},
									"functionSelector": "1698ee82",
									"id": 55,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2644:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 45,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2644:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2668:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 47,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2692:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 49,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2692:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2634:74:0"
									},
									"returnParameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2732:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 52,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2732:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2731:14:0"
									},
									"scope": 82,
									"src": "2618:128:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 56,
										"nodeType": "StructuredDocumentation",
										"src": "2752:554:0",
										"text": "@notice Creates a pool for the given two tokens and fee\n @param tokenA One of the two tokens in the desired pool\n @param tokenB The other of the two tokens in the desired pool\n @param fee The desired fee for the pool\n @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n are invalid.\n @return pool The address of the newly created pool"
									},
									"functionSelector": "a1671295",
									"id": 67,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3340:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 57,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3340:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3364:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 59,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3388:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 61,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3388:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3330:74:0"
									},
									"returnParameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3423:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3423:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3422:14:0"
									},
									"scope": 82,
									"src": "3311:126:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "3443:144:0",
										"text": "@notice Updates the owner of the factory\n @dev Must be called by the current owner\n @param _owner The new owner of the factory"
									},
									"functionSelector": "13af4035",
									"id": 73,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "3610:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 69,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3610:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3609:16:0"
									},
									"returnParameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3634:0:0"
									},
									"scope": 82,
									"src": "3592:43:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 74,
										"nodeType": "StructuredDocumentation",
										"src": "3641:326:0",
										"text": "@notice Enables a fee amount with the given tickSpacing\n @dev Fee amounts may never be removed once enabled\n @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount"
									},
									"functionSelector": "8a7c195f",
									"id": 81,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "enableFeeAmount",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "3997:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 75,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3997:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "4009:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 77,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4009:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3996:31:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4036:0:0"
									},
									"scope": 82,
									"src": "3972:65:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 83,
							"src": "234:3805:0"
						}
					],
					"src": "45:3995:0"
				},
				"id": 0
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
					"exportedSymbols": {
						"IUniswapV3Pool": [
							104
						],
						"IUniswapV3PoolActions": [
							200
						],
						"IUniswapV3PoolDerivedState": [
							231
						],
						"IUniswapV3PoolEvents": [
							350
						],
						"IUniswapV3PoolImmutables": [
							390
						],
						"IUniswapV3PoolOwnerActions": [
							416
						],
						"IUniswapV3PoolState": [
							524
						]
					},
					"id": 105,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 84,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:1"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
							"file": "./pool/IUniswapV3PoolImmutables.sol",
							"id": 85,
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 391,
							"src": "71:45:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
							"file": "./pool/IUniswapV3PoolState.sol",
							"id": 86,
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 525,
							"src": "117:40:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
							"file": "./pool/IUniswapV3PoolDerivedState.sol",
							"id": 87,
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 232,
							"src": "158:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
							"file": "./pool/IUniswapV3PoolActions.sol",
							"id": 88,
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 201,
							"src": "206:42:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
							"file": "./pool/IUniswapV3PoolOwnerActions.sol",
							"id": 89,
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 417,
							"src": "249:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
							"file": "./pool/IUniswapV3PoolEvents.sol",
							"id": 90,
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 351,
							"src": "297:41:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 92,
										"name": "IUniswapV3PoolImmutables",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 390,
										"src": "637:24:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolImmutables_$390",
											"typeString": "contract IUniswapV3PoolImmutables"
										}
									},
									"id": 93,
									"nodeType": "InheritanceSpecifier",
									"src": "637:24:1"
								},
								{
									"baseName": {
										"id": 94,
										"name": "IUniswapV3PoolState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 524,
										"src": "667:19:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolState_$524",
											"typeString": "contract IUniswapV3PoolState"
										}
									},
									"id": 95,
									"nodeType": "InheritanceSpecifier",
									"src": "667:19:1"
								},
								{
									"baseName": {
										"id": 96,
										"name": "IUniswapV3PoolDerivedState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 231,
										"src": "692:26:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolDerivedState_$231",
											"typeString": "contract IUniswapV3PoolDerivedState"
										}
									},
									"id": 97,
									"nodeType": "InheritanceSpecifier",
									"src": "692:26:1"
								},
								{
									"baseName": {
										"id": 98,
										"name": "IUniswapV3PoolActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 200,
										"src": "724:21:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolActions_$200",
											"typeString": "contract IUniswapV3PoolActions"
										}
									},
									"id": 99,
									"nodeType": "InheritanceSpecifier",
									"src": "724:21:1"
								},
								{
									"baseName": {
										"id": 100,
										"name": "IUniswapV3PoolOwnerActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 416,
										"src": "751:26:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolOwnerActions_$416",
											"typeString": "contract IUniswapV3PoolOwnerActions"
										}
									},
									"id": 101,
									"nodeType": "InheritanceSpecifier",
									"src": "751:26:1"
								},
								{
									"baseName": {
										"id": 102,
										"name": "IUniswapV3PoolEvents",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 350,
										"src": "783:20:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolEvents_$350",
											"typeString": "contract IUniswapV3PoolEvents"
										}
									},
									"id": 103,
									"nodeType": "InheritanceSpecifier",
									"src": "783:20:1"
								}
							],
							"contractDependencies": [
								200,
								231,
								350,
								390,
								416,
								524
							],
							"contractKind": "interface",
							"documentation": {
								"id": 91,
								"nodeType": "StructuredDocumentation",
								"src": "340:265:1",
								"text": "@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								350,
								416,
								200,
								231,
								524,
								390
							],
							"name": "IUniswapV3Pool",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 105,
							"src": "605:203:1"
						}
					],
					"src": "45:764:1"
				},
				"id": 1
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolActions": [
							200
						]
					},
					"id": 201,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 107,
								"nodeType": "StructuredDocumentation",
								"src": "71:102:2",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 200,
							"linearizedBaseContracts": [
								200
							],
							"name": "IUniswapV3PoolActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 108,
										"nodeType": "StructuredDocumentation",
										"src": "211:206:2",
										"text": "@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"
									},
									"functionSelector": "f637731d",
									"id": 113,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "442:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 109,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "442:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:22:2"
									},
									"returnParameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "472:0:2"
									},
									"scope": 200,
									"src": "422:51:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 114,
										"nodeType": "StructuredDocumentation",
										"src": "479:1029:2",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 131,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1536:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1536:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1563:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 117,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1563:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1588:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 119,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1588:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1613:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 121,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1613:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1637:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 123,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1637:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1526:136:2"
									},
									"returnParameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1681:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1681:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "1698:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1680:34:2"
									},
									"scope": 200,
									"src": "1513:202:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 132,
										"nodeType": "StructuredDocumentation",
										"src": "1721:1053:2",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 149,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2805:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2805:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2832:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 135,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2832:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2857:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 137,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2857:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2882:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 139,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2882:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2916:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 141,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2916:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2795:151:2"
									},
									"returnParameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2965:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 144,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2965:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2982:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 146,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2982:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2964:34:2"
									},
									"scope": 200,
									"src": "2779:220:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "3005:631:2",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 163,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3664:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 151,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3664:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3689:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 153,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3689:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3714:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 155,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3714:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3654:80:2"
									},
									"returnParameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3753:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3753:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "3770:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3770:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3752:34:2"
									},
									"scope": 200,
									"src": "3641:146:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 164,
										"nodeType": "StructuredDocumentation",
										"src": "3793:1015:2",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4836:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4863:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 167,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4863:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4888:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 169,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4888:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4920:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 171,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4920:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4955:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 173,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4955:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4826:154:2"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "4999:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 176,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4999:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "5015:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 178,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "5015:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4998:32:2"
									},
									"scope": 200,
									"src": "4813:218:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "5037:657:2",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 193,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "5723:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5723:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "5750:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5750:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "5775:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5775:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "5800:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 189,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5800:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5713:112:2"
									},
									"returnParameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5834:0:2"
									},
									"scope": 200,
									"src": "5699:136:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "5841:367:2",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 199,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "6257:33:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 195,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6256:35:2"
									},
									"returnParameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6300:0:2"
									},
									"scope": 200,
									"src": "6213:88:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 201,
							"src": "173:6130:2"
						}
					],
					"src": "45:6259:2"
				},
				"id": 2
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolDerivedState": [
							231
						]
					},
					"id": 232,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 202,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 203,
								"nodeType": "StructuredDocumentation",
								"src": "71:222:3",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 231,
							"linearizedBaseContracts": [
								231
							],
							"name": "IUniswapV3PoolDerivedState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "336:1045:3",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 216,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "1403:29:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 205,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1403:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 206,
													"nodeType": "ArrayTypeName",
													"src": "1403:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1402:31:3"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "1481:30:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 209,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "1481:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 210,
													"nodeType": "ArrayTypeName",
													"src": "1481:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "1513:51:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 212,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1513:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 213,
													"nodeType": "ArrayTypeName",
													"src": "1513:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1480:85:3"
									},
									"scope": 231,
									"src": "1386:180:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "1572:771:3",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 230,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2383:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 218,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2383:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2400:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 220,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2400:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2382:34:3"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2477:26:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 223,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "2477:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2517:37:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 225,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2517:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "secondsInside",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "2568:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 227,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2568:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2463:135:3"
									},
									"scope": 231,
									"src": "2348:251:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 232,
							"src": "293:2308:3"
						}
					],
					"src": "45:2557:3"
				},
				"id": 3
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
					"exportedSymbols": {
						"IUniswapV3PoolEvents": [
							350
						]
					},
					"id": 351,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 233,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 234,
								"nodeType": "StructuredDocumentation",
								"src": "71:88:4",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 350,
							"linearizedBaseContracts": [
								350
							],
							"name": "IUniswapV3PoolEvents",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 235,
										"nodeType": "StructuredDocumentation",
										"src": "196:344:4",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"id": 241,
									"name": "Initialize",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "562:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 236,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "562:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 239,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "584:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 238,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "584:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "561:34:4"
									},
									"src": "545:51:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "602:551:4",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"id": 258,
									"name": "Mint",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1178:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1178:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 246,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1202:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1202:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 248,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1233:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 247,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1233:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 250,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1266:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 249,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1266:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 252,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1299:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 251,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1299:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1323:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 253,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1323:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "1348:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1168:201:4"
									},
									"src": "1158:212:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 259,
										"nodeType": "StructuredDocumentation",
										"src": "1376:493:4",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"id": 273,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1897:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 260,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1897:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1928:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1955:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 264,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1955:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1988:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 266,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1988:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 269,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "2021:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 268,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2021:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 271,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "2046:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 270,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2046:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:180:4"
									},
									"src": "1874:194:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 274,
										"nodeType": "StructuredDocumentation",
										"src": "2074:523:4",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"id": 288,
									"name": "Burn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 276,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2622:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2622:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 278,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2653:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 277,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2653:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 280,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2686:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 279,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2686:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 282,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2719:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 281,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2743:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2743:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "2768:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:177:4"
									},
									"src": "2602:188:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 289,
										"nodeType": "StructuredDocumentation",
										"src": "2796:600:4",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"
									},
									"id": 305,
									"name": "Swap",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3421:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3421:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 293,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3453:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 292,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3453:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 295,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3488:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 294,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3488:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 297,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3512:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 296,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3512:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 299,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3536:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 298,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3536:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 301,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3566:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 300,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3566:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3593:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 302,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3593:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3411:198:4"
									},
									"src": "3401:209:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "3616:562:4",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"id": 320,
									"name": "Flash",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4204:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4204:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4236:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4271:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4271:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 314,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4296:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 313,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4296:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 316,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4321:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4321:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4344:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4344:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4194:169:4"
									},
									"src": "4183:181:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 321,
										"nodeType": "StructuredDocumentation",
										"src": "4370:451:4",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"id": 327,
									"name": "IncreaseObservationCardinalityNext",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "4876:36:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 322,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4876:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 325,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "4922:36:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 324,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4922:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4866:98:4"
									},
									"src": "4826:139:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 328,
										"nodeType": "StructuredDocumentation",
										"src": "4971:370:4",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"id": 338,
									"name": "SetFeeProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5367:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 329,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5367:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 332,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5390:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 331,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5390:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 334,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5413:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 333,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5413:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5436:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 335,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5436:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5366:92:4"
									},
									"src": "5346:113:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "5465:384:4",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"id": 349,
									"name": "CollectProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "5876:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 340,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5876:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "5900:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 342,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5900:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "5927:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 344,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5927:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "5944:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 346,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5944:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5875:85:4"
									},
									"src": "5854:107:4"
								}
							],
							"scope": 351,
							"src": "159:5804:4"
						}
					],
					"src": "45:5919:4"
				},
				"id": 4
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
					"exportedSymbols": {
						"IUniswapV3PoolImmutables": [
							390
						]
					},
					"id": 391,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 352,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 353,
								"nodeType": "StructuredDocumentation",
								"src": "71:153:5",
								"text": "@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 390,
							"linearizedBaseContracts": [
								390
							],
							"name": "IUniswapV3PoolImmutables",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 354,
										"nodeType": "StructuredDocumentation",
										"src": "265:138:5",
										"text": "@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 359,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "424:2:5"
									},
									"returnParameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "450:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "449:9:5"
									},
									"scope": 390,
									"src": "408:51:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 360,
										"nodeType": "StructuredDocumentation",
										"src": "465:113:5",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 365,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "598:2:5"
									},
									"returnParameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "624:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 362,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:9:5"
									},
									"scope": 390,
									"src": "583:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "639:114:5",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 371,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "773:2:5"
									},
									"returnParameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "799:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "799:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "798:9:5"
									},
									"scope": 390,
									"src": "758:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 372,
										"nodeType": "StructuredDocumentation",
										"src": "814:84:5",
										"text": "@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"
									},
									"functionSelector": "ddca3f43",
									"id": 377,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "915:2:5"
									},
									"returnParameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "941:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 374,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "941:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:8:5"
									},
									"scope": 390,
									"src": "903:46:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 378,
										"nodeType": "StructuredDocumentation",
										"src": "955:358:5",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 383,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:5"
									},
									"returnParameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1364:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 380,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1364:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1363:7:5"
									},
									"scope": 390,
									"src": "1318:53:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 384,
										"nodeType": "StructuredDocumentation",
										"src": "1377:363:5",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 389,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 385,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:5"
									},
									"returnParameters": {
										"id": 388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "1799:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 386,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1798:9:5"
									},
									"scope": 390,
									"src": "1745:63:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 391,
							"src": "224:1586:5"
						}
					],
					"src": "45:1766:5"
				},
				"id": 5
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolOwnerActions": [
							416
						]
					},
					"id": 417,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 392,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 393,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:6",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 416,
							"linearizedBaseContracts": [
								416
							],
							"name": "IUniswapV3PoolOwnerActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 394,
										"nodeType": "StructuredDocumentation",
										"src": "230:205:6",
										"text": "@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"
									},
									"functionSelector": "8206a4d1",
									"id": 401,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFeeProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "feeProtocol0",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "464:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 395,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "464:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "feeProtocol1",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "484:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 397,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "484:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "463:40:6"
									},
									"returnParameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:0:6"
									},
									"scope": 416,
									"src": "440:73:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 402,
										"nodeType": "StructuredDocumentation",
										"src": "519:483:6",
										"text": "@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"
									},
									"functionSelector": "85b66729",
									"id": 415,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1041:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1041:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1068:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 405,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1068:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 408,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1102:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 407,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1031:101:6"
									},
									"returnParameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1151:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 410,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1151:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "1168:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 412,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1168:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1150:34:6"
									},
									"scope": 416,
									"src": "1007:178:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 417,
							"src": "187:1000:6"
						}
					],
					"src": "45:1143:6"
				},
				"id": 6
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolState": [
							524
						]
					},
					"id": 525,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 418,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 419,
								"nodeType": "StructuredDocumentation",
								"src": "71:169:7",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 524,
							"linearizedBaseContracts": [
								524
							],
							"name": "IUniswapV3PoolState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 420,
										"nodeType": "StructuredDocumentation",
										"src": "276:1140:7",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 437,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1435:2:7"
									},
									"returnParameters": {
										"id": 436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1498:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 422,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1532:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 424,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1532:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "observationIndex",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1556:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 426,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1556:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1593:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 428,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1593:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1636:33:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 430,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1636:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "feeProtocol",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1683:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 432,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1683:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 435,
												"mutability": "mutable",
												"name": "unlocked",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1714:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 434,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1714:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1484:253:7"
									},
									"scope": 524,
									"src": "1421:317:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 438,
										"nodeType": "StructuredDocumentation",
										"src": "1744:168:7",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 443,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1946:2:7"
									},
									"returnParameters": {
										"id": 442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 441,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 443,
												"src": "1972:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 440,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1972:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1971:9:7"
									},
									"scope": 524,
									"src": "1917:64:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 444,
										"nodeType": "StructuredDocumentation",
										"src": "1987:168:7",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 449,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2189:2:7"
									},
									"returnParameters": {
										"id": 448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 449,
												"src": "2215:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 446,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2215:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2214:9:7"
									},
									"scope": 524,
									"src": "2160:64:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 450,
										"nodeType": "StructuredDocumentation",
										"src": "2230:147:7",
										"text": "@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"
									},
									"functionSelector": "1ad8b03b",
									"id": 457,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "protocolFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2403:2:7"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 457,
												"src": "2429:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 452,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 457,
												"src": "2445:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 454,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2445:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2428:32:7"
									},
									"scope": 524,
									"src": "2382:79:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 458,
										"nodeType": "StructuredDocumentation",
										"src": "2467:150:7",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"
									},
									"functionSelector": "1a686502",
									"id": 463,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2640:2:7"
									},
									"returnParameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "2666:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 460,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2666:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:9:7"
									},
									"scope": 524,
									"src": "2622:53:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 464,
										"nodeType": "StructuredDocumentation",
										"src": "2681:1244:7",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 485,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "3945:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 465,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3945:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3944:12:7"
									},
									"returnParameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4017:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 468,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4017:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4053:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 470,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "4053:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4086:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 472,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4086:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4129:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4129:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4172:27:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 476,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "4172:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4213:38:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 478,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4213:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4265:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 480,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "4265:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 483,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "4300:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 482,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4300:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:323:7"
									},
									"scope": 524,
									"src": "3930:397:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 486,
										"nodeType": "StructuredDocumentation",
										"src": "4333:99:7",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 493,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "wordPosition",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "4457:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 487,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "4457:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:20:7"
									},
									"returnParameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "4500:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 490,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4500:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4499:9:7"
									},
									"scope": 524,
									"src": "4437:72:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "4515:700:7",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 509,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5239:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 495,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5239:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5238:13:7"
									},
									"returnParameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "_liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5312:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 498,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5312:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5344:32:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 500,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5344:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5390:32:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5390:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5436:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 504,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5436:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5469:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 506,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5469:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5298:200:7"
									},
									"scope": 524,
									"src": "5220:279:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 510,
										"nodeType": "StructuredDocumentation",
										"src": "5505:749:7",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 523,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6281:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 511,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6281:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6280:15:7"
									},
									"returnParameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6356:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 514,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6356:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6391:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 516,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "6391:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6425:41:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 518,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6425:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "6480:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 520,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6480:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6342:164:7"
									},
									"scope": 524,
									"src": "6259:248:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 525,
							"src": "240:6269:7"
						}
					],
					"src": "45:6465:7"
				},
				"id": 7
			},
			"@uniswap/v3-core/contracts/libraries/FullMath.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/libraries/FullMath.sol",
					"exportedSymbols": {
						"FullMath": [
							697
						]
					},
					"id": 698,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 526,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:31:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 527,
								"nodeType": "StructuredDocumentation",
								"src": "65:297:8",
								"text": "@title Contains 512-bit math functions\n @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits"
							},
							"fullyImplemented": true,
							"id": 697,
							"linearizedBaseContracts": [
								697
							],
							"name": "FullMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 652,
										"nodeType": "Block",
										"src": "877:3648:8",
										"statements": [
											{
												"assignments": [
													540
												],
												"declarations": [
													{
														"constant": false,
														"id": 540,
														"mutability": "mutable",
														"name": "prod0",
														"nodeType": "VariableDeclaration",
														"scope": 652,
														"src": "1190:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 539,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1190:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 541,
												"nodeType": "VariableDeclarationStatement",
												"src": "1190:13:8"
											},
											{
												"assignments": [
													543
												],
												"declarations": [
													{
														"constant": false,
														"id": 543,
														"mutability": "mutable",
														"name": "prod1",
														"nodeType": "VariableDeclaration",
														"scope": 652,
														"src": "1258:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 542,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1258:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 544,
												"nodeType": "VariableDeclarationStatement",
												"src": "1258:13:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1334:141:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1348:30:8",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1365:1:8"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1368:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1375:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1371:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1371:6:8"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "1358:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1358:20:8"
															},
															"variables": [
																{
																	"name": "mm",
																	"nodeType": "YulTypedName",
																	"src": "1352:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1391:18:8",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1404:1:8"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1407:1:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1400:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1400:9:8"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "1391:5:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1422:43:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1439:2:8"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1443:5:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1435:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1435:14:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1454:2:8"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1458:5:8"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1451:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1451:13:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1431:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1431:34:8"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "1422:5:8"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 530,
														"isOffset": false,
														"isSlot": false,
														"src": "1365:1:8",
														"valueSize": 1
													},
													{
														"declaration": 530,
														"isOffset": false,
														"isSlot": false,
														"src": "1404:1:8",
														"valueSize": 1
													},
													{
														"declaration": 532,
														"isOffset": false,
														"isSlot": false,
														"src": "1368:1:8",
														"valueSize": 1
													},
													{
														"declaration": 532,
														"isOffset": false,
														"isSlot": false,
														"src": "1407:1:8",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "1391:5:8",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "1443:5:8",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "1458:5:8",
														"valueSize": 1
													},
													{
														"declaration": 543,
														"isOffset": false,
														"isSlot": false,
														"src": "1422:5:8",
														"valueSize": 1
													}
												],
												"id": 545,
												"nodeType": "InlineAssembly",
												"src": "1325:150:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 546,
														"name": "prod1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 543,
														"src": "1547:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 547,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1556:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1547:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 559,
												"nodeType": "IfStatement",
												"src": "1543:179:8",
												"trueBody": {
													"id": 558,
													"nodeType": "Block",
													"src": "1559:163:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 552,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 550,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 534,
																			"src": "1581:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 551,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1595:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1581:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 549,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1573:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 553,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1573:24:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 554,
															"nodeType": "ExpressionStatement",
															"src": "1573:24:8"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "1620:65:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1638:33:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "prod0",
																					"nodeType": "YulIdentifier",
																					"src": "1652:5:8"
																				},
																				{
																					"name": "denominator",
																					"nodeType": "YulIdentifier",
																					"src": "1659:11:8"
																				}
																			],
																			"functionName": {
																				"name": "div",
																				"nodeType": "YulIdentifier",
																				"src": "1648:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1648:23:8"
																		},
																		"variableNames": [
																			{
																				"name": "result",
																				"nodeType": "YulIdentifier",
																				"src": "1638:6:8"
																			}
																		]
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 534,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1659:11:8",
																	"valueSize": 1
																},
																{
																	"declaration": 540,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1652:5:8",
																	"valueSize": 1
																},
																{
																	"declaration": 537,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1638:6:8",
																	"valueSize": 1
																}
															],
															"id": 555,
															"nodeType": "InlineAssembly",
															"src": "1611:74:8"
														},
														{
															"expression": {
																"id": 556,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 537,
																"src": "1705:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 538,
															"id": 557,
															"nodeType": "Return",
															"src": "1698:13:8"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 563,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 561,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "1835:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 562,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 543,
																"src": "1849:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1835:19:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 560,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1827:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1827:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 565,
												"nodeType": "ExpressionStatement",
												"src": "1827:28:8"
											},
											{
												"assignments": [
													567
												],
												"declarations": [
													{
														"constant": false,
														"id": 567,
														"mutability": "mutable",
														"name": "remainder",
														"nodeType": "VariableDeclaration",
														"scope": 652,
														"src": "2132:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 566,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2132:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 568,
												"nodeType": "VariableDeclarationStatement",
												"src": "2132:17:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2168:62:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2182:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "2202:1:8"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "2205:1:8"
																	},
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2208:11:8"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "2195:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2195:25:8"
															},
															"variableNames": [
																{
																	"name": "remainder",
																	"nodeType": "YulIdentifier",
																	"src": "2182:9:8"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 530,
														"isOffset": false,
														"isSlot": false,
														"src": "2202:1:8",
														"valueSize": 1
													},
													{
														"declaration": 532,
														"isOffset": false,
														"isSlot": false,
														"src": "2205:1:8",
														"valueSize": 1
													},
													{
														"declaration": 534,
														"isOffset": false,
														"isSlot": false,
														"src": "2208:11:8",
														"valueSize": 1
													},
													{
														"declaration": 567,
														"isOffset": false,
														"isSlot": false,
														"src": "2182:9:8",
														"valueSize": 1
													}
												],
												"id": 569,
												"nodeType": "InlineAssembly",
												"src": "2159:71:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2303:108:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2317:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "prod1",
																		"nodeType": "YulIdentifier",
																		"src": "2330:5:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "2340:9:8"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "2351:5:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2337:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2337:20:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2326:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2326:32:8"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "2317:5:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2371:30:8",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2384:5:8"
																	},
																	{
																		"name": "remainder",
																		"nodeType": "YulIdentifier",
																		"src": "2391:9:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2380:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2380:21:8"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2371:5:8"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "2351:5:8",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "2371:5:8",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "2384:5:8",
														"valueSize": 1
													},
													{
														"declaration": 543,
														"isOffset": false,
														"isSlot": false,
														"src": "2317:5:8",
														"valueSize": 1
													},
													{
														"declaration": 543,
														"isOffset": false,
														"isSlot": false,
														"src": "2330:5:8",
														"valueSize": 1
													},
													{
														"declaration": 567,
														"isOffset": false,
														"isSlot": false,
														"src": "2340:9:8",
														"valueSize": 1
													},
													{
														"declaration": 567,
														"isOffset": false,
														"isSlot": false,
														"src": "2391:9:8",
														"valueSize": 1
													}
												],
												"id": 570,
												"nodeType": "InlineAssembly",
												"src": "2294:117:8"
											},
											{
												"assignments": [
													572
												],
												"declarations": [
													{
														"constant": false,
														"id": 572,
														"mutability": "mutable",
														"name": "twos",
														"nodeType": "VariableDeclaration",
														"scope": 652,
														"src": "2560:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 571,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2560:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 577,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 574,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "-",
														"prefix": true,
														"src": "2575:12:8",
														"subExpression": {
															"id": 573,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "2576:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"id": 575,
														"name": "denominator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "2590:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2575:26:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2560:41:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2666:61:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2680:37:8",
															"value": {
																"arguments": [
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2699:11:8"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2712:4:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2695:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2695:22:8"
															},
															"variableNames": [
																{
																	"name": "denominator",
																	"nodeType": "YulIdentifier",
																	"src": "2680:11:8"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 534,
														"isOffset": false,
														"isSlot": false,
														"src": "2680:11:8",
														"valueSize": 1
													},
													{
														"declaration": 534,
														"isOffset": false,
														"isSlot": false,
														"src": "2699:11:8",
														"valueSize": 1
													},
													{
														"declaration": 572,
														"isOffset": false,
														"isSlot": false,
														"src": "2712:4:8",
														"valueSize": 1
													}
												],
												"id": 578,
												"nodeType": "InlineAssembly",
												"src": "2657:70:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2800:49:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2814:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2827:5:8"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2834:4:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2823:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2823:16:8"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2814:5:8"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "2814:5:8",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "2827:5:8",
														"valueSize": 1
													},
													{
														"declaration": 572,
														"isOffset": false,
														"isSlot": false,
														"src": "2834:4:8",
														"valueSize": 1
													}
												],
												"id": 579,
												"nodeType": "InlineAssembly",
												"src": "2791:58:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3037:63:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3051:39:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3071:1:8",
																						"type": "",
																						"value": "0"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "3074:4:8"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3067:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3067:12:8"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3081:4:8"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3063:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3063:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3088:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3059:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3059:31:8"
															},
															"variableNames": [
																{
																	"name": "twos",
																	"nodeType": "YulIdentifier",
																	"src": "3051:4:8"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 572,
														"isOffset": false,
														"isSlot": false,
														"src": "3051:4:8",
														"valueSize": 1
													},
													{
														"declaration": 572,
														"isOffset": false,
														"isSlot": false,
														"src": "3074:4:8",
														"valueSize": 1
													},
													{
														"declaration": 572,
														"isOffset": false,
														"isSlot": false,
														"src": "3081:4:8",
														"valueSize": 1
													}
												],
												"id": 580,
												"nodeType": "InlineAssembly",
												"src": "3028:72:8"
											},
											{
												"expression": {
													"id": 585,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 581,
														"name": "prod0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 540,
														"src": "3109:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "|=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 584,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 582,
															"name": "prod1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 543,
															"src": "3118:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 583,
															"name": "twos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 572,
															"src": "3126:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3118:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3109:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 586,
												"nodeType": "ExpressionStatement",
												"src": "3109:21:8"
											},
											{
												"assignments": [
													588
												],
												"declarations": [
													{
														"constant": false,
														"id": 588,
														"mutability": "mutable",
														"name": "inv",
														"nodeType": "VariableDeclaration",
														"scope": 652,
														"src": "3464:11:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 587,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3464:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 595,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 594,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 591,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "33",
																	"id": 589,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3479:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 590,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 534,
																	"src": "3483:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3479:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 592,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3478:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "^",
													"rightExpression": {
														"hexValue": "32",
														"id": 593,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3498:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "3478:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3464:35:8"
											},
											{
												"expression": {
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 596,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "3714:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 601,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 597,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3721:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 600,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 598,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "3725:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 599,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "3739:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3725:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3721:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3714:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 603,
												"nodeType": "ExpressionStatement",
												"src": "3714:28:8"
											},
											{
												"expression": {
													"id": 610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 604,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "3772:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 609,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 605,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3779:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 608,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 606,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "3783:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 607,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "3797:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3783:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3779:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3772:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 611,
												"nodeType": "ExpressionStatement",
												"src": "3772:28:8"
											},
											{
												"expression": {
													"id": 618,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 612,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "3831:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 617,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 613,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3838:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 616,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 614,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "3842:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 615,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "3856:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3842:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3838:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3831:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 619,
												"nodeType": "ExpressionStatement",
												"src": "3831:28:8"
											},
											{
												"expression": {
													"id": 626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 620,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "3890:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 625,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 621,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3897:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 624,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 622,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "3901:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 623,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "3915:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3901:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3897:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3890:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 627,
												"nodeType": "ExpressionStatement",
												"src": "3890:28:8"
											},
											{
												"expression": {
													"id": 634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 628,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "3949:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 633,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 629,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3956:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 632,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 630,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "3960:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 631,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "3974:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3960:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3956:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3949:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 635,
												"nodeType": "ExpressionStatement",
												"src": "3949:28:8"
											},
											{
												"expression": {
													"id": 642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 636,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "4009:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 641,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4016:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 638,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "4020:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 639,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 588,
																"src": "4034:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4020:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4016:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4009:28:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 643,
												"nodeType": "ExpressionStatement",
												"src": "4009:28:8"
											},
											{
												"expression": {
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 644,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 537,
														"src": "4475:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 647,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 645,
															"name": "prod0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "4484:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 646,
															"name": "inv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "4492:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4484:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4475:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 649,
												"nodeType": "ExpressionStatement",
												"src": "4475:20:8"
											},
											{
												"expression": {
													"id": 650,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 537,
													"src": "4512:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 538,
												"id": 651,
												"nodeType": "Return",
												"src": "4505:13:8"
											}
										]
									},
									"documentation": {
										"id": 528,
										"nodeType": "StructuredDocumentation",
										"src": "385:359:8",
										"text": "@notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result\n @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv"
									},
									"id": 653,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "774:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "774:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "793:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 531,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "793:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "812:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 533,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "812:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "764:73:8"
									},
									"returnParameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 537,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "861:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 536,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "861:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "860:16:8"
									},
									"scope": 697,
									"src": "749:3776:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 695,
										"nodeType": "Block",
										"src": "4945:177:8",
										"statements": [
											{
												"expression": {
													"id": 671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 665,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 663,
														"src": "4955:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 667,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 656,
																"src": "4971:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 668,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 658,
																"src": "4974:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 669,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 660,
																"src": "4977:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 666,
															"name": "mulDiv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 653,
															"src": "4964:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 670,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4964:25:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4955:34:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 672,
												"nodeType": "ExpressionStatement",
												"src": "4955:34:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 674,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 656,
																"src": "5010:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 675,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 658,
																"src": "5013:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 676,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 660,
																"src": "5016:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 673,
															"name": "mulmod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967280,
															"src": "5003:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 677,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5003:25:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 678,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5031:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5003:29:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 694,
												"nodeType": "IfStatement",
												"src": "4999:117:8",
												"trueBody": {
													"id": 693,
													"nodeType": "Block",
													"src": "5034:82:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 687,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 681,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 663,
																			"src": "5056:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 684,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "5070:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 683,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "5070:7:8",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						}
																					],
																					"id": 682,
																					"name": "type",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967269,
																					"src": "5065:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 685,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5065:13:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_meta_type_t_uint256",
																					"typeString": "type(uint256)"
																				}
																			},
																			"id": 686,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "max",
																			"nodeType": "MemberAccess",
																			"src": "5065:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5056:26:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 680,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5048:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5048:35:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 689,
															"nodeType": "ExpressionStatement",
															"src": "5048:35:8"
														},
														{
															"expression": {
																"id": 691,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "5097:8:8",
																"subExpression": {
																	"id": 690,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 663,
																	"src": "5097:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 692,
															"nodeType": "ExpressionStatement",
															"src": "5097:8:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 654,
										"nodeType": "StructuredDocumentation",
										"src": "4531:271:8",
										"text": "@notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result"
									},
									"id": 696,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDivRoundingUp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "4842:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 655,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4842:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "4861:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4861:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "4880:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 659,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4880:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4832:73:8"
									},
									"returnParameters": {
										"id": 664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "4929:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 662,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4929:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4928:16:8"
									},
									"scope": 697,
									"src": "4807:315:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 698,
							"src": "362:4762:8"
						}
					],
					"src": "32:5093:8"
				},
				"id": 8
			},
			"@uniswap/v3-core/contracts/libraries/TickMath.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/libraries/TickMath.sol",
					"exportedSymbols": {
						"TickMath": [
							1232
						]
					},
					"id": 1233,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 699,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 700,
								"nodeType": "StructuredDocumentation",
								"src": "78:235:9",
								"text": "@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"
							},
							"fullyImplemented": true,
							"id": 1232,
							"linearizedBaseContracts": [
								1232
							],
							"name": "TickMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 701,
										"nodeType": "StructuredDocumentation",
										"src": "336:108:9",
										"text": "@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
									},
									"id": 705,
									"mutability": "constant",
									"name": "MIN_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1232,
									"src": "449:42:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 702,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "449:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 704,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "484:7:9",
										"subExpression": {
											"hexValue": "383837323732",
											"id": 703,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "485:6:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_887272_by_1",
												"typeString": "int_const 887272"
											},
											"value": "887272"
										},
										"typeDescriptions": {
											"typeIdentifier": "t_rational_minus_887272_by_1",
											"typeString": "int_const -887272"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 706,
										"nodeType": "StructuredDocumentation",
										"src": "497:107:9",
										"text": "@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
									},
									"id": 710,
									"mutability": "constant",
									"name": "MAX_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1232,
									"src": "609:44:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 707,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "609:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 709,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "644:9:9",
										"subExpression": {
											"id": 708,
											"name": "MIN_TICK",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 705,
											"src": "645:8:9",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 711,
										"nodeType": "StructuredDocumentation",
										"src": "660:116:9",
										"text": "@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
									},
									"id": 714,
									"mutability": "constant",
									"name": "MIN_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1232,
									"src": "781:53:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 712,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "781:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "34323935313238373339",
										"id": 713,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "824:10:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4295128739_by_1",
											"typeString": "int_const 4295128739"
										},
										"value": "4295128739"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 715,
										"nodeType": "StructuredDocumentation",
										"src": "840:116:9",
										"text": "@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
									},
									"id": 718,
									"mutability": "constant",
									"name": "MAX_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1232,
									"src": "961:92:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 716,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "961:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432",
										"id": 717,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1004:49:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1461446703485210103287273052203988822378723970342_by_1",
											"typeString": "int_const 1461...(41 digits omitted)...0342"
										},
										"value": "1461446703485210103287273052203988822378723970342"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1091,
										"nodeType": "Block",
										"src": "1447:2495:9",
										"statements": [
											{
												"assignments": [
													727
												],
												"declarations": [
													{
														"constant": false,
														"id": 727,
														"mutability": "mutable",
														"name": "absTick",
														"nodeType": "VariableDeclaration",
														"scope": 1091,
														"src": "1457:15:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 726,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1457:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 747,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 730,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 728,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 721,
															"src": "1475:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 729,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1482:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1475:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 743,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 721,
																		"src": "1526:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 742,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1519:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 741,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1519:6:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 744,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1519:12:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 740,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1511:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 739,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1511:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 745,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1511:21:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1475:57:9",
													"trueExpression": {
														"arguments": [
															{
																"id": 737,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "-",
																"prefix": true,
																"src": "1494:13:9",
																"subExpression": {
																	"arguments": [
																		{
																			"id": 735,
																			"name": "tick",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 721,
																			"src": "1502:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 734,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1495:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 733,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "1495:6:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 736,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1495:12:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 732,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1486:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 731,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1486:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 738,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1486:22:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1457:75:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 754,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 749,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 727,
																"src": "1550:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 752,
																		"name": "MAX_TICK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 710,
																		"src": "1569:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 751,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1561:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 750,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1561:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 753,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1561:17:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1550:28:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54",
															"id": 755,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1580:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															},
															"value": "T"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															}
														],
														"id": 748,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1542:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 756,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1542:42:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 757,
												"nodeType": "ExpressionStatement",
												"src": "1542:42:9"
											},
											{
												"assignments": [
													759
												],
												"declarations": [
													{
														"constant": false,
														"id": 759,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1091,
														"src": "1595:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 758,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1595:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 768,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 764,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 762,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 760,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 727,
																"src": "1611:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"hexValue": "307831",
																"id": 761,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1621:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "0x1"
															},
															"src": "1611:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 763,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1628:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1611:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 766,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1669:35:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"id": 767,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1611:93:9",
													"trueExpression": {
														"hexValue": "30786666666362393333626436666164333761613264313632643161353934303031",
														"id": 765,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1632:34:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340265354078544963557816517032075149313_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...9313"
														},
														"value": "0xfffcb933bd6fad37aa2d162d1a594001"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint136",
														"typeString": "uint136"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1595:109:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 771,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 769,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "1718:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832",
															"id": 770,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1728:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "0x2"
														},
														"src": "1718:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 772,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1735:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1718:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 783,
												"nodeType": "IfStatement",
												"src": "1714:83:9",
												"trueBody": {
													"expression": {
														"id": 781,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 774,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "1738:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 780,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 777,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 775,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "1747:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663937323732333733643431333235396134363939303538306532313361",
																			"id": 776,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1755:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340248342086729790484326174814286782778_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...2778"
																			},
																			"value": "0xfff97272373d413259a46990580e213a"
																		},
																		"src": "1747:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 778,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1746:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 779,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1794:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1746:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1738:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 782,
													"nodeType": "ExpressionStatement",
													"src": "1738:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 786,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 784,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "1811:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834",
															"id": 785,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1821:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															"value": "0x4"
														},
														"src": "1811:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 787,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1828:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1811:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 798,
												"nodeType": "IfStatement",
												"src": "1807:83:9",
												"trueBody": {
													"expression": {
														"id": 796,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 789,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "1831:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 795,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 792,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 790,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "1840:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663265353066356636353639333265663132333537636633633766646363",
																			"id": 791,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1848:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340214320654664324051920982716015181260_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...1260"
																			},
																			"value": "0xfff2e50f5f656932ef12357cf3c7fdcc"
																		},
																		"src": "1840:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 793,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1839:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 794,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1887:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1839:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1831:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 797,
													"nodeType": "ExpressionStatement",
													"src": "1831:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 801,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 799,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "1904:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838",
															"id": 800,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1914:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8_by_1",
																"typeString": "int_const 8"
															},
															"value": "0x8"
														},
														"src": "1904:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 802,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1921:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1904:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 813,
												"nodeType": "IfStatement",
												"src": "1900:83:9",
												"trueBody": {
													"expression": {
														"id": 811,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 804,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "1924:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 807,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 805,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "1933:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666653563616361376531306534653631633336323465616130393431636430",
																			"id": 806,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1941:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340146287995602323631171512101879684304_by_1",
																				"typeString": "int_const 3401...(31 digits omitted)...4304"
																			},
																			"value": "0xffe5caca7e10e4e61c3624eaa0941cd0"
																		},
																		"src": "1933:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 808,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1932:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 809,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1980:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1932:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1924:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 812,
													"nodeType": "ExpressionStatement",
													"src": "1924:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 816,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 814,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "1997:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130",
															"id": 815,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16_by_1",
																"typeString": "int_const 16"
															},
															"value": "0x10"
														},
														"src": "1997:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 817,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2015:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1997:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 828,
												"nodeType": "IfStatement",
												"src": "1993:84:9",
												"trueBody": {
													"expression": {
														"id": 826,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 819,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2018:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 825,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 822,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 820,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2027:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666636239383433643630663631353963396462353838333563393236363434",
																			"id": 821,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2035:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340010263488231146823593991679159461444_by_1",
																				"typeString": "int_const 3400...(31 digits omitted)...1444"
																			},
																			"value": "0xffcb9843d60f6159c9db58835c926644"
																		},
																		"src": "2027:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 823,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2026:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 824,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2074:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2026:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2018:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 827,
													"nodeType": "ExpressionStatement",
													"src": "2018:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 833,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 831,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 829,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2091:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230",
															"id": 830,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2101:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "0x20"
														},
														"src": "2091:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 832,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2109:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2091:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 843,
												"nodeType": "IfStatement",
												"src": "2087:84:9",
												"trueBody": {
													"expression": {
														"id": 841,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 834,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2112:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 840,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 837,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 835,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2121:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666393733623431666139386330383134373265363839366466623235346330",
																			"id": 836,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2129:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339738377640345403697157401104375502016_by_1",
																				"typeString": "int_const 3397...(31 digits omitted)...2016"
																			},
																			"value": "0xff973b41fa98c081472e6896dfb254c0"
																		},
																		"src": "2121:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 838,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 839,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2168:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2120:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2112:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 842,
													"nodeType": "ExpressionStatement",
													"src": "2112:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 848,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 846,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 844,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2185:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430",
															"id": 845,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2195:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "0x40"
														},
														"src": "2185:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 847,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2203:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2185:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 858,
												"nodeType": "IfStatement",
												"src": "2181:84:9",
												"trueBody": {
													"expression": {
														"id": 856,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 849,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2206:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 855,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 852,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 850,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2215:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666326561313634363663393661333834336563373862333236623532383631",
																			"id": 851,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2223:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339195258003219555707034227454543997025_by_1",
																				"typeString": "int_const 3391...(31 digits omitted)...7025"
																			},
																			"value": "0xff2ea16466c96a3843ec78b326b52861"
																		},
																		"src": "2215:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 853,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2214:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 854,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2262:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2214:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2206:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 857,
													"nodeType": "ExpressionStatement",
													"src": "2206:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 861,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 859,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2279:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830",
															"id": 860,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2289:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_128_by_1",
																"typeString": "int_const 128"
															},
															"value": "0x80"
														},
														"src": "2279:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 862,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2297:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2279:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 873,
												"nodeType": "IfStatement",
												"src": "2275:84:9",
												"trueBody": {
													"expression": {
														"id": 871,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 864,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2300:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 870,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 867,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 865,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2309:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786665356465653034366139396132613831316334363166313936396333303533",
																			"id": 866,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2317:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_338111622100601834656805679988414885971_by_1",
																				"typeString": "int_const 3381...(31 digits omitted)...5971"
																			},
																			"value": "0xfe5dee046a99a2a811c461f1969c3053"
																		},
																		"src": "2309:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 868,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2308:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 869,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2356:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2308:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2300:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 872,
													"nodeType": "ExpressionStatement",
													"src": "2300:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 878,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 876,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 874,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2373:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078313030",
															"id": 875,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2383:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_256_by_1",
																"typeString": "int_const 256"
															},
															"value": "0x100"
														},
														"src": "2373:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 877,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2392:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2373:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 888,
												"nodeType": "IfStatement",
												"src": "2369:85:9",
												"trueBody": {
													"expression": {
														"id": 886,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 879,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2395:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 885,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 880,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2404:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786663626538366337393030613838616564636666633833623437396161336134",
																			"id": 881,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2412:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_335954724994790223023589805789778977700_by_1",
																				"typeString": "int_const 3359...(31 digits omitted)...7700"
																			},
																			"value": "0xfcbe86c7900a88aedcffc83b479aa3a4"
																		},
																		"src": "2404:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 883,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2403:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 884,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2451:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2403:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2395:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 887,
													"nodeType": "ExpressionStatement",
													"src": "2395:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 893,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 891,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 889,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2468:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078323030",
															"id": 890,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2478:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_512_by_1",
																"typeString": "int_const 512"
															},
															"value": "0x200"
														},
														"src": "2468:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 892,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2487:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2468:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 903,
												"nodeType": "IfStatement",
												"src": "2464:85:9",
												"trueBody": {
													"expression": {
														"id": 901,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 894,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2490:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 900,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 897,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 895,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2499:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786639383761373235336163343133313736663262303734636637383135653534",
																			"id": 896,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2507:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_331682121138379247127172139078559817300_by_1",
																				"typeString": "int_const 3316...(31 digits omitted)...7300"
																			},
																			"value": "0xf987a7253ac413176f2b074cf7815e54"
																		},
																		"src": "2499:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 898,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2498:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 899,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2546:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2498:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2490:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 902,
													"nodeType": "ExpressionStatement",
													"src": "2490:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 906,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 904,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2563:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078343030",
															"id": 905,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2573:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1024_by_1",
																"typeString": "int_const 1024"
															},
															"value": "0x400"
														},
														"src": "2563:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 907,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2582:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2563:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 918,
												"nodeType": "IfStatement",
												"src": "2559:85:9",
												"trueBody": {
													"expression": {
														"id": 916,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 909,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2585:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 915,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 912,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 910,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2594:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786633333932623038323262373030303539343063376133393865346237306633",
																			"id": 911,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2602:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_323299236684853023288211250268160618739_by_1",
																				"typeString": "int_const 3232...(31 digits omitted)...8739"
																			},
																			"value": "0xf3392b0822b70005940c7a398e4b70f3"
																		},
																		"src": "2594:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 913,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2593:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 914,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2641:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2593:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2585:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 917,
													"nodeType": "ExpressionStatement",
													"src": "2585:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 921,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 919,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2658:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078383030",
															"id": 920,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2668:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2048_by_1",
																"typeString": "int_const 2048"
															},
															"value": "0x800"
														},
														"src": "2658:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 922,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2677:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2658:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 933,
												"nodeType": "IfStatement",
												"src": "2654:85:9",
												"trueBody": {
													"expression": {
														"id": 931,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 924,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2680:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 930,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 927,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 925,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2689:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786537313539343735613263323962373434336232396337666136653838396439",
																			"id": 926,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2697:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_307163716377032989948697243942600083929_by_1",
																				"typeString": "int_const 3071...(31 digits omitted)...3929"
																			},
																			"value": "0xe7159475a2c29b7443b29c7fa6e889d9"
																		},
																		"src": "2689:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 928,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2688:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 929,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2736:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2688:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2680:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 932,
													"nodeType": "ExpressionStatement",
													"src": "2680:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 936,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 934,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2753:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831303030",
															"id": 935,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2763:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4096_by_1",
																"typeString": "int_const 4096"
															},
															"value": "0x1000"
														},
														"src": "2753:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 937,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2773:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2753:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 948,
												"nodeType": "IfStatement",
												"src": "2749:86:9",
												"trueBody": {
													"expression": {
														"id": 946,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 939,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2776:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 945,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 942,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 940,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2785:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786430393766336264666432303232623838343561643866373932616135383235",
																			"id": 941,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2793:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_277268403626896220162999269216087595045_by_1",
																				"typeString": "int_const 2772...(31 digits omitted)...5045"
																			},
																			"value": "0xd097f3bdfd2022b8845ad8f792aa5825"
																		},
																		"src": "2785:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 943,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2784:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 944,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2832:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2784:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2776:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 947,
													"nodeType": "ExpressionStatement",
													"src": "2776:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 953,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 951,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 949,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2849:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832303030",
															"id": 950,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2859:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8192_by_1",
																"typeString": "int_const 8192"
															},
															"value": "0x2000"
														},
														"src": "2849:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 952,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2869:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2849:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 963,
												"nodeType": "IfStatement",
												"src": "2845:86:9",
												"trueBody": {
													"expression": {
														"id": 961,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 954,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2872:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 960,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 957,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 955,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2881:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786139663734363436326438373066646638613635646331663930653036316535",
																			"id": 956,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2889:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_225923453940442621947126027127485391333_by_1",
																				"typeString": "int_const 2259...(31 digits omitted)...1333"
																			},
																			"value": "0xa9f746462d870fdf8a65dc1f90e061e5"
																		},
																		"src": "2881:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 958,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2880:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 959,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2928:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2880:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2872:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 962,
													"nodeType": "ExpressionStatement",
													"src": "2872:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 968,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 966,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 964,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "2945:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834303030",
															"id": 965,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2955:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16384_by_1",
																"typeString": "int_const 16384"
															},
															"value": "0x4000"
														},
														"src": "2945:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 967,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2965:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2945:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 978,
												"nodeType": "IfStatement",
												"src": "2941:86:9",
												"trueBody": {
													"expression": {
														"id": 976,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 969,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2968:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 975,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 972,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 970,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "2977:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783730643836396131353664326131623839306262336466363262616633326637",
																			"id": 971,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2985:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_149997214084966997727330242082538205943_by_1",
																				"typeString": "int_const 1499...(31 digits omitted)...5943"
																			},
																			"value": "0x70d869a156d2a1b890bb3df62baf32f7"
																		},
																		"src": "2977:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 973,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2976:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 974,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3024:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2976:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2968:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 977,
													"nodeType": "ExpressionStatement",
													"src": "2968:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 983,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 981,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 979,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "3041:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838303030",
															"id": 980,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3051:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32768_by_1",
																"typeString": "int_const 32768"
															},
															"value": "0x8000"
														},
														"src": "3041:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 982,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3061:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3041:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 993,
												"nodeType": "IfStatement",
												"src": "3037:86:9",
												"trueBody": {
													"expression": {
														"id": 991,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 984,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3064:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 990,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 987,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 985,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "3073:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783331626531333566393764303866643938313233313530353534326663666136",
																			"id": 986,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3081:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_66119101136024775622716233608466517926_by_1",
																				"typeString": "int_const 6611...(30 digits omitted)...7926"
																			},
																			"value": "0x31be135f97d08fd981231505542fcfa6"
																		},
																		"src": "3073:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 988,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3072:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 989,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3120:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3072:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3064:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 992,
													"nodeType": "ExpressionStatement",
													"src": "3064:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 998,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 996,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 994,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "3137:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130303030",
															"id": 995,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3147:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_65536_by_1",
																"typeString": "int_const 65536"
															},
															"value": "0x10000"
														},
														"src": "3137:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 997,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3158:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3137:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1008,
												"nodeType": "IfStatement",
												"src": "3133:86:9",
												"trueBody": {
													"expression": {
														"id": 1006,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 999,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3161:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1005,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1002,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1000,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "3170:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307839616135303862356237613834653163363737646535346633653939626339",
																			"id": 1001,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3178:33:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_12847376061809297530290974190478138313_by_1",
																				"typeString": "int_const 1284...(30 digits omitted)...8313"
																			},
																			"value": "0x9aa508b5b7a84e1c677de54f3e99bc9"
																		},
																		"src": "3170:41:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1003,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3169:43:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1004,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3216:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3169:50:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3161:58:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1007,
													"nodeType": "ExpressionStatement",
													"src": "3161:58:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1011,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1009,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "3233:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230303030",
															"id": 1010,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3243:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_131072_by_1",
																"typeString": "int_const 131072"
															},
															"value": "0x20000"
														},
														"src": "3233:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1012,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3254:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1023,
												"nodeType": "IfStatement",
												"src": "3229:85:9",
												"trueBody": {
													"expression": {
														"id": 1021,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1014,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3257:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1020,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1017,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1015,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "3266:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "3078356436616638646564623831313936363939633332393232356565363034",
																			"id": 1016,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3274:32:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_485053260817066172746253684029974020_by_1",
																				"typeString": "int_const 4850...(28 digits omitted)...4020"
																			},
																			"value": "0x5d6af8dedb81196699c329225ee604"
																		},
																		"src": "3266:40:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1018,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3265:42:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1019,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3311:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3265:49:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3257:57:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1022,
													"nodeType": "ExpressionStatement",
													"src": "3257:57:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1028,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1026,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1024,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "3328:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430303030",
															"id": 1025,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3338:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_262144_by_1",
																"typeString": "int_const 262144"
															},
															"value": "0x40000"
														},
														"src": "3328:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1027,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3349:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3328:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1038,
												"nodeType": "IfStatement",
												"src": "3324:83:9",
												"trueBody": {
													"expression": {
														"id": 1036,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1029,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3352:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1035,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1032,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1030,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "3361:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307832323136653538346635666131656139323630343162656466653938",
																			"id": 1031,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3369:30:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_691415978906521570653435304214168_by_1",
																				"typeString": "int_const 6914...(25 digits omitted)...4168"
																			},
																			"value": "0x2216e584f5fa1ea926041bedfe98"
																		},
																		"src": "3361:38:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1033,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3360:40:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1034,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3404:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3360:47:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3352:55:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1037,
													"nodeType": "ExpressionStatement",
													"src": "3352:55:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1043,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1041,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1039,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "3421:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830303030",
															"id": 1040,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3431:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_524288_by_1",
																"typeString": "int_const 524288"
															},
															"value": "0x80000"
														},
														"src": "3421:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1042,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3442:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3421:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1053,
												"nodeType": "IfStatement",
												"src": "3417:78:9",
												"trueBody": {
													"expression": {
														"id": 1051,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1044,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3445:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1050,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1047,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1045,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 759,
																			"src": "3454:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783438613137303339316637646334323434346538666132",
																			"id": 1046,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:25:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1404880482679654955896180642_by_1",
																				"typeString": "int_const 1404880482679654955896180642"
																			},
																			"value": "0x48a170391f7dc42444e8fa2"
																		},
																		"src": "3454:33:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1048,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3453:35:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1049,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3492:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3453:42:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3445:50:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1052,
													"nodeType": "ExpressionStatement",
													"src": "3445:50:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 1056,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1054,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 721,
														"src": "3510:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1055,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3517:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3510:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1067,
												"nodeType": "IfStatement",
												"src": "3506:47:9",
												"trueBody": {
													"expression": {
														"id": 1065,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1057,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3520:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1064,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1060,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3533:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1059,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "3533:7:9",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			}
																		],
																		"id": 1058,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "3528:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1061,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3528:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_uint256",
																		"typeString": "type(uint256)"
																	}
																},
																"id": 1062,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "max",
																"nodeType": "MemberAccess",
																"src": "3528:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1063,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 759,
																"src": "3548:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3528:25:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3520:33:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1066,
													"nodeType": "ExpressionStatement",
													"src": "3520:33:9"
												}
											},
											{
												"expression": {
													"id": 1089,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1068,
														"name": "sqrtPriceX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 724,
														"src": "3863:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1087,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1073,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1071,
																				"name": "ratio",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 759,
																				"src": "3887:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 1072,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3896:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "3887:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1074,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3886:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1082,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1080,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1075,
																						"name": "ratio",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 759,
																						"src": "3903:5:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "%",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								},
																								"id": 1078,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"leftExpression": {
																									"hexValue": "31",
																									"id": 1076,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3912:1:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "3332",
																									"id": 1077,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3917:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_32_by_1",
																										"typeString": "int_const 32"
																									},
																									"value": "32"
																								},
																								"src": "3912:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								}
																							}
																						],
																						"id": 1079,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3911:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_4294967296_by_1",
																							"typeString": "int_const 4294967296"
																						}
																					},
																					"src": "3903:17:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 1081,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3924:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "3903:22:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"hexValue": "31",
																				"id": 1084,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3932:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"id": 1085,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "3903:30:9",
																			"trueExpression": {
																				"hexValue": "30",
																				"id": 1083,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3928:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"id": 1086,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3902:32:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "3886:48:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1070,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3878:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint160_$",
																"typeString": "type(uint160)"
															},
															"typeName": {
																"id": 1069,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "3878:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1088,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3878:57:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3863:72:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 1090,
												"nodeType": "ExpressionStatement",
												"src": "3863:72:9"
											}
										]
									},
									"documentation": {
										"id": 719,
										"nodeType": "StructuredDocumentation",
										"src": "1060:297:9",
										"text": "@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"
									},
									"id": 1092,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSqrtRatioAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 721,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "1390:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 720,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1390:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1389:12:9"
									},
									"returnParameters": {
										"id": 725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "1425:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 723,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1424:22:9"
									},
									"scope": 1232,
									"src": "1362:2580:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1230,
										"nodeType": "Block",
										"src": "4446:4196:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1103,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1101,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1095,
																	"src": "4563:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 1102,
																	"name": "MIN_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 714,
																	"src": "4579:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4563:30:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1106,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1104,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1095,
																	"src": "4597:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1105,
																	"name": "MAX_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 718,
																	"src": "4612:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4597:29:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4563:63:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52",
															"id": 1108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4628:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															},
															"value": "R"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															}
														],
														"id": 1100,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4555:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4555:77:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1110,
												"nodeType": "ExpressionStatement",
												"src": "4555:77:9"
											},
											{
												"assignments": [
													1112
												],
												"declarations": [
													{
														"constant": false,
														"id": 1112,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "4642:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1111,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4642:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1119,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1115,
																"name": "sqrtPriceX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1095,
																"src": "4666:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 1114,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4658:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1113,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4658:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1116,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4658:21:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1117,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4683:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "4658:27:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4642:43:9"
											},
											{
												"assignments": [
													1121
												],
												"declarations": [
													{
														"constant": false,
														"id": 1121,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "4696:9:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1120,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4696:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1123,
												"initialValue": {
													"id": 1122,
													"name": "ratio",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1112,
													"src": "4708:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4696:17:9"
											},
											{
												"assignments": [
													1125
												],
												"declarations": [
													{
														"constant": false,
														"id": 1125,
														"mutability": "mutable",
														"name": "msb",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "4723:11:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1124,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4723:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1127,
												"initialValue": {
													"hexValue": "30",
													"id": 1126,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4737:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4723:15:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4758:139:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4772:58:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4785:1:9",
																		"type": "",
																		"value": "7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4791:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4794:34:9",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4788:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4788:41:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4781:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4781:49:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4776:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4843:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4853:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4858:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4850:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4850:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4843:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4873:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4882:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "4885:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4878:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4878:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4873:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "4843:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "4853:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "4791:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "4873:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "4885:1:9",
														"valueSize": 1
													}
												],
												"id": 1128,
												"nodeType": "InlineAssembly",
												"src": "4749:148:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4915:123:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4929:42:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4942:1:9",
																		"type": "",
																		"value": "6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4948:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4951:18:9",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4945:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4945:25:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4938:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4938:33:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4933:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4984:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4994:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4999:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4991:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4991:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4984:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5014:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5023:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5026:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5019:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5019:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5014:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "4984:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "4994:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "4948:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5014:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5026:1:9",
														"valueSize": 1
													}
												],
												"id": 1129,
												"nodeType": "InlineAssembly",
												"src": "4906:132:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5056:115:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5070:34:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5083:1:9",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5089:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5092:10:9",
																				"type": "",
																				"value": "0xFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5086:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5086:17:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5079:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5079:25:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5074:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5117:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5127:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5132:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5124:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5124:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5117:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5147:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5156:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5159:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5152:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5152:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5147:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5117:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5127:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5089:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5147:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5159:1:9",
														"valueSize": 1
													}
												],
												"id": 1130,
												"nodeType": "InlineAssembly",
												"src": "5047:124:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5189:111:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5203:30:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5216:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5222:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5225:6:9",
																				"type": "",
																				"value": "0xFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5219:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:13:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5212:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:21:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5207:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5246:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5256:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5261:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5253:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5253:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5246:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5276:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5285:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5288:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5281:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5281:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5276:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5246:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5256:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5222:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5276:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5288:1:9",
														"valueSize": 1
													}
												],
												"id": 1131,
												"nodeType": "InlineAssembly",
												"src": "5180:120:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5318:109:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5332:28:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5345:1:9",
																		"type": "",
																		"value": "3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5351:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5354:4:9",
																				"type": "",
																				"value": "0xFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5348:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5348:11:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5341:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5341:19:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5336:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5373:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5383:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5388:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5380:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5380:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5373:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5403:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5412:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5415:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5408:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5408:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5403:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5373:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5383:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5351:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5403:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5415:1:9",
														"valueSize": 1
													}
												],
												"id": 1132,
												"nodeType": "InlineAssembly",
												"src": "5309:118:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5445:108:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5459:27:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5472:1:9",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5478:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5481:3:9",
																				"type": "",
																				"value": "0xF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5475:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5475:10:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5468:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5468:18:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5463:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5499:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5509:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5514:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5506:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5506:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5499:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5529:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5538:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5541:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5534:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5534:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5529:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5499:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5509:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5478:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5529:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5541:1:9",
														"valueSize": 1
													}
												],
												"id": 1133,
												"nodeType": "InlineAssembly",
												"src": "5436:117:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5571:108:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5585:27:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5598:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5604:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5607:3:9",
																				"type": "",
																				"value": "0x3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5601:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5601:10:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5594:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5594:18:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5589:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5625:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5635:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5640:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5632:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5632:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5625:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5655:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5664:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5667:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5660:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5660:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5655:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5625:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5635:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5604:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5655:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5667:1:9",
														"valueSize": 1
													}
												],
												"id": 1134,
												"nodeType": "InlineAssembly",
												"src": "5562:117:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5697:73:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5711:19:9",
															"value": {
																"arguments": [
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5723:1:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5726:3:9",
																		"type": "",
																		"value": "0x1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5720:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5720:10:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5715:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5743:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5753:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5758:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5750:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5750:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5743:3:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5743:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1125,
														"isOffset": false,
														"isSlot": false,
														"src": "5753:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5723:1:9",
														"valueSize": 1
													}
												],
												"id": 1135,
												"nodeType": "InlineAssembly",
												"src": "5688:82:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1136,
														"name": "msb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1125,
														"src": "5784:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "313238",
														"id": 1137,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5791:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_128_by_1",
															"typeString": "int_const 128"
														},
														"value": "128"
													},
													"src": "5784:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 1155,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1148,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1121,
															"src": "5835:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1154,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1149,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1112,
																"src": "5839:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1152,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "313237",
																			"id": 1150,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5849:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 1151,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1125,
																			"src": "5855:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5849:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1153,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5848:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5839:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5835:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1156,
													"nodeType": "ExpressionStatement",
													"src": "5835:24:9"
												},
												"id": 1157,
												"nodeType": "IfStatement",
												"src": "5780:79:9",
												"trueBody": {
													"expression": {
														"id": 1146,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1139,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1121,
															"src": "5796:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1145,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1140,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1112,
																"src": "5800:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1143,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1141,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1125,
																			"src": "5810:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "313237",
																			"id": 1142,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5816:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"src": "5810:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1144,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5809:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5800:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5796:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1147,
													"nodeType": "ExpressionStatement",
													"src": "5796:24:9"
												}
											},
											{
												"assignments": [
													1159
												],
												"declarations": [
													{
														"constant": false,
														"id": 1159,
														"mutability": "mutable",
														"name": "log_2",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "5870:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1158,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "5870:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1169,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1165,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1162,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1125,
																			"src": "5893:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5886:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1160,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5886:6:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1163,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5886:11:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1164,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5900:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "5886:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 1166,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5885:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3634",
														"id": 1167,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5908:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_64_by_1",
															"typeString": "int_const 64"
														},
														"value": "64"
													},
													"src": "5885:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5870:40:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5930:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5944:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5953:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5962:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5965:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "5958:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5958:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5949:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5949:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5944:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5981:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5994:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5999:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5990:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5990:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5985:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6014:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6026:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6037:2:9",
																				"type": "",
																				"value": "63"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6041:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6033:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6033:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6023:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6023:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6014:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6057:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6066:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6069:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6062:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6062:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6057:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6014:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6026:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5944:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5962:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5965:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "5999:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6057:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6069:1:9",
														"valueSize": 1
													}
												],
												"id": 1170,
												"nodeType": "InlineAssembly",
												"src": "5921:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6099:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6113:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6122:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6131:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6134:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6127:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6127:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6118:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6118:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6113:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6150:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6163:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6168:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6159:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6159:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6154:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6183:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6195:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6206:2:9",
																				"type": "",
																				"value": "62"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6210:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6202:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6202:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6192:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6192:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6183:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6226:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6235:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6238:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6231:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6231:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6226:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6183:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6195:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6113:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6131:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6134:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6168:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6226:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6238:1:9",
														"valueSize": 1
													}
												],
												"id": 1171,
												"nodeType": "InlineAssembly",
												"src": "6090:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6268:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6282:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6291:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6300:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6303:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6296:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6296:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6287:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6287:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6282:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6319:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6332:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6337:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6328:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6328:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6323:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6352:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6364:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6375:2:9",
																				"type": "",
																				"value": "61"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6379:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6371:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6371:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6361:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6361:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6352:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6395:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6404:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6407:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6400:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6400:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6395:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6352:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6364:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6282:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6300:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6303:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6337:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6395:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6407:1:9",
														"valueSize": 1
													}
												],
												"id": 1172,
												"nodeType": "InlineAssembly",
												"src": "6259:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6437:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6451:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6460:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6469:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6472:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6465:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6465:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6456:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6456:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6451:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6488:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6501:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6506:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6497:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6497:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6492:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6521:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6533:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6544:2:9",
																				"type": "",
																				"value": "60"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6548:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6540:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6540:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6530:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6530:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6521:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6564:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6573:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6576:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6569:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6569:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6564:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6521:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6533:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6451:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6469:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6472:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6506:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6564:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6576:1:9",
														"valueSize": 1
													}
												],
												"id": 1173,
												"nodeType": "InlineAssembly",
												"src": "6428:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6606:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6620:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6629:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6638:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6641:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6634:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6634:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6625:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6625:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6620:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6657:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6670:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6675:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6666:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6666:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6661:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6690:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6702:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6713:2:9",
																				"type": "",
																				"value": "59"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6717:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6709:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6709:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6699:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6699:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6690:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6733:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6742:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6745:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6738:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6738:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6733:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6690:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6702:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6620:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6638:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6641:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6675:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6733:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6745:1:9",
														"valueSize": 1
													}
												],
												"id": 1174,
												"nodeType": "InlineAssembly",
												"src": "6597:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6775:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6789:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6798:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6807:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6810:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6803:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6803:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6794:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6794:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6789:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6826:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6839:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6844:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6835:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6835:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6830:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6859:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6871:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6882:2:9",
																				"type": "",
																				"value": "58"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6886:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6878:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6878:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6868:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6868:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6859:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6902:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6911:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6914:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6907:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6907:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6902:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6859:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "6871:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6789:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6807:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6810:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6844:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6902:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6914:1:9",
														"valueSize": 1
													}
												],
												"id": 1175,
												"nodeType": "InlineAssembly",
												"src": "6766:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6944:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6958:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6967:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6976:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6979:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6972:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6972:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6963:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6963:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6958:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6995:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7008:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7013:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7004:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7004:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6999:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7028:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7040:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7051:2:9",
																				"type": "",
																				"value": "57"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7055:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7047:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7047:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7037:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7037:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7028:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7071:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7080:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7083:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7076:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7076:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7071:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7028:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7040:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6958:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6976:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "6979:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7013:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7071:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7083:1:9",
														"valueSize": 1
													}
												],
												"id": 1176,
												"nodeType": "InlineAssembly",
												"src": "6935:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7113:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7127:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7136:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7145:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7148:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7141:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7141:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7132:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7132:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7127:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7164:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7177:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7182:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7173:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7173:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7168:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7197:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7209:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7220:2:9",
																				"type": "",
																				"value": "56"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7224:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7216:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7216:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7206:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7206:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7197:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7240:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7249:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7252:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7245:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7245:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7240:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7197:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7209:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7127:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7145:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7148:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7182:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7240:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7252:1:9",
														"valueSize": 1
													}
												],
												"id": 1177,
												"nodeType": "InlineAssembly",
												"src": "7104:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7282:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7296:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7305:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7314:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7317:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7310:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7310:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7301:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7301:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7296:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7333:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7346:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7351:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7342:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7342:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7337:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7366:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7378:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7389:2:9",
																				"type": "",
																				"value": "55"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7393:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7385:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7385:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7375:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7375:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7366:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7409:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7418:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7421:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7414:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7414:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7409:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7366:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7378:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7296:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7314:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7317:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7351:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7409:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7421:1:9",
														"valueSize": 1
													}
												],
												"id": 1178,
												"nodeType": "InlineAssembly",
												"src": "7273:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7451:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7465:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7474:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7483:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7486:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7479:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7479:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7470:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7470:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7465:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7502:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7515:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7520:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7511:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7511:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7506:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7535:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7547:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7558:2:9",
																				"type": "",
																				"value": "54"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7562:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7554:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7554:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7544:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7544:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7535:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7578:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7587:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7590:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7583:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7583:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7578:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7535:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7547:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7465:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7483:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7486:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7520:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7578:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7590:1:9",
														"valueSize": 1
													}
												],
												"id": 1179,
												"nodeType": "InlineAssembly",
												"src": "7442:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7620:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7634:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7643:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7652:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7655:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7648:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7648:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7639:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7639:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7634:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7671:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7684:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7689:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7680:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7680:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7675:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7704:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7716:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7727:2:9",
																				"type": "",
																				"value": "53"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7731:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7723:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7723:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7713:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7713:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7704:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7747:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7756:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7759:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7752:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7752:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7747:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7704:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7716:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7634:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7652:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7655:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7689:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7747:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7759:1:9",
														"valueSize": 1
													}
												],
												"id": 1180,
												"nodeType": "InlineAssembly",
												"src": "7611:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7789:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7803:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7812:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7821:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7824:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7817:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7817:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7808:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7808:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7803:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7840:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7853:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7858:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7849:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7849:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7844:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7873:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7885:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7896:2:9",
																				"type": "",
																				"value": "52"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7900:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7892:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7892:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7882:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7882:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7873:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7916:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7925:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7928:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7921:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7921:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7916:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7873:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "7885:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7803:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7821:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7824:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7858:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7916:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7928:1:9",
														"valueSize": 1
													}
												],
												"id": 1181,
												"nodeType": "InlineAssembly",
												"src": "7780:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7958:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7972:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7981:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7990:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7993:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7986:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7986:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7977:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7977:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7972:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8009:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8022:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8027:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8018:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8018:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8013:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8042:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8054:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8065:2:9",
																				"type": "",
																				"value": "51"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8069:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8061:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8061:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8051:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8051:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8042:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8085:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "8094:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8097:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8090:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8090:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8085:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "8042:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "8054:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7972:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7990:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "7993:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8027:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8085:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8097:1:9",
														"valueSize": 1
													}
												],
												"id": 1182,
												"nodeType": "InlineAssembly",
												"src": "7949:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8127:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8141:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8150:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8159:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8162:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "8155:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8155:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8146:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8146:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8141:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8178:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8191:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8196:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8187:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8187:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8182:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8211:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8223:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8234:2:9",
																				"type": "",
																				"value": "50"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8238:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8230:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8230:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8220:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8220:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8211:5:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "8211:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1159,
														"isOffset": false,
														"isSlot": false,
														"src": "8223:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8141:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8159:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8162:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1121,
														"isOffset": false,
														"isSlot": false,
														"src": "8196:1:9",
														"valueSize": 1
													}
												],
												"id": 1183,
												"nodeType": "InlineAssembly",
												"src": "8118:133:9"
											},
											{
												"assignments": [
													1185
												],
												"declarations": [
													{
														"constant": false,
														"id": 1185,
														"mutability": "mutable",
														"name": "log_sqrt10001",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "8261:20:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1184,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "8261:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1189,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1186,
														"name": "log_2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1159,
														"src": "8284:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "323535373338393538393939363033383236333437313431",
														"id": 1187,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8292:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255738958999603826347141_by_1",
															"typeString": "int_const 255738958999603826347141"
														},
														"value": "255738958999603826347141"
													},
													"src": "8284:32:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8261:55:9"
											},
											{
												"assignments": [
													1191
												],
												"declarations": [
													{
														"constant": false,
														"id": 1191,
														"mutability": "mutable",
														"name": "tickLow",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "8345:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1190,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8345:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1201,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1199,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1194,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1185,
																			"src": "8368:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "33343032393932393536383039313332343138353936313430313030363630323437323130",
																			"id": 1195,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8384:37:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3402992956809132418596140100660247210_by_1",
																				"typeString": "int_const 3402...(29 digits omitted)...7210"
																			},
																			"value": "3402992956809132418596140100660247210"
																		},
																		"src": "8368:53:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1197,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8367:55:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1198,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8426:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8367:62:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1193,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8361:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1192,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8361:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 1200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8361:69:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8345:85:9"
											},
											{
												"assignments": [
													1203
												],
												"declarations": [
													{
														"constant": false,
														"id": 1203,
														"mutability": "mutable",
														"name": "tickHi",
														"nodeType": "VariableDeclaration",
														"scope": 1230,
														"src": "8440:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1202,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8440:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1213,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1208,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1206,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1185,
																			"src": "8462:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "323931333339343634373731393839363232393037303237363231313533333938303838343935",
																			"id": 1207,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8478:39:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_291339464771989622907027621153398088495_by_1",
																				"typeString": "int_const 2913...(31 digits omitted)...8495"
																			},
																			"value": "291339464771989622907027621153398088495"
																		},
																		"src": "8462:55:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1209,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8461:57:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1210,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8522:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8461:64:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1205,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8455:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1204,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8455:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 1212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8455:71:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8440:86:9"
											},
											{
												"expression": {
													"id": 1228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1214,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1098,
														"src": "8537:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 1217,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1215,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1191,
																"src": "8544:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1216,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1203,
																"src": "8555:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "8544:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1223,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1220,
																			"name": "tickHi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1203,
																			"src": "8593:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 1219,
																		"name": "getSqrtRatioAtTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1092,
																		"src": "8574:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
																			"typeString": "function (int24) pure returns (uint160)"
																		}
																	},
																	"id": 1221,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8574:26:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 1222,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1095,
																	"src": "8604:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8574:42:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 1225,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1191,
																"src": "8628:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 1226,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "8574:61:9",
															"trueExpression": {
																"id": 1224,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1203,
																"src": "8619:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"id": 1227,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "8544:91:9",
														"trueExpression": {
															"id": 1218,
															"name": "tickLow",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1191,
															"src": "8564:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "8537:98:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1229,
												"nodeType": "ExpressionStatement",
												"src": "8537:98:9"
											}
										]
									},
									"documentation": {
										"id": 1093,
										"nodeType": "StructuredDocumentation",
										"src": "3948:408:9",
										"text": "@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"
									},
									"id": 1231,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTickAtSqrtRatio",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1231,
												"src": "4389:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1094,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4389:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4388:22:9"
									},
									"returnParameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1231,
												"src": "4434:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1097,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4434:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4433:12:9"
									},
									"scope": 1232,
									"src": "4361:4281:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1233,
							"src": "313:8331:9"
						}
					],
					"src": "45:8600:9"
				},
				"id": 9
			},
			"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol",
					"exportedSymbols": {
						"FullMath": [
							697
						],
						"IUniswapV3Pool": [
							104
						],
						"IUniswapV3PoolActions": [
							200
						],
						"IUniswapV3PoolDerivedState": [
							231
						],
						"IUniswapV3PoolEvents": [
							350
						],
						"IUniswapV3PoolImmutables": [
							390
						],
						"IUniswapV3PoolOwnerActions": [
							416
						],
						"IUniswapV3PoolState": [
							524
						],
						"OracleLibrary": [
							1821
						],
						"TickMath": [
							1232
						]
					},
					"id": 1822,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1234,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:10"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/libraries/FullMath.sol",
							"file": "@uniswap/v3-core/contracts/libraries/FullMath.sol",
							"id": 1235,
							"nodeType": "ImportDirective",
							"scope": 1822,
							"sourceUnit": 698,
							"src": "78:59:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/libraries/TickMath.sol",
							"file": "@uniswap/v3-core/contracts/libraries/TickMath.sol",
							"id": 1236,
							"nodeType": "ImportDirective",
							"scope": 1822,
							"sourceUnit": 1233,
							"src": "138:59:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"id": 1237,
							"nodeType": "ImportDirective",
							"scope": 1822,
							"sourceUnit": 105,
							"src": "198:66:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1238,
								"nodeType": "StructuredDocumentation",
								"src": "266:90:10",
								"text": "@title Oracle library\n @notice Provides functions to integrate with V3 pool oracle"
							},
							"fullyImplemented": true,
							"id": 1821,
							"linearizedBaseContracts": [
								1821
							],
							"name": "OracleLibrary",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1366,
										"nodeType": "Block",
										"src": "1043:1069:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															"id": 1253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1251,
																"name": "secondsAgo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1243,
																"src": "1061:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 1252,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1075:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1061:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4250",
															"id": 1254,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1078:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6f8c752f16a50d13ae873620fdefd90c2c58e0d13a068366e5a1b685076b71bb",
																"typeString": "literal_string \"BP\""
															},
															"value": "BP"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6f8c752f16a50d13ae873620fdefd90c2c58e0d13a068366e5a1b685076b71bb",
																"typeString": "literal_string \"BP\""
															}
														],
														"id": 1250,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1053:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1053:30:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1256,
												"nodeType": "ExpressionStatement",
												"src": "1053:30:10"
											},
											{
												"assignments": [
													1261
												],
												"declarations": [
													{
														"constant": false,
														"id": 1261,
														"mutability": "mutable",
														"name": "secondsAgos",
														"nodeType": "VariableDeclaration",
														"scope": 1366,
														"src": "1094:27:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
															"typeString": "uint32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1259,
																"name": "uint32",
																"nodeType": "ElementaryTypeName",
																"src": "1094:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 1260,
															"nodeType": "ArrayTypeName",
															"src": "1094:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
																"typeString": "uint32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1267,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "32",
															"id": 1265,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1137:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															}
														],
														"id": 1264,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1124:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (uint32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1262,
																"name": "uint32",
																"nodeType": "ElementaryTypeName",
																"src": "1128:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 1263,
															"nodeType": "ArrayTypeName",
															"src": "1128:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
																"typeString": "uint32[]"
															}
														}
													},
													"id": 1266,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1124:15:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
														"typeString": "uint32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1094:45:10"
											},
											{
												"expression": {
													"id": 1272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1268,
															"name": "secondsAgos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1261,
															"src": "1149:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
																"typeString": "uint32[] memory"
															}
														},
														"id": 1270,
														"indexExpression": {
															"hexValue": "30",
															"id": 1269,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1161:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1149:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1271,
														"name": "secondsAgo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1243,
														"src": "1166:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "1149:27:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"id": 1273,
												"nodeType": "ExpressionStatement",
												"src": "1149:27:10"
											},
											{
												"expression": {
													"id": 1278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1274,
															"name": "secondsAgos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1261,
															"src": "1186:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
																"typeString": "uint32[] memory"
															}
														},
														"id": 1276,
														"indexExpression": {
															"hexValue": "31",
															"id": 1275,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1198:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1186:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1277,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1203:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1186:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"id": 1279,
												"nodeType": "ExpressionStatement",
												"src": "1186:18:10"
											},
											{
												"assignments": [
													1284,
													1287
												],
												"declarations": [
													{
														"constant": false,
														"id": 1284,
														"mutability": "mutable",
														"name": "tickCumulatives",
														"nodeType": "VariableDeclaration",
														"scope": 1366,
														"src": "1216:30:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
															"typeString": "int56[]"
														},
														"typeName": {
															"baseType": {
																"id": 1282,
																"name": "int56",
																"nodeType": "ElementaryTypeName",
																"src": "1216:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																}
															},
															"id": 1283,
															"nodeType": "ArrayTypeName",
															"src": "1216:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
																"typeString": "int56[]"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1287,
														"mutability": "mutable",
														"name": "secondsPerLiquidityCumulativeX128s",
														"nodeType": "VariableDeclaration",
														"scope": 1366,
														"src": "1248:51:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
															"typeString": "uint160[]"
														},
														"typeName": {
															"baseType": {
																"id": 1285,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "1248:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 1286,
															"nodeType": "ArrayTypeName",
															"src": "1248:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
																"typeString": "uint160[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1294,
												"initialValue": {
													"arguments": [
														{
															"id": 1292,
															"name": "secondsAgos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1261,
															"src": "1344:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
																"typeString": "uint32[] memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
																"typeString": "uint32[] memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1289,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1241,
																	"src": "1330:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1288,
																"name": "IUniswapV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 104,
																"src": "1315:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$104_$",
																	"typeString": "type(contract IUniswapV3Pool)"
																}
															},
															"id": 1290,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1315:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$104",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 1291,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "observe",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 216,
														"src": "1315:28:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_array$_t_uint32_$dyn_memory_ptr_$returns$_t_array$_t_int56_$dyn_memory_ptr_$_t_array$_t_uint160_$dyn_memory_ptr_$",
															"typeString": "function (uint32[] memory) view external returns (int56[] memory,uint160[] memory)"
														}
													},
													"id": 1293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1315:41:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_array$_t_int56_$dyn_memory_ptr_$_t_array$_t_uint160_$dyn_memory_ptr_$",
														"typeString": "tuple(int56[] memory,uint160[] memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1215:141:10"
											},
											{
												"assignments": [
													1296
												],
												"declarations": [
													{
														"constant": false,
														"id": 1296,
														"mutability": "mutable",
														"name": "tickCumulativesDelta",
														"nodeType": "VariableDeclaration",
														"scope": 1366,
														"src": "1367:26:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														},
														"typeName": {
															"id": 1295,
															"name": "int56",
															"nodeType": "ElementaryTypeName",
															"src": "1367:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1304,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													},
													"id": 1303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 1297,
															"name": "tickCumulatives",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "1396:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
																"typeString": "int56[] memory"
															}
														},
														"id": 1299,
														"indexExpression": {
															"hexValue": "31",
															"id": 1298,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1412:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1396:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"baseExpression": {
															"id": 1300,
															"name": "tickCumulatives",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "1417:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
																"typeString": "int56[] memory"
															}
														},
														"id": 1302,
														"indexExpression": {
															"hexValue": "30",
															"id": 1301,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1433:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1417:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"src": "1396:39:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1367:68:10"
											},
											{
												"assignments": [
													1306
												],
												"declarations": [
													{
														"constant": false,
														"id": 1306,
														"mutability": "mutable",
														"name": "secondsPerLiquidityCumulativesDelta",
														"nodeType": "VariableDeclaration",
														"scope": 1366,
														"src": "1445:43:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 1305,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "1445:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1314,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 1307,
															"name": "secondsPerLiquidityCumulativeX128s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1287,
															"src": "1503:34:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
																"typeString": "uint160[] memory"
															}
														},
														"id": 1309,
														"indexExpression": {
															"hexValue": "31",
															"id": 1308,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1538:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1503:37:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"baseExpression": {
															"id": 1310,
															"name": "secondsPerLiquidityCumulativeX128s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1287,
															"src": "1543:34:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
																"typeString": "uint160[] memory"
															}
														},
														"id": 1312,
														"indexExpression": {
															"hexValue": "30",
															"id": 1311,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1578:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1543:37:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "1503:77:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1445:135:10"
											},
											{
												"expression": {
													"id": 1322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1315,
														"name": "arithmeticMeanTick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1246,
														"src": "1591:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																},
																"id": 1320,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1318,
																	"name": "tickCumulativesDelta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1296,
																	"src": "1618:20:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int56",
																		"typeString": "int56"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 1319,
																	"name": "secondsAgo",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1243,
																	"src": "1641:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"src": "1618:33:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																}
															],
															"id": 1317,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1612:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int24_$",
																"typeString": "type(int24)"
															},
															"typeName": {
																"id": 1316,
																"name": "int24",
																"nodeType": "ElementaryTypeName",
																"src": "1612:5:10",
																"typeDescriptions": {}
															}
														},
														"id": 1321,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1612:40:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "1591:61:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1323,
												"nodeType": "ExpressionStatement",
												"src": "1591:61:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														},
														"id": 1326,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1324,
															"name": "tickCumulativesDelta",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1296,
															"src": "1711:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 1325,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1734:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1711:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																},
																"id": 1331,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_int56",
																		"typeString": "int56"
																	},
																	"id": 1329,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1327,
																		"name": "tickCumulativesDelta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1296,
																		"src": "1740:20:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int56",
																			"typeString": "int56"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 1328,
																		"name": "secondsAgo",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1243,
																		"src": "1763:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint32",
																			"typeString": "uint32"
																		}
																	},
																	"src": "1740:33:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int56",
																		"typeString": "int56"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1330,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1777:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1740:38:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 1332,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1739:40:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1711:68:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1337,
												"nodeType": "IfStatement",
												"src": "1707:94:10",
												"trueBody": {
													"expression": {
														"id": 1335,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": false,
														"src": "1781:20:10",
														"subExpression": {
															"id": 1334,
															"name": "arithmeticMeanTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1246,
															"src": "1781:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"id": 1336,
													"nodeType": "ExpressionStatement",
													"src": "1781:20:10"
												}
											},
											{
												"assignments": [
													1339
												],
												"declarations": [
													{
														"constant": false,
														"id": 1339,
														"mutability": "mutable",
														"name": "secondsAgoX160",
														"nodeType": "VariableDeclaration",
														"scope": 1366,
														"src": "1929:22:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint192",
															"typeString": "uint192"
														},
														"typeName": {
															"id": 1338,
															"name": "uint192",
															"nodeType": "ElementaryTypeName",
															"src": "1929:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint192",
																"typeString": "uint192"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1350,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint192",
														"typeString": "uint192"
													},
													"id": 1349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1342,
																"name": "secondsAgo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1243,
																"src": "1962:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															],
															"id": 1341,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1954:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint192_$",
																"typeString": "type(uint192)"
															},
															"typeName": {
																"id": 1340,
																"name": "uint192",
																"nodeType": "ElementaryTypeName",
																"src": "1954:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 1343,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1954:19:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint192",
															"typeString": "uint192"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1346,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1981:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint160_$",
																		"typeString": "type(uint160)"
																	},
																	"typeName": {
																		"id": 1345,
																		"name": "uint160",
																		"nodeType": "ElementaryTypeName",
																		"src": "1981:7:10",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint160_$",
																		"typeString": "type(uint160)"
																	}
																],
																"id": 1344,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "1976:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1347,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1976:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint160",
																"typeString": "type(uint160)"
															}
														},
														"id": 1348,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "1976:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "1954:39:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint192",
														"typeString": "uint192"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1929:64:10"
											},
											{
												"expression": {
													"id": 1364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1351,
														"name": "harmonicMeanLiquidity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1248,
														"src": "2003:21:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint192",
																	"typeString": "uint192"
																},
																"id": 1362,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1354,
																	"name": "secondsAgoX160",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1339,
																	"src": "2035:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint192",
																		"typeString": "uint192"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint192",
																				"typeString": "uint192"
																			},
																			"id": 1360,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 1357,
																						"name": "secondsPerLiquidityCumulativesDelta",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1306,
																						"src": "2061:35:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					],
																					"id": 1356,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "2053:7:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint192_$",
																						"typeString": "type(uint192)"
																					},
																					"typeName": {
																						"id": 1355,
																						"name": "uint192",
																						"nodeType": "ElementaryTypeName",
																						"src": "2053:7:10",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1358,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2053:44:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint192",
																					"typeString": "uint192"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<<",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 1359,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2101:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "2053:50:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint192",
																				"typeString": "uint192"
																			}
																		}
																	],
																	"id": 1361,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2052:52:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint192",
																		"typeString": "uint192"
																	}
																},
																"src": "2035:69:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint192",
																	"typeString": "uint192"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint192",
																	"typeString": "uint192"
																}
															],
															"id": 1353,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2027:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint128_$",
																"typeString": "type(uint128)"
															},
															"typeName": {
																"id": 1352,
																"name": "uint128",
																"nodeType": "ElementaryTypeName",
																"src": "2027:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 1363,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2027:78:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "2003:102:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"id": 1365,
												"nodeType": "ExpressionStatement",
												"src": "2003:102:10"
											}
										]
									},
									"documentation": {
										"id": 1239,
										"nodeType": "StructuredDocumentation",
										"src": "384:496:10",
										"text": "@notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\n @param pool Address of the pool that we want to observe\n @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\n @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\n @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp"
									},
									"id": 1367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "consult",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "902:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "902:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "secondsAgo",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "916:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1242,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "916:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "901:33:10"
									},
									"returnParameters": {
										"id": 1249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "arithmeticMeanTick",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "982:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1245,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "982:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "harmonicMeanLiquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "1008:29:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1247,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1008:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "981:57:10"
									},
									"scope": 1821,
									"src": "885:1227:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1464,
										"nodeType": "Block",
										"src": "2793:778:10",
										"statements": [
											{
												"assignments": [
													1382
												],
												"declarations": [
													{
														"constant": false,
														"id": 1382,
														"mutability": "mutable",
														"name": "sqrtRatioX96",
														"nodeType": "VariableDeclaration",
														"scope": 1464,
														"src": "2803:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 1381,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "2803:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1387,
												"initialValue": {
													"arguments": [
														{
															"id": 1385,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1370,
															"src": "2854:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														],
														"expression": {
															"id": 1383,
															"name": "TickMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1232,
															"src": "2826:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TickMath_$1232_$",
																"typeString": "type(library TickMath)"
															}
														},
														"id": 1384,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "getSqrtRatioAtTick",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1092,
														"src": "2826:27:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
															"typeString": "function (int24) pure returns (uint160)"
														}
													},
													"id": 1386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2826:33:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2803:56:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1388,
														"name": "sqrtRatioX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1382,
														"src": "2978:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1391,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2999:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint128_$",
																		"typeString": "type(uint128)"
																	},
																	"typeName": {
																		"id": 1390,
																		"name": "uint128",
																		"nodeType": "ElementaryTypeName",
																		"src": "2999:7:10",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint128_$",
																		"typeString": "type(uint128)"
																	}
																],
																"id": 1389,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "2994:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1392,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2994:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint128",
																"typeString": "type(uint128)"
															}
														},
														"id": 1393,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "2994:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "2978:33:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1462,
													"nodeType": "Block",
													"src": "3284:281:10",
													"statements": [
														{
															"assignments": [
																1429
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1429,
																	"mutability": "mutable",
																	"name": "ratioX128",
																	"nodeType": "VariableDeclaration",
																	"scope": 1462,
																	"src": "3298:17:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1428,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3298:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1438,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1432,
																		"name": "sqrtRatioX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1382,
																		"src": "3334:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"id": 1433,
																		"name": "sqrtRatioX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1382,
																		"src": "3348:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_rational_18446744073709551616_by_1",
																			"typeString": "int_const 18446744073709551616"
																		},
																		"id": 1436,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "31",
																			"id": 1434,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3362:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<<",
																		"rightExpression": {
																			"hexValue": "3634",
																			"id": 1435,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3367:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "3362:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_18446744073709551616_by_1",
																			"typeString": "int_const 18446744073709551616"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		{
																			"typeIdentifier": "t_rational_18446744073709551616_by_1",
																			"typeString": "int_const 18446744073709551616"
																		}
																	],
																	"expression": {
																		"id": 1430,
																		"name": "FullMath",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "3318:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_FullMath_$697_$",
																			"typeString": "type(library FullMath)"
																		}
																	},
																	"id": 1431,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "mulDiv",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 653,
																	"src": "3318:15:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1437,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3318:52:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3298:72:10"
														},
														{
															"expression": {
																"id": 1460,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1439,
																	"name": "quoteAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1379,
																	"src": "3384:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1442,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1440,
																			"name": "baseToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1374,
																			"src": "3398:9:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1441,
																			"name": "quoteToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1376,
																			"src": "3410:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "3398:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"arguments": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				},
																				"id": 1455,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 1453,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3522:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"hexValue": "313238",
																					"id": 1454,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3527:3:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_128_by_1",
																						"typeString": "int_const 128"
																					},
																					"value": "128"
																				},
																				"src": "3522:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				}
																			},
																			{
																				"id": 1456,
																				"name": "baseAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1372,
																				"src": "3532:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			{
																				"id": 1457,
																				"name": "ratioX128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1429,
																				"src": "3544:9:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1451,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 697,
																				"src": "3506:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$697_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 1452,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDiv",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 653,
																			"src": "3506:15:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1458,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3506:48:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1459,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "3398:156:10",
																	"trueExpression": {
																		"arguments": [
																			{
																				"id": 1445,
																				"name": "ratioX128",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1429,
																				"src": "3455:9:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 1446,
																				"name": "baseAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1372,
																				"src": "3466:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				},
																				"id": 1449,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 1447,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3478:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"hexValue": "313238",
																					"id": 1448,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3483:3:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_128_by_1",
																						"typeString": "int_const 128"
																					},
																					"value": "128"
																				},
																				"src": "3478:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				},
																				{
																					"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
																					"typeString": "int_const 3402...(31 digits omitted)...1456"
																				}
																			],
																			"expression": {
																				"id": 1443,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 697,
																				"src": "3439:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$697_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 1444,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDiv",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 653,
																			"src": "3439:15:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1450,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3439:48:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3384:170:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1461,
															"nodeType": "ExpressionStatement",
															"src": "3384:170:10"
														}
													]
												},
												"id": 1463,
												"nodeType": "IfStatement",
												"src": "2974:591:10",
												"trueBody": {
													"id": 1427,
													"nodeType": "Block",
													"src": "3013:265:10",
													"statements": [
														{
															"assignments": [
																1396
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1396,
																	"mutability": "mutable",
																	"name": "ratioX192",
																	"nodeType": "VariableDeclaration",
																	"scope": 1427,
																	"src": "3027:17:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1395,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3027:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1403,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1402,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1399,
																			"name": "sqrtRatioX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1382,
																			"src": "3055:12:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1398,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3047:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1397,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "3047:7:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1400,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3047:21:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1401,
																	"name": "sqrtRatioX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1382,
																	"src": "3071:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "3047:36:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3027:56:10"
														},
														{
															"expression": {
																"id": 1425,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1404,
																	"name": "quoteAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1379,
																	"src": "3097:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1407,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1405,
																			"name": "baseToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1374,
																			"src": "3111:9:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1406,
																			"name": "quoteToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1376,
																			"src": "3123:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "3111:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"arguments": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				},
																				"id": 1420,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 1418,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3235:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"hexValue": "313932",
																					"id": 1419,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3240:3:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_192_by_1",
																						"typeString": "int_const 192"
																					},
																					"value": "192"
																				},
																				"src": "3235:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				}
																			},
																			{
																				"id": 1421,
																				"name": "baseAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1372,
																				"src": "3245:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			{
																				"id": 1422,
																				"name": "ratioX192",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1396,
																				"src": "3257:9:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1416,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 697,
																				"src": "3219:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$697_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 1417,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDiv",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 653,
																			"src": "3219:15:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1423,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3219:48:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "3111:156:10",
																	"trueExpression": {
																		"arguments": [
																			{
																				"id": 1410,
																				"name": "ratioX192",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1396,
																				"src": "3168:9:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 1411,
																				"name": "baseAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1372,
																				"src": "3179:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				},
																				"id": 1414,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "31",
																					"id": 1412,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3191:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<<",
																				"rightExpression": {
																					"hexValue": "313932",
																					"id": 1413,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3196:3:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_192_by_1",
																						"typeString": "int_const 192"
																					},
																					"value": "192"
																				},
																				"src": "3191:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				},
																				{
																					"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																					"typeString": "int_const 6277...(50 digits omitted)...2896"
																				}
																			],
																			"expression": {
																				"id": 1408,
																				"name": "FullMath",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 697,
																				"src": "3152:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_FullMath_$697_$",
																					"typeString": "type(library FullMath)"
																				}
																			},
																			"id": 1409,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mulDiv",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 653,
																			"src": "3152:15:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1415,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3152:48:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3097:170:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1426,
															"nodeType": "ExpressionStatement",
															"src": "3097:170:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1368,
										"nodeType": "StructuredDocumentation",
										"src": "2118:493:10",
										"text": "@notice Given a tick and a token amount, calculates the amount of token received in exchange\n @param tick Tick value used to calculate the quote\n @param baseAmount Amount of token to be converted\n @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\n @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\n @return quoteAmount Amount of quoteToken received for baseAmount of baseToken"
									},
									"id": 1465,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getQuoteAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "2649:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1369,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2649:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "baseAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "2669:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1371,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2669:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "baseToken",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "2697:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2697:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "quoteToken",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "2724:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1375,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2639:109:10"
									},
									"returnParameters": {
										"id": 1380,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1379,
												"mutability": "mutable",
												"name": "quoteAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "2772:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1378,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2772:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2771:21:10"
									},
									"scope": 1821,
									"src": "2616:955:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1530,
										"nodeType": "Block",
										"src": "3943:684:10",
										"statements": [
											{
												"assignments": [
													null,
													null,
													1474,
													1476,
													null,
													null,
													null
												],
												"declarations": [
													null,
													null,
													{
														"constant": false,
														"id": 1474,
														"mutability": "mutable",
														"name": "observationIndex",
														"nodeType": "VariableDeclaration",
														"scope": 1530,
														"src": "3958:23:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"typeName": {
															"id": 1473,
															"name": "uint16",
															"nodeType": "ElementaryTypeName",
															"src": "3958:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1476,
														"mutability": "mutable",
														"name": "observationCardinality",
														"nodeType": "VariableDeclaration",
														"scope": 1530,
														"src": "3983:29:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"typeName": {
															"id": 1475,
															"name": "uint16",
															"nodeType": "ElementaryTypeName",
															"src": "3983:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null
												],
												"id": 1482,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 1478,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1468,
																	"src": "4037:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1477,
																"name": "IUniswapV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 104,
																"src": "4022:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$104_$",
																	"typeString": "type(contract IUniswapV3Pool)"
																}
															},
															"id": 1479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4022:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$104",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 1480,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 437,
														"src": "4022:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,uint8,bool)"
														}
													},
													"id": 1481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4022:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,uint8,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3953:97:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															"id": 1486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1484,
																"name": "observationCardinality",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1476,
																"src": "4068:22:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1485,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4093:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4068:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e49",
															"id": 1487,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4096:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e817963341ac54b6c6630a42fcd594b50ae6e47bc5952aa5478cb70078a54ca0",
																"typeString": "literal_string \"NI\""
															},
															"value": "NI"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e817963341ac54b6c6630a42fcd594b50ae6e47bc5952aa5478cb70078a54ca0",
																"typeString": "literal_string \"NI\""
															}
														],
														"id": 1483,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4060:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4060:41:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1489,
												"nodeType": "ExpressionStatement",
												"src": "4060:41:10"
											},
											{
												"assignments": [
													1491,
													null,
													null,
													1493
												],
												"declarations": [
													{
														"constant": false,
														"id": 1491,
														"mutability": "mutable",
														"name": "observationTimestamp",
														"nodeType": "VariableDeclaration",
														"scope": 1530,
														"src": "4113:27:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														},
														"typeName": {
															"id": 1490,
															"name": "uint32",
															"nodeType": "ElementaryTypeName",
															"src": "4113:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													{
														"constant": false,
														"id": 1493,
														"mutability": "mutable",
														"name": "initialized",
														"nodeType": "VariableDeclaration",
														"scope": 1530,
														"src": "4146:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1492,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4146:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1505,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															"id": 1503,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint16",
																			"typeString": "uint16"
																		},
																		"id": 1500,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1498,
																			"name": "observationIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1474,
																			"src": "4213:16:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint16",
																				"typeString": "uint16"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 1499,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4232:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "4213:20:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint16",
																			"typeString": "uint16"
																		}
																	}
																],
																"id": 1501,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4212:22:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 1502,
																"name": "observationCardinality",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1476,
																"src": "4237:22:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"src": "4212:47:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1495,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1468,
																	"src": "4193:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1494,
																"name": "IUniswapV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 104,
																"src": "4178:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$104_$",
																	"typeString": "type(contract IUniswapV3Pool)"
																}
															},
															"id": 1496,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4178:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$104",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 1497,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "observations",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 523,
														"src": "4178:33:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
															"typeString": "function (uint256) view external returns (uint32,int56,uint160,bool)"
														}
													},
													"id": 1504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4178:82:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
														"typeString": "tuple(uint32,int56,uint160,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4112:148:10"
											},
											{
												"condition": {
													"id": 1507,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4445:12:10",
													"subExpression": {
														"id": 1506,
														"name": "initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1493,
														"src": "4446:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1519,
												"nodeType": "IfStatement",
												"src": "4441:110:10",
												"trueBody": {
													"id": 1518,
													"nodeType": "Block",
													"src": "4459:92:10",
													"statements": [
														{
															"expression": {
																"id": 1516,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"components": [
																		{
																			"id": 1508,
																			"name": "observationTimestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1491,
																			"src": "4474:20:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint32",
																				"typeString": "uint32"
																			}
																		},
																		null,
																		null,
																		null
																	],
																	"id": 1509,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "TupleExpression",
																	"src": "4473:28:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_uint32_$__$__$__$",
																		"typeString": "tuple(uint32,,,)"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 1514,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4538:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1511,
																					"name": "pool",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1468,
																					"src": "4519:4:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1510,
																				"name": "IUniswapV3Pool",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 104,
																				"src": "4504:14:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$104_$",
																					"typeString": "type(contract IUniswapV3Pool)"
																				}
																			},
																			"id": 1512,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4504:20:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IUniswapV3Pool_$104",
																				"typeString": "contract IUniswapV3Pool"
																			}
																		},
																		"id": 1513,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "observations",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 523,
																		"src": "4504:33:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
																			"typeString": "function (uint256) view external returns (uint32,int56,uint160,bool)"
																		}
																	},
																	"id": 1515,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4504:36:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
																		"typeString": "tuple(uint32,int56,uint160,bool)"
																	}
																},
																"src": "4473:67:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1517,
															"nodeType": "ExpressionStatement",
															"src": "4473:67:10"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1528,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1520,
														"name": "secondsAgo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1471,
														"src": "4561:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														},
														"id": 1527,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1523,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4581:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1524,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "4581:15:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1522,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4574:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint32_$",
																	"typeString": "type(uint32)"
																},
																"typeName": {
																	"id": 1521,
																	"name": "uint32",
																	"nodeType": "ElementaryTypeName",
																	"src": "4574:6:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1525,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4574:23:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 1526,
															"name": "observationTimestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1491,
															"src": "4600:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"src": "4574:46:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "4561:59:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"id": 1529,
												"nodeType": "ExpressionStatement",
												"src": "4561:59:10"
											}
										]
									},
									"documentation": {
										"id": 1466,
										"nodeType": "StructuredDocumentation",
										"src": "3577:265:10",
										"text": "@notice Given a pool, it returns the number of seconds ago of the oldest stored observation\n @param pool Address of Uniswap V3 pool that we want to observe\n @return secondsAgo The number of seconds ago of the oldest observation stored for the pool"
									},
									"id": 1531,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getOldestObservationSecondsAgo",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1531,
												"src": "3887:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1467,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3887:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3886:14:10"
									},
									"returnParameters": {
										"id": 1472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1471,
												"mutability": "mutable",
												"name": "secondsAgo",
												"nodeType": "VariableDeclaration",
												"scope": 1531,
												"src": "3924:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1470,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "3924:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3923:19:10"
									},
									"scope": 1821,
									"src": "3847:780:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1673,
										"nodeType": "Block",
										"src": "4948:1676:10",
										"statements": [
											{
												"assignments": [
													null,
													1542,
													1544,
													1546,
													null,
													null,
													null
												],
												"declarations": [
													null,
													{
														"constant": false,
														"id": 1542,
														"mutability": "mutable",
														"name": "tick",
														"nodeType": "VariableDeclaration",
														"scope": 1673,
														"src": "4961:10:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1541,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "4961:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1544,
														"mutability": "mutable",
														"name": "observationIndex",
														"nodeType": "VariableDeclaration",
														"scope": 1673,
														"src": "4973:23:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"typeName": {
															"id": 1543,
															"name": "uint16",
															"nodeType": "ElementaryTypeName",
															"src": "4973:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1546,
														"mutability": "mutable",
														"name": "observationCardinality",
														"nodeType": "VariableDeclaration",
														"scope": 1673,
														"src": "4998:29:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														},
														"typeName": {
															"id": 1545,
															"name": "uint16",
															"nodeType": "ElementaryTypeName",
															"src": "4998:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null
												],
												"id": 1552,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 1548,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1534,
																	"src": "5052:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1547,
																"name": "IUniswapV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 104,
																"src": "5037:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$104_$",
																	"typeString": "type(contract IUniswapV3Pool)"
																}
															},
															"id": 1549,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5037:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$104",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 1550,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 437,
														"src": "5037:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,uint8,bool)"
														}
													},
													"id": 1551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5037:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,uint8,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4958:107:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															"id": 1556,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1554,
																"name": "observationCardinality",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1546,
																"src": "5167:22:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "31",
																"id": 1555,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5192:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "5167:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e454f",
															"id": 1557,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5195:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6dc5790d7c4bfaaa2e4f8e2cd517bacd4a3831f85c0964e56f2743cbb847bc46",
																"typeString": "literal_string \"NEO\""
															},
															"value": "NEO"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6dc5790d7c4bfaaa2e4f8e2cd517bacd4a3831f85c0964e56f2743cbb847bc46",
																"typeString": "literal_string \"NEO\""
															}
														],
														"id": 1553,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5159:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1558,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5159:42:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1559,
												"nodeType": "ExpressionStatement",
												"src": "5159:42:10"
											},
											{
												"assignments": [
													1561,
													1563,
													1565,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1561,
														"mutability": "mutable",
														"name": "observationTimestamp",
														"nodeType": "VariableDeclaration",
														"scope": 1673,
														"src": "5519:27:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														},
														"typeName": {
															"id": 1560,
															"name": "uint32",
															"nodeType": "ElementaryTypeName",
															"src": "5519:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1563,
														"mutability": "mutable",
														"name": "tickCumulative",
														"nodeType": "VariableDeclaration",
														"scope": 1673,
														"src": "5548:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														},
														"typeName": {
															"id": 1562,
															"name": "int56",
															"nodeType": "ElementaryTypeName",
															"src": "5548:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1565,
														"mutability": "mutable",
														"name": "secondsPerLiquidityCumulativeX128",
														"nodeType": "VariableDeclaration",
														"scope": 1673,
														"src": "5570:41:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 1564,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "5570:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1572,
												"initialValue": {
													"arguments": [
														{
															"id": 1570,
															"name": "observationIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1544,
															"src": "5663:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1567,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1534,
																	"src": "5644:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1566,
																"name": "IUniswapV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 104,
																"src": "5629:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$104_$",
																	"typeString": "type(contract IUniswapV3Pool)"
																}
															},
															"id": 1568,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5629:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$104",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 1569,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "observations",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 523,
														"src": "5629:33:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
															"typeString": "function (uint256) view external returns (uint32,int56,uint160,bool)"
														}
													},
													"id": 1571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5629:51:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
														"typeString": "tuple(uint32,int56,uint160,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5518:162:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													},
													"id": 1579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1573,
														"name": "observationTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1561,
														"src": "5694:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1576,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "5725:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1577,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "5725:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1575,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5718:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint32_$",
																"typeString": "type(uint32)"
															},
															"typeName": {
																"id": 1574,
																"name": "uint32",
																"nodeType": "ElementaryTypeName",
																"src": "5718:6:10",
																"typeDescriptions": {}
															}
														},
														"id": 1578,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5718:23:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "5694:47:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1589,
												"nodeType": "IfStatement",
												"src": "5690:125:10",
												"trueBody": {
													"id": 1588,
													"nodeType": "Block",
													"src": "5743:72:10",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"id": 1580,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1542,
																		"src": "5765:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"arguments": [
																					{
																						"id": 1582,
																						"name": "pool",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1534,
																						"src": "5786:4:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 1581,
																					"name": "IUniswapV3Pool",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 104,
																					"src": "5771:14:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$104_$",
																						"typeString": "type(contract IUniswapV3Pool)"
																					}
																				},
																				"id": 1583,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5771:20:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IUniswapV3Pool_$104",
																					"typeString": "contract IUniswapV3Pool"
																				}
																			},
																			"id": 1584,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "liquidity",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 463,
																			"src": "5771:30:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$__$returns$_t_uint128_$",
																				"typeString": "function () view external returns (uint128)"
																			}
																		},
																		"id": 1585,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5771:32:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	}
																],
																"id": 1586,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5764:40:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_int24_$_t_uint128_$",
																	"typeString": "tuple(int24,uint128)"
																}
															},
															"functionReturnParameters": 1540,
															"id": 1587,
															"nodeType": "Return",
															"src": "5757:47:10"
														}
													]
												}
											},
											{
												"assignments": [
													1591
												],
												"declarations": [
													{
														"constant": false,
														"id": 1591,
														"mutability": "mutable",
														"name": "prevIndex",
														"nodeType": "VariableDeclaration",
														"scope": 1673,
														"src": "5825:17:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1590,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5825:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1603,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1599,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1597,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1594,
																				"name": "observationIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1544,
																				"src": "5854:16:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint16",
																					"typeString": "uint16"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint16",
																					"typeString": "uint16"
																				}
																			],
																			"id": 1593,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5846:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1592,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "5846:7:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1595,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5846:25:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 1596,
																		"name": "observationCardinality",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1546,
																		"src": "5874:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint16",
																			"typeString": "uint16"
																		}
																	},
																	"src": "5846:50:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1598,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5899:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "5846:54:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1600,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5845:56:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 1601,
														"name": "observationCardinality",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1546,
														"src": "5904:22:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"src": "5845:81:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5825:101:10"
											},
											{
												"assignments": [
													1605,
													1607,
													1609,
													1611
												],
												"declarations": [
													{
														"constant": false,
														"id": 1605,
														"mutability": "mutable",
														"name": "prevObservationTimestamp",
														"nodeType": "VariableDeclaration",
														"scope": 1673,
														"src": "5950:31:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														},
														"typeName": {
															"id": 1604,
															"name": "uint32",
															"nodeType": "ElementaryTypeName",
															"src": "5950:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1607,
														"mutability": "mutable",
														"name": "prevTickCumulative",
														"nodeType": "VariableDeclaration",
														"scope": 1673,
														"src": "5995:24:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														},
														"typeName": {
															"id": 1606,
															"name": "int56",
															"nodeType": "ElementaryTypeName",
															"src": "5995:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int56",
																"typeString": "int56"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1609,
														"mutability": "mutable",
														"name": "prevSecondsPerLiquidityCumulativeX128",
														"nodeType": "VariableDeclaration",
														"scope": 1673,
														"src": "6033:45:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 1608,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "6033:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1611,
														"mutability": "mutable",
														"name": "prevInitialized",
														"nodeType": "VariableDeclaration",
														"scope": 1673,
														"src": "6092:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1610,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6092:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1618,
												"initialValue": {
													"arguments": [
														{
															"id": 1616,
															"name": "prevIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1591,
															"src": "6159:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1613,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1534,
																	"src": "6140:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1612,
																"name": "IUniswapV3Pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 104,
																"src": "6125:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$104_$",
																	"typeString": "type(contract IUniswapV3Pool)"
																}
															},
															"id": 1614,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6125:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$104",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 1615,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "observations",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 523,
														"src": "6125:33:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
															"typeString": "function (uint256) view external returns (uint32,int56,uint160,bool)"
														}
													},
													"id": 1617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6125:44:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$",
														"typeString": "tuple(uint32,int56,uint160,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5936:233:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1620,
															"name": "prevInitialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1611,
															"src": "6188:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f4e49",
															"id": 1621,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6205:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4375a34c158c497e1dec923d39179cd2bff1d358f7876b16ed4f850d3b707895",
																"typeString": "literal_string \"ONI\""
															},
															"value": "ONI"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4375a34c158c497e1dec923d39179cd2bff1d358f7876b16ed4f850d3b707895",
																"typeString": "literal_string \"ONI\""
															}
														],
														"id": 1619,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6180:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6180:31:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1623,
												"nodeType": "ExpressionStatement",
												"src": "6180:31:10"
											},
											{
												"assignments": [
													1625
												],
												"declarations": [
													{
														"constant": false,
														"id": 1625,
														"mutability": "mutable",
														"name": "delta",
														"nodeType": "VariableDeclaration",
														"scope": 1673,
														"src": "6222:12:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														},
														"typeName": {
															"id": 1624,
															"name": "uint32",
															"nodeType": "ElementaryTypeName",
															"src": "6222:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1629,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													},
													"id": 1628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1626,
														"name": "observationTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1561,
														"src": "6237:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1627,
														"name": "prevObservationTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1605,
														"src": "6260:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"src": "6237:47:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6222:62:10"
											},
											{
												"expression": {
													"id": 1640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1630,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1542,
														"src": "6294:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																},
																"id": 1638,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int56",
																				"typeString": "int56"
																			},
																			"id": 1635,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1633,
																				"name": "tickCumulative",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1563,
																				"src": "6308:14:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int56",
																					"typeString": "int56"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1634,
																				"name": "prevTickCumulative",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1607,
																				"src": "6325:18:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int56",
																					"typeString": "int56"
																				}
																			},
																			"src": "6308:35:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int56",
																				"typeString": "int56"
																			}
																		}
																	],
																	"id": 1636,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6307:37:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int56",
																		"typeString": "int56"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 1637,
																	"name": "delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1625,
																	"src": "6347:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"src": "6307:45:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int56",
																	"typeString": "int56"
																}
															],
															"id": 1632,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6301:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int24_$",
																"typeString": "type(int24)"
															},
															"typeName": {
																"id": 1631,
																"name": "int24",
																"nodeType": "ElementaryTypeName",
																"src": "6301:5:10",
																"typeDescriptions": {}
															}
														},
														"id": 1639,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6301:52:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "6294:59:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1641,
												"nodeType": "ExpressionStatement",
												"src": "6294:59:10"
											},
											{
												"assignments": [
													1643
												],
												"declarations": [
													{
														"constant": false,
														"id": 1643,
														"mutability": "mutable",
														"name": "liquidity",
														"nodeType": "VariableDeclaration",
														"scope": 1673,
														"src": "6363:17:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 1642,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "6363:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1668,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint192",
																"typeString": "uint192"
															},
															"id": 1666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint192",
																			"typeString": "uint192"
																		},
																		"id": 1655,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"id": 1648,
																					"name": "delta",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1625,
																					"src": "6429:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint32",
																						"typeString": "uint32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint32",
																						"typeString": "uint32"
																					}
																				],
																				"id": 1647,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6421:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint192_$",
																					"typeString": "type(uint192)"
																				},
																				"typeName": {
																					"id": 1646,
																					"name": "uint192",
																					"nodeType": "ElementaryTypeName",
																					"src": "6421:7:10",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1649,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6421:14:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint192",
																				"typeString": "uint192"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 1652,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "6443:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint160_$",
																							"typeString": "type(uint160)"
																						},
																						"typeName": {
																							"id": 1651,
																							"name": "uint160",
																							"nodeType": "ElementaryTypeName",
																							"src": "6443:7:10",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_type$_t_uint160_$",
																							"typeString": "type(uint160)"
																						}
																					],
																					"id": 1650,
																					"name": "type",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967269,
																					"src": "6438:4:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 1653,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6438:13:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_meta_type_t_uint160",
																					"typeString": "type(uint160)"
																				}
																			},
																			"id": 1654,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "max",
																			"nodeType": "MemberAccess",
																			"src": "6438:17:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"src": "6421:34:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint192",
																			"typeString": "uint192"
																		}
																	}
																],
																"id": 1656,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6420:36:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint192",
																	"typeString": "uint192"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint192",
																			"typeString": "uint192"
																		},
																		"id": 1664,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					},
																					"id": 1661,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1659,
																						"name": "secondsPerLiquidityCumulativeX128",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1565,
																						"src": "6488:33:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"id": 1660,
																						"name": "prevSecondsPerLiquidityCumulativeX128",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1609,
																						"src": "6524:37:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"src": "6488:73:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				],
																				"id": 1658,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6480:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint192_$",
																					"typeString": "type(uint192)"
																				},
																				"typeName": {
																					"id": 1657,
																					"name": "uint192",
																					"nodeType": "ElementaryTypeName",
																					"src": "6480:7:10",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1662,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6480:82:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint192",
																				"typeString": "uint192"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<<",
																		"rightExpression": {
																			"hexValue": "3332",
																			"id": 1663,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6566:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "6480:88:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint192",
																			"typeString": "uint192"
																		}
																	}
																],
																"id": 1665,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6479:90:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint192",
																	"typeString": "uint192"
																}
															},
															"src": "6420:149:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint192",
																"typeString": "uint192"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint192",
																"typeString": "uint192"
															}
														],
														"id": 1645,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "6395:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint128_$",
															"typeString": "type(uint128)"
														},
														"typeName": {
															"id": 1644,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "6395:7:10",
															"typeDescriptions": {}
														}
													},
													"id": 1667,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6395:188:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6363:220:10"
											},
											{
												"expression": {
													"components": [
														{
															"id": 1669,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1542,
															"src": "6601:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														{
															"id": 1670,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1643,
															"src": "6607:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														}
													],
													"id": 1671,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6600:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int24_$_t_uint128_$",
														"typeString": "tuple(int24,uint128)"
													}
												},
												"functionReturnParameters": 1540,
												"id": 1672,
												"nodeType": "Return",
												"src": "6593:24:10"
											}
										]
									},
									"documentation": {
										"id": 1532,
										"nodeType": "StructuredDocumentation",
										"src": "4633:215:10",
										"text": "@notice Given a pool, it returns the tick value as of the start of the current block\n @param pool Address of Uniswap V3 pool\n @return The tick that the pool was in at the start of the current block"
									},
									"id": 1674,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBlockStartingTickAndLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1674,
												"src": "4895:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4895:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4894:14:10"
									},
									"returnParameters": {
										"id": 1540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1537,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1674,
												"src": "4932:5:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1536,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4932:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1539,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1674,
												"src": "4939:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1538,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4939:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4931:16:10"
									},
									"scope": 1821,
									"src": "4853:1771:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "OracleLibrary.WeightedTickData",
									"id": 1679,
									"members": [
										{
											"constant": false,
											"id": 1676,
											"mutability": "mutable",
											"name": "tick",
											"nodeType": "VariableDeclaration",
											"scope": 1679,
											"src": "6740:10:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1675,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "6740:5:10",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1678,
											"mutability": "mutable",
											"name": "weight",
											"nodeType": "VariableDeclaration",
											"scope": 1679,
											"src": "6760:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1677,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "6760:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "WeightedTickData",
									"nodeType": "StructDefinition",
									"scope": 1821,
									"src": "6706:75:10",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1757,
										"nodeType": "Block",
										"src": "7538:725:10",
										"statements": [
											{
												"assignments": [
													1689
												],
												"declarations": [
													{
														"constant": false,
														"id": 1689,
														"mutability": "mutable",
														"name": "numerator",
														"nodeType": "VariableDeclaration",
														"scope": 1757,
														"src": "7624:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1688,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "7624:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1690,
												"nodeType": "VariableDeclarationStatement",
												"src": "7624:16:10"
											},
											{
												"assignments": [
													1692
												],
												"declarations": [
													{
														"constant": false,
														"id": 1692,
														"mutability": "mutable",
														"name": "denominator",
														"nodeType": "VariableDeclaration",
														"scope": 1757,
														"src": "7697:19:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1691,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7697:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1693,
												"nodeType": "VariableDeclarationStatement",
												"src": "7697:19:10"
											},
											{
												"body": {
													"id": 1726,
													"nodeType": "Block",
													"src": "7881:154:10",
													"statements": [
														{
															"expression": {
																"id": 1717,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1704,
																	"name": "numerator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1689,
																	"src": "7895:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	},
																	"id": 1716,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1705,
																				"name": "weightedTickData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1683,
																				"src": "7908:16:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_struct$_WeightedTickData_$1679_memory_ptr_$dyn_memory_ptr",
																					"typeString": "struct OracleLibrary.WeightedTickData memory[] memory"
																				}
																			},
																			"id": 1707,
																			"indexExpression": {
																				"id": 1706,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1695,
																				"src": "7925:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7908:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_WeightedTickData_$1679_memory_ptr",
																				"typeString": "struct OracleLibrary.WeightedTickData memory"
																			}
																		},
																		"id": 1708,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "tick",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1676,
																		"src": "7908:24:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"arguments": [
																			{
																				"expression": {
																					"baseExpression": {
																						"id": 1711,
																						"name": "weightedTickData",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1683,
																						"src": "7942:16:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_array$_t_struct$_WeightedTickData_$1679_memory_ptr_$dyn_memory_ptr",
																							"typeString": "struct OracleLibrary.WeightedTickData memory[] memory"
																						}
																					},
																					"id": 1713,
																					"indexExpression": {
																						"id": 1712,
																						"name": "i",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1695,
																						"src": "7959:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "7942:19:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_WeightedTickData_$1679_memory_ptr",
																						"typeString": "struct OracleLibrary.WeightedTickData memory"
																					}
																				},
																				"id": 1714,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "weight",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1678,
																				"src": "7942:26:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			],
																			"id": 1710,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7935:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_int256_$",
																				"typeString": "type(int256)"
																			},
																			"typeName": {
																				"id": 1709,
																				"name": "int256",
																				"nodeType": "ElementaryTypeName",
																				"src": "7935:6:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1715,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7935:34:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"src": "7908:61:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "7895:74:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"id": 1718,
															"nodeType": "ExpressionStatement",
															"src": "7895:74:10"
														},
														{
															"expression": {
																"id": 1724,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1719,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1692,
																	"src": "7983:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 1720,
																			"name": "weightedTickData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1683,
																			"src": "7998:16:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_WeightedTickData_$1679_memory_ptr_$dyn_memory_ptr",
																				"typeString": "struct OracleLibrary.WeightedTickData memory[] memory"
																			}
																		},
																		"id": 1722,
																		"indexExpression": {
																			"id": 1721,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1695,
																			"src": "8015:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7998:19:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_WeightedTickData_$1679_memory_ptr",
																			"typeString": "struct OracleLibrary.WeightedTickData memory"
																		}
																	},
																	"id": 1723,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "weight",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1678,
																	"src": "7998:26:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "7983:41:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1725,
															"nodeType": "ExpressionStatement",
															"src": "7983:41:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1697,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1695,
														"src": "7847:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1698,
															"name": "weightedTickData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1683,
															"src": "7851:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_WeightedTickData_$1679_memory_ptr_$dyn_memory_ptr",
																"typeString": "struct OracleLibrary.WeightedTickData memory[] memory"
															}
														},
														"id": 1699,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7851:23:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7847:27:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1727,
												"initializationExpression": {
													"assignments": [
														1695
													],
													"declarations": [
														{
															"constant": false,
															"id": 1695,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1727,
															"src": "7836:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1694,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "7836:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1696,
													"nodeType": "VariableDeclarationStatement",
													"src": "7836:9:10"
												},
												"loopExpression": {
													"expression": {
														"id": 1702,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "7876:3:10",
														"subExpression": {
															"id": 1701,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1695,
															"src": "7876:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1703,
													"nodeType": "ExpressionStatement",
													"src": "7876:3:10"
												},
												"nodeType": "ForStatement",
												"src": "7831:204:10"
											},
											{
												"expression": {
													"id": 1738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1728,
														"name": "weightedArithmeticMeanTick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1686,
														"src": "8045:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1736,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1731,
																	"name": "numerator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1689,
																	"src": "8080:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"arguments": [
																		{
																			"id": 1734,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1692,
																			"src": "8099:11:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1733,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8092:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1732,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8092:6:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1735,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8092:19:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "8080:31:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 1730,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8074:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int24_$",
																"typeString": "type(int24)"
															},
															"typeName": {
																"id": 1729,
																"name": "int24",
																"nodeType": "ElementaryTypeName",
																"src": "8074:5:10",
																"typeDescriptions": {}
															}
														},
														"id": 1737,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8074:38:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "8045:67:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1739,
												"nodeType": "ExpressionStatement",
												"src": "8045:67:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1752,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 1742,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1740,
															"name": "numerator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1689,
															"src": "8171:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 1741,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8183:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8171:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1750,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	},
																	"id": 1748,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1743,
																		"name": "numerator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1689,
																		"src": "8189:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 1746,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1692,
																				"src": "8208:11:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1745,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8201:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_int256_$",
																				"typeString": "type(int256)"
																			},
																			"typeName": {
																				"id": 1744,
																				"name": "int256",
																				"nodeType": "ElementaryTypeName",
																				"src": "8201:6:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1747,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8201:19:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"src": "8189:31:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1749,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8224:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8189:36:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 1751,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "8188:38:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8171:55:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1756,
												"nodeType": "IfStatement",
												"src": "8167:89:10",
												"trueBody": {
													"expression": {
														"id": 1754,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": false,
														"src": "8228:28:10",
														"subExpression": {
															"id": 1753,
															"name": "weightedArithmeticMeanTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1686,
															"src": "8228:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"id": 1755,
													"nodeType": "ExpressionStatement",
													"src": "8228:28:10"
												}
											}
										]
									},
									"documentation": {
										"id": 1680,
										"nodeType": "StructuredDocumentation",
										"src": "6787:578:10",
										"text": "@notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\n @param weightedTickData An array of ticks and weights\n @return weightedArithmeticMeanTick The weighted arithmetic mean tick\n @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\n extreme care must be taken to ensure that ticks are comparable (including decimal differences).\n @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price."
									},
									"id": 1758,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getWeightedArithmeticMeanTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1683,
												"mutability": "mutable",
												"name": "weightedTickData",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "7409:42:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_WeightedTickData_$1679_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct OracleLibrary.WeightedTickData[]"
												},
												"typeName": {
													"baseType": {
														"id": 1681,
														"name": "WeightedTickData",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 1679,
														"src": "7409:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_WeightedTickData_$1679_storage_ptr",
															"typeString": "struct OracleLibrary.WeightedTickData"
														}
													},
													"id": 1682,
													"nodeType": "ArrayTypeName",
													"src": "7409:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_WeightedTickData_$1679_storage_$dyn_storage_ptr",
														"typeString": "struct OracleLibrary.WeightedTickData[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7408:44:10"
									},
									"returnParameters": {
										"id": 1687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1686,
												"mutability": "mutable",
												"name": "weightedArithmeticMeanTick",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "7500:32:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1685,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "7500:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7499:34:10"
									},
									"scope": 1821,
									"src": "7370:893:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1819,
										"nodeType": "Block",
										"src": "8928:409:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1777,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1774,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1771,
																		"name": "tokens",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "8946:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																			"typeString": "address[] memory"
																		}
																	},
																	"id": 1772,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "8946:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1773,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8962:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8946:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1775,
																	"name": "ticks",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1765,
																	"src": "8967:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_int24_$dyn_memory_ptr",
																		"typeString": "int24[] memory"
																	}
																},
																"id": 1776,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "8967:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8946:33:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "444c",
															"id": 1778,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8981:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f6c9155cb7d5666d109a64d0e580ecac0cec91dae3b0325b400a4ad4d41fbcb9",
																"typeString": "literal_string \"DL\""
															},
															"value": "DL"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f6c9155cb7d5666d109a64d0e580ecac0cec91dae3b0325b400a4ad4d41fbcb9",
																"typeString": "literal_string \"DL\""
															}
														],
														"id": 1770,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8938:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8938:48:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1780,
												"nodeType": "ExpressionStatement",
												"src": "8938:48:10"
											},
											{
												"body": {
													"id": 1817,
													"nodeType": "Block",
													"src": "9040:291:10",
													"statements": [
														{
															"expression": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 1800,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"baseExpression": {
																			"id": 1792,
																			"name": "tokens",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1762,
																			"src": "9231:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																				"typeString": "address[] memory"
																			}
																		},
																		"id": 1796,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1795,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1793,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1782,
																				"src": "9238:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1794,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9242:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "9238:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9231:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"baseExpression": {
																			"id": 1797,
																			"name": "tokens",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1762,
																			"src": "9247:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																				"typeString": "address[] memory"
																			}
																		},
																		"id": 1799,
																		"indexExpression": {
																			"id": 1798,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1782,
																			"src": "9254:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9247:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "9231:25:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"id": 1814,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1808,
																		"name": "syntheticTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1768,
																		"src": "9291:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "-=",
																	"rightHandSide": {
																		"baseExpression": {
																			"id": 1809,
																			"name": "ticks",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1765,
																			"src": "9308:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_int24_$dyn_memory_ptr",
																				"typeString": "int24[] memory"
																			}
																		},
																		"id": 1813,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1812,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1810,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1782,
																				"src": "9314:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1811,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9318:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "9314:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9308:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"src": "9291:29:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"id": 1815,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "9231:89:10",
																"trueExpression": {
																	"id": 1807,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1801,
																		"name": "syntheticTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1768,
																		"src": "9259:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "+=",
																	"rightHandSide": {
																		"baseExpression": {
																			"id": 1802,
																			"name": "ticks",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1765,
																			"src": "9276:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_int24_$dyn_memory_ptr",
																				"typeString": "int24[] memory"
																			}
																		},
																		"id": 1806,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1805,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1803,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1782,
																				"src": "9282:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1804,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9286:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "9282:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9276:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	},
																	"src": "9259:29:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"id": 1816,
															"nodeType": "ExpressionStatement",
															"src": "9231:89:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1785,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1782,
														"src": "9016:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"expression": {
															"id": 1786,
															"name": "ticks",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1765,
															"src": "9021:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_int24_$dyn_memory_ptr",
																"typeString": "int24[] memory"
															}
														},
														"id": 1787,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "9021:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9016:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1818,
												"initializationExpression": {
													"assignments": [
														1782
													],
													"declarations": [
														{
															"constant": false,
															"id": 1782,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1818,
															"src": "9001:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1781,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "9001:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1784,
													"initialValue": {
														"hexValue": "31",
														"id": 1783,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9013:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "9001:13:10"
												},
												"loopExpression": {
													"expression": {
														"id": 1790,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "9035:3:10",
														"subExpression": {
															"id": 1789,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1782,
															"src": "9035:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1791,
													"nodeType": "ExpressionStatement",
													"src": "9035:3:10"
												},
												"nodeType": "ForStatement",
												"src": "8996:335:10"
											}
										]
									},
									"documentation": {
										"id": 1759,
										"nodeType": "StructuredDocumentation",
										"src": "8269:509:10",
										"text": "@notice Returns the \"synthetic\" tick which represents the price of the first entry in `tokens` in terms of the last\n @dev Useful for calculating relative prices along routes.\n @dev There must be one tick for each pairwise set of tokens.\n @param tokens The token contract addresses\n @param ticks The ticks, representing the price of each token pair in `tokens`\n @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`"
									},
									"id": 1820,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getChainedPrice",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1762,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 1820,
												"src": "8808:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1760,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "8808:7:10",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1761,
													"nodeType": "ArrayTypeName",
													"src": "8808:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1765,
												"mutability": "mutable",
												"name": "ticks",
												"nodeType": "VariableDeclaration",
												"scope": 1820,
												"src": "8833:20:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int24_$dyn_memory_ptr",
													"typeString": "int24[]"
												},
												"typeName": {
													"baseType": {
														"id": 1763,
														"name": "int24",
														"nodeType": "ElementaryTypeName",
														"src": "8833:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"id": 1764,
													"nodeType": "ArrayTypeName",
													"src": "8833:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int24_$dyn_storage_ptr",
														"typeString": "int24[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8807:47:10"
									},
									"returnParameters": {
										"id": 1769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1768,
												"mutability": "mutable",
												"name": "syntheticTick",
												"nodeType": "VariableDeclaration",
												"scope": 1820,
												"src": "8902:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1767,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8902:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8901:22:10"
									},
									"scope": 1821,
									"src": "8783:554:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1822,
							"src": "356:8983:10"
						}
					],
					"src": "45:9295:10"
				},
				"id": 10
			},
			"contracts/UniswapV3Oracle.sol": {
				"ast": {
					"absolutePath": "contracts/UniswapV3Oracle.sol",
					"exportedSymbols": {
						"FullMath": [
							697
						],
						"IUniswapV3Factory": [
							82
						],
						"IUniswapV3Pool": [
							104
						],
						"IUniswapV3PoolActions": [
							200
						],
						"IUniswapV3PoolDerivedState": [
							231
						],
						"IUniswapV3PoolEvents": [
							350
						],
						"IUniswapV3PoolImmutables": [
							390
						],
						"IUniswapV3PoolOwnerActions": [
							416
						],
						"IUniswapV3PoolState": [
							524
						],
						"OracleLibrary": [
							1821
						],
						"TickMath": [
							1232
						],
						"UniswapV3Oracle": [
							1928
						]
					},
					"id": 1929,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1823,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:11"
						},
						{
							"id": 1824,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "63:19:11"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol",
							"id": 1825,
							"nodeType": "ImportDirective",
							"scope": 1929,
							"sourceUnit": 83,
							"src": "84:69:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol",
							"file": "@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol",
							"id": 1826,
							"nodeType": "ImportDirective",
							"scope": 1929,
							"sourceUnit": 1822,
							"src": "154:69:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1928,
							"linearizedBaseContracts": [
								1928
							],
							"name": "UniswapV3Oracle",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "0dfe1681",
									"id": 1828,
									"mutability": "immutable",
									"name": "token0",
									"nodeType": "VariableDeclaration",
									"scope": 1928,
									"src": "561:31:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1827,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "561:7:11",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d21220a7",
									"id": 1830,
									"mutability": "immutable",
									"name": "token1",
									"nodeType": "VariableDeclaration",
									"scope": 1928,
									"src": "598:31:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1829,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "598:7:11",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "16f0115b",
									"id": 1832,
									"mutability": "immutable",
									"name": "pool",
									"nodeType": "VariableDeclaration",
									"scope": 1928,
									"src": "635:29:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1831,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "635:7:11",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1876,
										"nodeType": "Block",
										"src": "744:238:11",
										"statements": [
											{
												"expression": {
													"id": 1845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1843,
														"name": "token0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1828,
														"src": "754:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1844,
														"name": "_token0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1834,
														"src": "761:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "754:14:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1846,
												"nodeType": "ExpressionStatement",
												"src": "754:14:11"
											},
											{
												"expression": {
													"id": 1849,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1847,
														"name": "token1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1830,
														"src": "778:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1848,
														"name": "_token1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1836,
														"src": "785:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "778:14:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1850,
												"nodeType": "ExpressionStatement",
												"src": "778:14:11"
											},
											{
												"assignments": [
													1852
												],
												"declarations": [
													{
														"constant": false,
														"id": 1852,
														"mutability": "mutable",
														"name": "_pool",
														"nodeType": "VariableDeclaration",
														"scope": 1876,
														"src": "803:13:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1851,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "803:7:11",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1861,
												"initialValue": {
													"arguments": [
														{
															"id": 1857,
															"name": "_token0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1834,
															"src": "866:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1858,
															"name": "_token1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1836,
															"src": "874:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1859,
															"name": "_fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1840,
															"src": "882:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1854,
																	"name": "_factory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1838,
																	"src": "835:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1853,
																"name": "IUniswapV3Factory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 82,
																"src": "817:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUniswapV3Factory_$82_$",
																	"typeString": "type(contract IUniswapV3Factory)"
																}
															},
															"id": 1855,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "817:27:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Factory_$82",
																"typeString": "contract IUniswapV3Factory"
															}
														},
														"id": 1856,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "getPool",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 55,
														"src": "817:35:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$",
															"typeString": "function (address,address,uint24) view external returns (address)"
														}
													},
													"id": 1860,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "817:79:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "803:93:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1868,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1863,
																"name": "_pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1852,
																"src": "914:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1866,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "929:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1865,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "921:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1864,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "921:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1867,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "921:10:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "914:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506f6f6c7320646f6573206e6f74206578697374",
															"id": 1869,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "932:22:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3af18816a8a568d0d762c6bf9b28b87a3089f28cd99bc9524d95c6fa1b66a712",
																"typeString": "literal_string \"Pools does not exist\""
															},
															"value": "Pools does not exist"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3af18816a8a568d0d762c6bf9b28b87a3089f28cd99bc9524d95c6fa1b66a712",
																"typeString": "literal_string \"Pools does not exist\""
															}
														],
														"id": 1862,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "906:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1870,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "906:49:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1871,
												"nodeType": "ExpressionStatement",
												"src": "906:49:11"
											},
											{
												"expression": {
													"id": 1874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1872,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1832,
														"src": "965:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1873,
														"name": "_pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1852,
														"src": "970:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "965:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1875,
												"nodeType": "ExpressionStatement",
												"src": "965:10:11"
											}
										]
									},
									"id": 1877,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1834,
												"mutability": "mutable",
												"name": "_token0",
												"nodeType": "VariableDeclaration",
												"scope": 1877,
												"src": "683:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1833,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1836,
												"mutability": "mutable",
												"name": "_token1",
												"nodeType": "VariableDeclaration",
												"scope": 1877,
												"src": "699:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1835,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1838,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 1877,
												"src": "715:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1837,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1840,
												"mutability": "mutable",
												"name": "_fee",
												"nodeType": "VariableDeclaration",
												"scope": 1877,
												"src": "732:11:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1839,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "732:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "682:62:11"
									},
									"returnParameters": {
										"id": 1842,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "744:0:11"
									},
									"scope": 1928,
									"src": "671:311:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1926,
										"nodeType": "Block",
										"src": "1137:340:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1895,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1891,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1889,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1879,
																	"src": "1155:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 1890,
																	"name": "token0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1828,
																	"src": "1164:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "1155:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1894,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1892,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1879,
																	"src": "1174:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 1893,
																	"name": "token1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1830,
																	"src": "1183:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "1174:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1155:34:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "696e76616c696420746f6b656e",
															"id": 1896,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1190:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_91766924399ba2aa6ad0c8d1146b6e8fd47173f69f3b391bd887f350814cada7",
																"typeString": "literal_string \"invalid token\""
															},
															"value": "invalid token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_91766924399ba2aa6ad0c8d1146b6e8fd47173f69f3b391bd887f350814cada7",
																"typeString": "literal_string \"invalid token\""
															}
														],
														"id": 1888,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1147:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1897,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1147:59:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1898,
												"nodeType": "ExpressionStatement",
												"src": "1147:59:11"
											},
											{
												"assignments": [
													1900
												],
												"declarations": [
													{
														"constant": false,
														"id": 1900,
														"mutability": "mutable",
														"name": "tokenout",
														"nodeType": "VariableDeclaration",
														"scope": 1926,
														"src": "1216:16:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1899,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1216:7:11",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1907,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1903,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1901,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1879,
															"src": "1233:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 1902,
															"name": "token0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1828,
															"src": "1242:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "1233:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1905,
														"name": "token0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1828,
														"src": "1258:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1906,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1233:31:11",
													"trueExpression": {
														"id": 1904,
														"name": "token1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1830,
														"src": "1251:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1216:48:11"
											},
											{
												"assignments": [
													1909,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1909,
														"mutability": "mutable",
														"name": "tick",
														"nodeType": "VariableDeclaration",
														"scope": 1926,
														"src": "1276:10:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1908,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "1276:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1915,
												"initialValue": {
													"arguments": [
														{
															"id": 1912,
															"name": "pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1832,
															"src": "1311:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1913,
															"name": "secondsAgo",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1883,
															"src": "1316:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														],
														"expression": {
															"id": 1910,
															"name": "OracleLibrary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1821,
															"src": "1289:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_OracleLibrary_$1821_$",
																"typeString": "type(library OracleLibrary)"
															}
														},
														"id": 1911,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "consult",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1367,
														"src": "1289:21:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint32_$returns$_t_int24_$_t_uint128_$",
															"typeString": "function (address,uint32) view returns (int24,uint128)"
														}
													},
													"id": 1914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1289:38:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int24_$_t_uint128_$",
														"typeString": "tuple(int24,uint128)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1275:52:11"
											},
											{
												"expression": {
													"id": 1924,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1916,
														"name": "amountOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1886,
														"src": "1337:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1919,
																"name": "tick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1909,
																"src": "1391:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															{
																"id": 1920,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1881,
																"src": "1409:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 1921,
																"name": "tokenIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1879,
																"src": "1431:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1922,
																"name": "tokenout",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1900,
																"src": "1452:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																},
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 1917,
																"name": "OracleLibrary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1821,
																"src": "1349:13:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_OracleLibrary_$1821_$",
																	"typeString": "type(library OracleLibrary)"
																}
															},
															"id": 1918,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "getQuoteAtTick",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1465,
															"src": "1349:28:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_int24_$_t_uint128_$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (int24,uint128,address,address) pure returns (uint256)"
															}
														},
														"id": 1923,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1349:121:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1337:133:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1925,
												"nodeType": "ExpressionStatement",
												"src": "1337:133:11"
											}
										]
									},
									"functionSelector": "8f2e8199",
									"id": 1927,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "estimateAmountOut",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1884,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1879,
												"mutability": "mutable",
												"name": "tokenIn",
												"nodeType": "VariableDeclaration",
												"scope": 1927,
												"src": "1024:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1878,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1024:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1881,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1927,
												"src": "1049:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1880,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1049:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1883,
												"mutability": "mutable",
												"name": "secondsAgo",
												"nodeType": "VariableDeclaration",
												"scope": 1927,
												"src": "1075:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1882,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "1075:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1014:84:11"
									},
									"returnParameters": {
										"id": 1887,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1886,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1927,
												"src": "1121:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1885,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1121:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1120:16:11"
									},
									"scope": 1928,
									"src": "988:489:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1929,
							"src": "530:949:11"
						}
					],
					"src": "39:1440:11"
				},
				"id": 11
			}
		}
	}
}